<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>别学前端，小心上瘾</title>
  
  
  <link href="https://flower-f.github.io/atom.xml" rel="self"/>
  
  <link href="https://flower-f.github.io/"/>
  <updated>2021-12-03T10:50:25.132Z</updated>
  <id>https://flower-f.github.io/</id>
  
  <author>
    <name>Flower F</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前序遍历</title>
    <link href="https://flower-f.github.io/2021/12/03/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://flower-f.github.io/2021/12/03/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</id>
    <published>2021-12-03T10:49:32.000Z</published>
    <updated>2021-12-03T10:50:25.132Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">https://leetcode-cn.com/problems/binary-tree-preorder-traversal/</a><br>解法分析：纯净的前序遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    helper(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">helper</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(root.val);</span><br><span class="line">        helper(root.left);</span><br><span class="line">        helper(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-tree-preorder-traversal/&quot;&gt;https://leetcode-cn.com/problems/binary-tree-preorder</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>链表中的倒数第n个节点</title>
    <link href="https://flower-f.github.io/2021/12/03/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <id>https://flower-f.github.io/2021/12/03/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/</id>
    <published>2021-12-03T10:42:26.000Z</published>
    <updated>2021-12-03T10:50:36.263Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/</a><br>解法分析：<br>快慢指针的经典问题。将fast 指向链表的第 k + 1 个节点，slow 指向链表的第一个节点，此时指针 fast 与 slow 二者之间刚好间隔 k 个节点。此时两个指针同步向后走，当 fast 走到链表的尾部空节点时，则此时 slow 指针刚好指向链表的倒数第 k 个节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getKthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> slow, fast;</span><br><span class="line">    slow = fast = head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(fast) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/&quot;&gt;https://leetcode-cn.com/problems/lian-b</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>中序遍历</title>
    <link href="https://flower-f.github.io/2021/12/03/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://flower-f.github.io/2021/12/03/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</id>
    <published>2021-12-03T10:37:35.000Z</published>
    <updated>2021-12-03T10:38:35.721Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">https://leetcode-cn.com/problems/binary-tree-inorder-traversal/</a><br>解法分析：纯净的中序遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    helper(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">helper</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        helper(root.left);</span><br><span class="line">        res.push(root.val);</span><br><span class="line">        helper(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-tree-inorder-traversal/&quot;&gt;https://leetcode-cn.com/problems/binary-tree-inorder-t</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的最大深度</title>
    <link href="https://flower-f.github.io/2021/12/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
    <id>https://flower-f.github.io/2021/12/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</id>
    <published>2021-12-03T10:31:03.000Z</published>
    <updated>2021-12-03T10:32:55.662Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/</a><br>解法分析：<br>如果知道了左子树和右子树的最大深度 l 和 r，那么该二叉树的最大深度即为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxDepth = max(l, r) + 1</span><br></pre></td></tr></table></figure><p>，所以可以使用递归解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> left = maxDepth(root.left);</span><br><span class="line">        <span class="keyword">const</span> right = maxDepth(root.right);</span><br><span class="line">        <span class="keyword">const</span> maxHeight = <span class="built_in">Math</span>.max(left, right) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> maxHeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/&quot;&gt;https://leetcode-cn.com/problems/maximum-depth-of-binar</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>买卖股票的最佳时机</title>
    <link href="https://flower-f.github.io/2021/12/03/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
    <id>https://flower-f.github.io/2021/12/03/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</id>
    <published>2021-12-03T09:50:53.000Z</published>
    <updated>2021-12-03T10:22:10.126Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/</a><br>解法分析：<br>贪心，<br>如果我们真的在买卖股票，我们肯定会想：如果我是在历史最低点买的股票就好了！在题目中，我们只要用一个变量记录一个历史最低价格 minprice，我们就可以假设自己的股票是在那天买的。那么我们在第 i 天卖出股票能得到的利润就是 prices[i] - minprice。</p><p>因此，我们只需要遍历价格数组一遍，记录历史最低点，然后在每一天考虑这么一个问题：如果我是在历史最低点买进的，那么我今天卖出能赚多少钱？当考虑完所有天数之时，我们就得到了最好的答案。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">prices</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prices.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> minPrice = prices[<span class="number">0</span>], ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(prices[i] &lt; minPrice) &#123;</span><br><span class="line">            minPrice = prices[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> temp = prices[i] - minPrice;</span><br><span class="line">            <span class="keyword">if</span>(temp &gt; ans) &#123;</span><br><span class="line">                ans = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>参考题解：<br>作者：LeetCode-Solution<br>链接：<br><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/121-mai-mai-gu-piao-de-zui-jia-shi-ji-by-leetcode-/">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/121-mai-mai-gu-piao-de-zui-jia-shi-ji-by-leetcode-/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/&quot;&gt;https://leetcode-cn.com/problems/best-time-to-buy-an</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="https://flower-f.github.io/2021/12/03/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>https://flower-f.github.io/2021/12/03/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</id>
    <published>2021-12-03T09:48:24.000Z</published>
    <updated>2021-12-03T09:49:42.378Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/binary-search">https://leetcode-cn.com/problems/binary-search</a><br>解法分析：标准二分查找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-search&quot;&gt;https://leetcode-cn.com/problems/binary-search&lt;/a&gt;&lt;br&gt;解法分析：标准二分查找&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>环形链表</title>
    <link href="https://flower-f.github.io/2021/12/02/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
    <id>https://flower-f.github.io/2021/12/02/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</id>
    <published>2021-12-02T14:25:49.000Z</published>
    <updated>2021-12-03T09:49:23.326Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/linked-list-cycle">https://leetcode-cn.com/problems/linked-list-cycle</a><br>解法分析：快慢双指针最经典的题目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head === <span class="literal">null</span> || head.next === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> slow = head, fast = head.next;</span><br><span class="line">    <span class="keyword">while</span>(slow !== fast) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!fast || !fast.next) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/linked-list-cycle&quot;&gt;https://leetcode-cn.com/problems/linked-list-cycle&lt;/a&gt;&lt;br&gt;解法分析：快慢双指</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>路径总和</title>
    <link href="https://flower-f.github.io/2021/12/02/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/"/>
    <id>https://flower-f.github.io/2021/12/02/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/</id>
    <published>2021-12-02T12:55:28.000Z</published>
    <updated>2021-12-02T13:11:14.618Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/path-sum">https://leetcode-cn.com/problems/path-sum</a><br>解法分析：使用递归的方法，假定从根节点到当前节点的值之和为 val，我们可以将这个大问题转化为一个小问题：是否存在从当前节点的子节点到叶子的路径，满足其路径和为 sum - val。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">targetSum</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hasPathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, targetSum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root.val === targetSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hasPathSum(root.left, targetSum - root.val) ||</span><br><span class="line">        hasPathSum(root.right, targetSum - root.val)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/path-sum&quot;&gt;https://leetcode-cn.com/problems/path-sum&lt;/a&gt;&lt;br&gt;解法分析：使用递归的方法，假定从根节点到当前节点的值之</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>有效的括号</title>
    <link href="https://flower-f.github.io/2021/12/02/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>https://flower-f.github.io/2021/12/02/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</id>
    <published>2021-12-02T12:32:49.000Z</published>
    <updated>2021-12-02T12:34:08.606Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/valid-parentheses">https://leetcode-cn.com/problems/valid-parentheses</a><br>题解：leetcode 里面最经典的栈应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> c = s[i];</span><br><span class="line">        <span class="keyword">if</span>(c === <span class="string">&#x27;(&#x27;</span> || c === <span class="string">&#x27;[&#x27;</span> || c ===<span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            stack.push(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> top = stack[stack.length - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(top === <span class="string">&#x27;(&#x27;</span> &amp;&amp; c === <span class="string">&#x27;)&#x27;</span> ||</span><br><span class="line">                top === <span class="string">&#x27;[&#x27;</span> &amp;&amp; c === <span class="string">&#x27;]&#x27;</span> ||</span><br><span class="line">                top === <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; c === <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.length === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/valid-parentheses&quot;&gt;https://leetcode-cn.com/problems/valid-parentheses&lt;/a&gt;&lt;br&gt;题解：leetco</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>爬楼梯</title>
    <link href="https://flower-f.github.io/2021/12/02/%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
    <id>https://flower-f.github.io/2021/12/02/%E7%88%AC%E6%A5%BC%E6%A2%AF/</id>
    <published>2021-12-02T09:59:42.000Z</published>
    <updated>2021-12-02T11:07:40.657Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/climbing-stairs/">https://leetcode-cn.com/problems/climbing-stairs/</a><br>解法：<br>f(i) 表示到第 i 阶楼梯一共有多少种解法<br>dp：f(i) = f(i - 1) + f(i - 2)，然后再通过变量存储来降低空间复杂度到 O(1) 即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> ans;</span><br><span class="line">    pre1 = <span class="number">1</span>, pre2 = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;=n; i++) &#123;</span><br><span class="line">        ans = pre1 + pre2;</span><br><span class="line">        pre1 = pre2;</span><br><span class="line">        pre2 = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看了眼题解，惊了。<br>什么矩阵快速幂，通项公式的，真的太秀了。<br>通项公式那种解法高中还是学过的，不过矩阵快速幂真的没怎么见过。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/climbing-stairs/&quot;&gt;https://leetcode-cn.com/problems/climbing-stairs/&lt;/a&gt;&lt;br&gt;解法：&lt;br&gt;f(i)</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="https://flower-f.github.io/2021/12/02/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://flower-f.github.io/2021/12/02/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2021-12-02T09:39:37.000Z</published>
    <updated>2021-12-02T09:41:59.366Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/reverse-linked-list/">https://leetcode-cn.com/problems/reverse-linked-list/</a><br>在遍历链表时，将当前节点的 next 指针改为指向前一个节点。由于节点没有引用其前一个节点，因此必须事先存储其前一个节点。在更改引用之前，还需要存储后一个节点。最后返回新的头引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="literal">null</span>, cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">        <span class="keyword">const</span> next = cur.next; <span class="comment">// 存储下一节点</span></span><br><span class="line">        cur.next = pre; <span class="comment">// 下一个左移</span></span><br><span class="line">        pre = cur; <span class="comment">// 前一个左移</span></span><br><span class="line">        cur = next; <span class="comment">// 当前节点前进</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre; <span class="comment">// 返回头节点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>题解来源：<br>作者：LeetCode-Solution<br>链接：<br><a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-by-leetcode-solution-d1k2/">https://leetcode-cn.com/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-by-leetcode-solution-d1k2/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-linked-list/&quot;&gt;https://leetcode-cn.com/problems/reverse-linked-list/&lt;/a&gt;&lt;br&gt;在遍历</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>最大子数组和</title>
    <link href="https://flower-f.github.io/2021/12/02/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <id>https://flower-f.github.io/2021/12/02/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</id>
    <published>2021-12-02T09:16:41.000Z</published>
    <updated>2021-12-02T10:05:07.585Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/maximum-subarray/">https://leetcode-cn.com/problems/maximum-subarray/</a><br>解题思路：<br>有两种解法，都不难理解。<br>1、贪心，这是在算法课上学到的解法。<br>和大于 0 ，继续；否则，重新开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 注意此处 ans 不能初始化为 0，否则当全部输入均为负数时会 WA</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>, ans = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum = num;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">Math</span>.max(ans, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2、dp，来源于 leetcode 题解。</p><p>f(i) 代表以第 i 个数结尾的<strong>连续子数组的最大和</strong>。我们可以考虑 nums[i] 单独成为一段还是加入 f(i - 1) 对应的那一段，这取决于 nums[i] 和 f(i - 1) + nums[i] 的大小，我们希望获得一个比较大的，于是可以写出这样的转移方程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(i) = max &#123;f(i − 1) + nums[i], nums[i]&#125;</span><br></pre></td></tr></table></figure><p>这类 dp 有一个特点是：f(i) 只跟 f(i - 1) 相关，因此可以用一个变量 pre 来维护 f(i) 的值，将空间复杂度降到 O(1)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大子数组和</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>, ans = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        pre = <span class="built_in">Math</span>.max(pre + nums[i], nums[i]);</span><br><span class="line">        ans = <span class="built_in">Math</span>.max(ans, pre);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>参考题解：<br>作者：LeetCode-Solution<br>链接：<br><a href="https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/">https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/maximum-subarray/&quot;&gt;https://leetcode-cn.com/problems/maximum-subarray/&lt;/a&gt;&lt;br&gt;解题思路：&lt;br&gt;</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="https://flower-f.github.io/2021/12/02/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://flower-f.github.io/2021/12/02/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2021-12-02T08:18:20.000Z</published>
    <updated>2021-12-02T09:42:48.297Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/two-sum/submissions/">https://leetcode-cn.com/problems/two-sum/submissions/</a><br>应该是力扣最经典的一道题目了，没什么好说的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = map.get(target - nums[i]);</span><br><span class="line">        <span class="keyword">if</span>(temp !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [i, temp];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.set(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum/submissions/&quot;&gt;https://leetcode-cn.com/problems/two-sum/submissions/&lt;/a&gt;&lt;br&gt;应该是</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>字符串相加</title>
    <link href="https://flower-f.github.io/2021/12/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/"/>
    <id>https://flower-f.github.io/2021/12/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/</id>
    <published>2021-12-02T07:34:28.000Z</published>
    <updated>2021-12-02T10:04:57.272Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/add-strings/">https://leetcode-cn.com/problems/add-strings/</a><br>第一种做法：反转以后正序遍历<br>这是我第一反应的做法，然后自然也想到了倒序遍历，不过没写出来，然后去看了一下题解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">num1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">num2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟</span></span><br><span class="line"><span class="keyword">var</span> addStrings = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">const</span> maxLength = <span class="built_in">Math</span>.max(num1.length, num2.length);</span><br><span class="line">    num1 = num1.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    num2 = num2.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; maxLength; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> a = num1[i], b = num2[i];</span><br><span class="line">        <span class="keyword">if</span>(!a) &#123;</span><br><span class="line">            a = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!b) &#123;</span><br><span class="line">            b = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="built_in">Number</span>(a) + <span class="built_in">Number</span>(b) + carry;</span><br><span class="line">        carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            carry++;</span><br><span class="line">            sum -= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(carry) &#123;</span><br><span class="line">        res.push(carry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第二种做法：倒序遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">num1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">num2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 倒序遍历</span></span><br><span class="line"><span class="keyword">var</span> addStrings = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = num1.length - <span class="number">1</span>, j = num2.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> a = i &gt;= <span class="number">0</span> ? num1.charAt(i) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> b = j &gt;= <span class="number">0</span> ? num2.charAt(j) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> sum = a + b + carry;</span><br><span class="line">        res.push(sum % <span class="number">10</span>);</span><br><span class="line">        carry = <span class="built_in">Math</span>.floor(sum / <span class="number">10</span>);</span><br><span class="line">        i--;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/add-strings/&quot;&gt;https://leetcode-cn.com/problems/add-strings/&lt;/a&gt;&lt;br&gt;第一种做法：反转以后正序遍历&lt;br&gt;这</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>合并两个有序数组</title>
    <link href="https://flower-f.github.io/2021/12/02/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://flower-f.github.io/2021/12/02/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-12-02T06:53:23.000Z</published>
    <updated>2021-12-02T10:04:52.781Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/merge-sorted-array/">https://leetcode-cn.com/problems/merge-sorted-array/</a><br>解法分析：双指针，但是考虑到可能会覆盖的问题，所以要从后面倒着遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">m</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 双指针 数组末尾</span></span><br><span class="line">    <span class="keyword">let</span> i = m - <span class="number">1</span>, j = n - <span class="number">1</span>, tail = nums1.length - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 记录当前要存放的值</span></span><br><span class="line">    <span class="keyword">let</span> cur;</span><br><span class="line">    <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            cur = nums2[j--];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(j &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            cur = nums1[i--];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums1[i] &gt; nums2[j]) &#123;</span><br><span class="line">            cur = nums1[i--];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = nums2[j--];</span><br><span class="line">        &#125;</span><br><span class="line">        nums1[tail--] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/merge-sorted-array/&quot;&gt;https://leetcode-cn.com/problems/merge-sorted-array/&lt;/a&gt;&lt;br&gt;解法分析：</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codetop" scheme="https://flower-f.github.io/tags/codetop/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 lighthouse 与网页性能测试</title>
    <link href="https://flower-f.github.io/2021/12/02/%E6%B5%85%E8%B0%88lighthouse%E4%B8%8E%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>https://flower-f.github.io/2021/12/02/%E6%B5%85%E8%B0%88lighthouse%E4%B8%8E%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</id>
    <published>2021-12-02T05:03:45.000Z</published>
    <updated>2021-12-02T11:08:13.135Z</updated>
    
    <content type="html"><![CDATA[<p>今天在写人机交互课程的实验报告，复习了一下之前学到的 web 性能分析的方法，然后突发奇想也给我的网页做了个性能测试，当然结果很不乐观（</p><h1 id="网页性能分析的重要性"><a href="#网页性能分析的重要性" class="headerlink" title="网页性能分析的重要性"></a>网页性能分析的重要性</h1><p>简单来说，一方面，提高用户体验；另一方面，提高网页的 SEO 排名。</p><h1 id="整体分析"><a href="#整体分析" class="headerlink" title="整体分析"></a>整体分析</h1><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/lighthouse.jpg"></p><p>先来看整体的分析情况，Performance 是 61 分，SEO 是 97 分。</p><p>性能只能说很不理想，但是可惜的是我没有在新建博客的第一时间就先测一下，以至于我不太清楚影响性能的是 hexo + next 本身的问题，还是因为我后来做的美化导致的。另一方面 hexo 是模板建站，我对于里面的源码基本毫不了解，想要优化也不知道从何做起。总之先来看看这 6 个指标吧。</p><h1 id="lighthouse-分析网页的六大指标"><a href="#lighthouse-分析网页的六大指标" class="headerlink" title="lighthouse 分析网页的六大指标"></a>lighthouse 分析网页的六大指标</h1><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/115537.jpg"></p><p>简单介绍一下这 6 个指标：</p><h2 id="FCP"><a href="#FCP" class="headerlink" title="FCP"></a>FCP</h2><p>FCP（First Content Paint），即首次内容绘制，是指浏览器从响应用户输入网络地址，在页面首次绘制文本，图片（包括背景图）、非白色的 canvas 或者 svg 之间的这段时间。以往的话，一般还会提到像 FP（First Paint）、FMP（First Meaning Paint）这两个概念，不过现在已经被 lighthouse 废弃了，FP 指标可以通过 Performance 获取。</p><h2 id="TTI"><a href="#TTI" class="headerlink" title="TTI"></a>TTI</h2><p>TTI（Time to Interactive），即可交互时间，指的是网页第一次达到可以交互状态的时间，可交互状态的 UI 组件可以交互，而且页面已经达到了相对稳定流畅的程度。</p><p>说到 TTI 一般还会提到 <strong>RAIL</strong> 性能模型，包含四个指标，分别是 Response （响应）、Animation（动画）、Idle（空置状态）和 Load（加载）。</p><ul><li><p>Response：如果用户点击了一个按钮，你需要保证在用户察觉出延迟之前就得到反馈。只要有输入，这个原则就适用。如果没有在合理的时窗内完成响应，，用户就会察觉到这个延迟，一般而言在这个时间会被定为 100 毫秒。另外，如果用户等待时间可能超出 500ms 的话，需要加上 loading 动画来缓解用户的紧张焦虑。</p></li><li><p>Animation：如果动画帧率发生变化，用户很可能会注意到。一般而言，web 性能优化的目标是达到每秒生成 60 帧。谈到 Animation，就会想起浏览器的渲染流程。</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/2011110316263715.png"></p><p>一般来说渲染流程会被分为这四步，明天的主要笔记内容大概会与此相关；今天主要谈 web 性能测试，就先不细说这部分了。</p></li><li><p>Idle：可以利用空闲的时间来完成被推迟了的工作。例如，尽可能减少预加载数据，然后利用空闲时间加载剩余的数据。</p></li><li><p>Load：最终目标是能够在 1000 毫秒以内呈现页面内容，这方面涉及到关键路径的优化问题，我也放到明天再谈。注意这里 1s 内并不需要渲染出所有的页面内容，可以把还未完成的任务留到空闲时间继续完成。</p></li></ul><h2 id="SI"><a href="#SI" class="headerlink" title="SI"></a>SI</h2><p>SI（Speed Index），即首屏时间，代表页面内容渲染所消耗的时间。优化 Speed Index 一般从两方面入手：优化内容效率和优化关键渲染路径。SI 低于 4s 则表示页面加载速度较优。</p><h2 id="TBT"><a href="#TBT" class="headerlink" title="TBT"></a>TBT</h2><p>TBT（Total Blocking Time）是衡量用户事件响应的指标。TBT会统计在FCP和TTI时间之间，主线程被阻塞的时间总和。当主线程被阻塞超过 50ms 导致用户事件无法响应，这样的阻塞时长就会被统计到TBT中。TBT越小说明页面能够更好的快速响应用户事件。</p><h2 id="LCP"><a href="#LCP" class="headerlink" title="LCP"></a>LCP</h2><p>LCP（Largest Content Paintful）是一个页面加载时长的技术指标，用于表示当前页面中占比最大的内容显示出来的时间点。它可以代表当前页面主要内容展示的时间。LCP低于 2.5s 则表示页面加载速度较优。</p><h2 id="CLS"><a href="#CLS" class="headerlink" title="CLS"></a>CLS</h2><p>CLS（Cumulative Layout Shift）是一个衡量页面内容是否稳定的指标，CLS会将页面加载过程中非预期的页面布局的累积。CLS的分数越低，表明页面的布局稳定性越高，通常低于0.1表示页面稳定性良好。</p><h1 id="lighthouse-的优势"><a href="#lighthouse-的优势" class="headerlink" title="lighthouse 的优势"></a>lighthouse 的优势</h1><p>lighthouse 在指出性能不足之处的时候，一般还会具体指出哪些地方可以进行优化，例如这次分析，</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/125840.jpg"></p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>接下来我先考虑的是要把之前鼠标的交互动画减少一些，然后想办法压缩一下静态资源。去除无用 CSS 和 JS 稍微有些难办，因为里面的代码对我来说就像一个黑盒一样，我也没有足够的课余时间去阅读源码。</p><p>参考文章：<br><a href="https://www.cnblogs.com/frank-link/p/15243695.html">https://www.cnblogs.com/frank-link/p/15243695.html</a><br><a href="https://www.cnblogs.com/loveyt/p/13582359.html">https://www.cnblogs.com/loveyt/p/13582359.html</a><br><a href="https://blog.csdn.net/m0_37411791/article/details/106394219">https://blog.csdn.net/m0_37411791/article/details/106394219</a><br><a href="https://zhuanlan.zhihu.com/p/20276064">https://zhuanlan.zhihu.com/p/20276064</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天在写人机交互课程的实验报告，复习了一下之前学到的 web 性能分析的方法，然后突发奇想也给我的网页做了个性能测试，当然结果很不乐观（&lt;/p&gt;
&lt;h1 id=&quot;网页性能分析的重要性&quot;&gt;&lt;a href=&quot;#网页性能分析的重要性&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="测试" scheme="https://flower-f.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
    <category term="性能" scheme="https://flower-f.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>hexo美化记录</title>
    <link href="https://flower-f.github.io/2021/12/01/hexo%E7%BE%8E%E5%8C%96%E8%AE%B0%E5%BD%95/"/>
    <id>https://flower-f.github.io/2021/12/01/hexo%E7%BE%8E%E5%8C%96%E8%AE%B0%E5%BD%95/</id>
    <published>2021-12-01T07:25:07.000Z</published>
    <updated>2021-12-01T07:36:56.457Z</updated>
    
    <content type="html"><![CDATA[<p>搞了一天，遇到了不少的奇葩 bug，这次 hexo 建站目前算是暂时完结。<br>记录一下自己做了哪些优化：</p><ul><li>添加看板娘</li><li>添加鼠标点击爱心特效</li><li>添加鼠标点击爆炸特效</li><li>添加头像 &amp; 头像旋转功能</li><li>添加 fork me on github</li><li>添加 RSS</li><li>更换字体为思源宋体</li><li>修改文章内链接文本样式</li><li>修改文章底部的标签样式</li><li>在每篇文章末尾添加本文结束标记</li><li>通过 leancloud &amp; valine 加上了网站的阅读量功能以及评论功能</li><li>实现文章字数统计功能</li><li>实现全站总字数统计功能</li><li>在文章底部增加版权信息</li><li>添加博文置顶功能</li><li>修改网站 favicon 图标</li><li>添加侧边栏 github 图标</li><li>添加了本地搜索功能</li><li>最后通过 picgo、jsDelivr 和 github 仓库搭建了一个简易的博客图床</li><li>其实还添加了一个动态的背景效果，本地运行没问题，但是部署上去就没有了，尚待解决此bug</li></ul><p>参考文章：<br><a href="https://www.jianshu.com/p/f054333ac9e6">https://www.jianshu.com/p/f054333ac9e6</a><br><a href="https://www.heson10.com/archives/">https://www.heson10.com/archives/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;搞了一天，遇到了不少的奇葩 bug，这次 hexo 建站目前算是暂时完结。&lt;br&gt;记录一下自己做了哪些优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加看板娘&lt;/li&gt;
&lt;li&gt;添加鼠标点击爱心特效&lt;/li&gt;
&lt;li&gt;添加鼠标点击爆炸特效&lt;/li&gt;
&lt;li&gt;添加头像 &amp;amp; 头像旋</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://flower-f.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>希望实现一个很理想的目标</title>
    <link href="https://flower-f.github.io/2021/11/30/%E5%B8%8C%E6%9C%9B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BE%88%E7%90%86%E6%83%B3%E7%9A%84%E7%9B%AE%E6%A0%87/"/>
    <id>https://flower-f.github.io/2021/11/30/%E5%B8%8C%E6%9C%9B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BE%88%E7%90%86%E6%83%B3%E7%9A%84%E7%9B%AE%E6%A0%87/</id>
    <published>2021-11-30T13:59:07.000Z</published>
    <updated>2021-12-01T06:07:12.788Z</updated>
    
    <content type="html"><![CDATA[<p>希望从今天开始，每天都写一篇小日记记录一下当天新学到的或者复习的知识，包括但不限于计算机基础、Vue、React、前端三件套、浏览器基础、web性能优化、node.js。先定个小目标，坚持 100 天，希望可以持续下去。首先要熬过这段满是大作业和考试的期末周。总是感觉我现在的知识储备还不足以去应对面试，希望能通过记录笔记让我的知识体系变得更加系统。首先第一步就是要把博客搭建好，美化好，之前使用过 Next.js 搭建了一个博客，但是总觉得不太好看，后来想了想其实博客本身更多的还是一个记录自己学习经历的东西，所以也许简约一些反而更好，所以最后决定用 hexo 来搭建这个博客。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;希望从今天开始，每天都写一篇小日记记录一下当天新学到的或者复习的知识，包括但不限于计算机基础、Vue、React、前端三件套、浏览器基础、web性能优化、node.js。先定个小目标，坚持 100 天，希望可以持续下去。首先要熬过这段满是大作业和考试的期末周。总是感觉我现在</summary>
      
    
    
    
    
    <category term="挖坑" scheme="https://flower-f.github.io/tags/%E6%8C%96%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="https://flower-f.github.io/2021/11/29/hello-world/"/>
    <id>https://flower-f.github.io/2021/11/29/hello-world/</id>
    <published>2021-11-29T12:34:09.000Z</published>
    <updated>2021-11-30T16:33:20.091Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
