<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Front End Blog</title>
  
  <subtitle>From Flower-F</subtitle>
  <link href="https://flower-f.github.io/atom.xml" rel="self"/>
  
  <link href="https://flower-f.github.io/"/>
  <updated>2022-02-21T09:07:32.042Z</updated>
  <id>https://flower-f.github.io/</id>
  
  <author>
    <name>Flower F</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深浅拷贝</title>
    <link href="https://flower-f.github.io/2022/02/20/js-basics-review/"/>
    <id>https://flower-f.github.io/2022/02/20/js-basics-review/</id>
    <published>2022-02-20T11:36:20.000Z</published>
    <updated>2022-02-21T09:07:32.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object.assign()</span><br></pre></td></tr></table></figure><p>不会拷贝对象的继承属性、不会拷贝对象的不可枚举属性、可以拷贝 Symbol 类型的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> source = &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source);</span><br><span class="line"><span class="built_in">console</span>.log(target);</span><br></pre></td></tr></table></figure><p>还有 concat、slice、拓展运算符均可以实现浅拷贝。</p><p>手工实现浅拷贝：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowClone = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (target <span class="keyword">instanceof</span> object) &#123;</span><br><span class="line">    <span class="keyword">const</span> cloneTarget = <span class="built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target.hasOwnProperty(key)) &#123;</span><br><span class="line">        cloneTarget[key] = target[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cloneTarget;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><p>乞丐版：JSON.stringify()</p><p>存在的问题：（可以结合之前文章的手写 JSON.stringify() 看）</p><ul><li>拷贝的对象的值中如果有函数、undefined、symbol 这几种类型，拷贝后整个键值对消失</li><li>拷贝后 Date 引用类型变为字符串（调用了 toJSON）</li><li>无法拷贝不可枚举的属性</li><li>无法拷贝对象的原型链</li><li>拷贝 RegExp 会变为空对象</li><li>对象中含有 NaN、Infinity，拷贝结果会变为 null</li><li>无法拷贝循环引用</li></ul><p>手写深拷贝：</p><p>首先要了解一个方法：<code>Object. getOwnPropertyDescriptors()</code>，这个方法用于获得属性的特性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptors(person);</span><br><span class="line"><span class="built_in">console</span>.log(desc);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220220203637.png"></p><p>还有一个是 Reflect.ownKeys()，它返回一个由目标对象自身的属性键组成的数组。返回值等同于 Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isComplexDataType = <span class="function"><span class="params">obj</span> =&gt;</span> ((<span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> obj === <span class="string">&#x27;function&#x27;</span>) &amp;&amp; obj !== <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// WeakMap 防止内存泄漏</span></span><br><span class="line"><span class="keyword">const</span> deepClone = <span class="function">(<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 特判 Date 和 RegExp，返回一个新对象</span></span><br><span class="line">  <span class="keyword">if</span> (obj?.constructor === <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (obj?.constructor === <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理循环引用</span></span><br><span class="line">  <span class="keyword">if</span> (hash.has(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> hash.get(obj);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 得到属性值和属性的描述</span></span><br><span class="line">  <span class="keyword">let</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 继承原型链，包括其 descriptors</span></span><br><span class="line">  <span class="keyword">let</span> cloneObj = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj), desc);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置 hash，用于后续检测循环引用</span></span><br><span class="line">  hash.set(obj, cloneObj);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历所有键值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Reflect</span>.ownKeys(obj)) &#123;</span><br><span class="line">    cloneObj[key] = (isComplexDataType(obj[key]) &amp;&amp; <span class="keyword">typeof</span> obj[key] !== <span class="string">&#x27;function&#x27;</span> ? deepClone(obj[key], hash) : obj[key]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证代码</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">str</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">  <span class="attr">boolean</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">unf</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">nul</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">obj</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  <span class="attr">func</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>) &#125;,</span><br><span class="line">  <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">  <span class="attr">reg</span>: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;/我是正则/ig&#x27;</span>),</span><br><span class="line">  [<span class="built_in">Symbol</span>(<span class="string">&#x27;我是 Symbol&#x27;</span>)]: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;innumerable&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;不可枚举&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj = <span class="built_in">Object</span>.create(obj, <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj));</span><br><span class="line">obj.loop = obj; <span class="comment">// 循环引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cloneObj = deepClone(obj);</span><br><span class="line">cloneObj.arr.push(<span class="number">1234</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="built_in">console</span>.log(cloneObj);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅拷贝&quot;&gt;&lt;a href=&quot;#浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝&quot;&gt;&lt;/a&gt;浅拷贝&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://flower-f.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 历史</title>
    <link href="https://flower-f.github.io/2022/02/16/http-history/"/>
    <id>https://flower-f.github.io/2022/02/16/http-history/</id>
    <published>2022-02-16T13:24:58.000Z</published>
    <updated>2022-02-21T09:06:09.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五层-amp-七层"><a href="#五层-amp-七层" class="headerlink" title="五层 &amp; 七层"></a>五层 &amp; 七层</h1><p>五层：物理、链路、网络、传输、应用<br>七层：物理、链路、网络、传输、会话、表示、应用</p><h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><h1 id="URI-amp-URL"><a href="#URI-amp-URL" class="headerlink" title="URI &amp; URL"></a>URI &amp; URL</h1><ul><li>Uniform Resource Identifier，统一资源标识符，可以唯一标记互联网资源</li><li>Uniform Resource Locator，统一资源定位符，也就是地址，它是 URI 的子集</li></ul><p>只要能唯一标识资源的就是 URI，在 URI 的基础上给出其资源的访问方式的就是 URL</p><h1 id="HTTP-特征"><a href="#HTTP-特征" class="headerlink" title="HTTP 特征"></a>HTTP 特征</h1><ul><li>支持客户端-服务器模式</li><li>简单快速：客户端向服务端请求只需要传送请求方法和路径。因为协议简单，所以服务器规模小所以通信速度很快</li><li>灵活可拓展：HTTP 允许传输任意类型的数据对象，由 Content-Type 标记类型</li><li>无连接：每次连接只处理一个请求，服务器处理完请求，并收到客户端的应答后，就断开连接</li><li>无状态：没有记忆能力</li></ul><h1 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h1><p>HTTP 协议由三大部分组成：</p><ul><li>起始行：描述请求或响应的基本信息</li><li>header</li><li>body：实际传输的数据，不一定是纯文本，也可以是视频、图片等</li></ul><p>header 和 body 之间会有一个空行，header 不能为空，body 可以为空</p><h1 id="起始行"><a href="#起始行" class="headerlink" title="起始行"></a>起始行</h1><p>起始行包括三个字段：请求方法、URL、HTTP 版本号</p><h1 id="HTTP-版本"><a href="#HTTP-版本" class="headerlink" title="HTTP 版本"></a>HTTP 版本</h1><h2 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP 0.9"></a>HTTP 0.9</h2><p>特性：</p><ul><li>只有一个请求行，没有请求头和请求体</li><li>请求方法只有 GET</li></ul><p>缺点：</p><ul><li>响应只有 HTML 文档，文件格式只局限于 ASCII 编码</li></ul><h2 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP 1.0"></a>HTTP 1.0</h2><p>特性：</p><ul><li>引入了请求头和请求体，增加了状态码，支持多种文档类型</li><li>使用短连接，每次发送数据都要经过三次握手和四次挥手，效率低</li><li>header 中只使用 If-Modified-Since 和 Expires 作为缓存</li></ul><p>缺点：</p><ul><li>只提供了基本的认证，用户名和密码都没有加密</li><li>不支持断点续传</li><li>每个 IP 只能有一个域名</li><li>在同一个 TCP 连接里面，请求顺序是固定的。服务器只有处理完一个请求的响应后，才会进行下一个请求的处理，如果前面请求的响应特别慢的话，就会造成许多请求排队等待的情况，也就是所谓的队头阻塞</li><li>需要在响应头设置 Content-Length，然后浏览器再根据设置的数据大小来接收数据，对于动态生成的数据无能为力</li></ul><h2 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1"></a>HTTP 1.1</h2><p>特性：</p><ul><li>使用摘要算法（MD5，加密不可逆，较为安全，只能通过暴力匹配破解）进行身份验证</li><li>引入了 cookie</li><li>默认使用持久连接，对应请求头 keep-alive</li><li>新增 E-tag、If-Match、If-None-Match 等缓存</li><li>支持断点续传，对应请求头 Range</li><li>因为虚拟机的发展，一个 IP 支持多个域名</li></ul><p>缺点：</p><ul><li>同时开启多条 TCP 连接时，连接之间会互相竞争带宽</li><li>队头阻塞</li><li>TCP 的慢启动</li><li>请求头重复携带</li></ul><h2 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP 2.0"></a>HTTP 2.0</h2><p>特性：</p><ul><li>彻底的二进制协议，头和体都是二进制（HTTP 1.1 的头必须是 ASCII 编码）</li><li>多路复用。在一个连接中，客户端和服务器都可以同时发送多个请求或回应，而且不需要按照顺序发送</li><li>数据流概念。HTTP 2 的数据包是不按顺序发送的，同一个连接中的数据包可能来源于不同的请求，所以需要对数据包做标记，指明属于哪个请求</li><li>头部压缩，因为 HTTP 无状态，每次请求都必须带上所有的信息，所以很多的请求字段都是重复的，比如 User-Agent。一模一样的内容每次请求都要携带会浪费带宽，影响速度。通过 gzip 或者 compress 压缩头后再发送。另一方面，客户端和服务端都维护一张头信息表，部分字段会存储到表中，生成一个索引，以后相同的就只发送索引，不发生字段，这也叫 HPACK 算法。</li><li>允许服务器主动推送。HTTP 2 允许服务器未经请求，主动向客户端推送一些必要资源。</li></ul><p>缺点：</p><p>因为 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。由于多个数据流使用同一个 TCP 连接，遵守同一个流量状态控制和拥塞控制。只要一个数据流遭遇到拥塞，剩下的数据流就没法发出去，这样就导致了后面的所有数据都会被阻塞。HTTP/2 出现的这个问题是由于其使用 TCP 协议的问题，与它本身的实现其实并没有多大关系。</p><h2 id="HTTP-3-（QUIC）"><a href="#HTTP-3-（QUIC）" class="headerlink" title="HTTP 3 （QUIC）"></a>HTTP 3 （QUIC）</h2><p>特性：</p><ul><li>Quick UDP Internet Connection</li><li>基于 UDP 实现了类似 TCP 的流量控制、可靠传输机制</li><li>继承了 TLS</li><li>使用了 HTTP 2 的多路复用，再加上使用了 UDP，真正解决了对头阻塞问题</li><li>快速握手，快速启动。因为基于 UDP</li></ul><p>缺点：</p><ul><li>服务端和客户端对 HTTP 3 的支持还不完善</li><li>可能会存在安全性问题</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;五层-amp-七层&quot;&gt;&lt;a href=&quot;#五层-amp-七层&quot; class=&quot;headerlink&quot; title=&quot;五层 &amp;amp; 七层&quot;&gt;&lt;/a&gt;五层 &amp;amp; 七层&lt;/h1&gt;&lt;p&gt;五层：物理、链路、网络、传输、应用&lt;br&gt;七层：物理、链路、网络、传输、会话</summary>
      
    
    
    
    
    <category term="计算机网络" scheme="https://flower-f.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>react 核心原理</title>
    <link href="https://flower-f.github.io/2022/02/16/react-core/"/>
    <id>https://flower-f.github.io/2022/02/16/react-core/</id>
    <published>2022-02-16T08:42:28.000Z</published>
    <updated>2022-02-16T14:15:34.174Z</updated>
    
    <content type="html"><![CDATA[<p>本文是 <a href="https://pomb.us/build-your-own-react/">Build Your Own React</a> 的翻译兼阅读笔记</p><h1 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h1><p>React 的每一个 element 包含的内容为 type 和 props。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: <span class="string">&quot;Hello&quot;</span>, <span class="comment">// 一个特殊属性，通常是很多 elements 组成的数组</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要把上述内容渲染为 dom，我们需要以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建元素</span></span><br><span class="line"><span class="keyword">const</span> node = <span class="built_in">document</span>.createElement(element.type);</span><br><span class="line"><span class="comment">// 把 props 的所有属性传递给节点</span></span><br><span class="line">node.title = element.props.title;</span><br><span class="line"><span class="comment">// 因为这里的 child 比较简单，所以我们用 textNode 代替</span></span><br><span class="line"><span class="keyword">const</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">textNode.nodeValue = element.props.children;</span><br><span class="line"><span class="comment">// 把 child 作为 node 的孩子</span></span><br><span class="line">node.appendChild(textNode);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 node 插入容器</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">container.appendChild(node);</span><br></pre></td></tr></table></figure><p>这里默认 <code>dom</code> 代表真实的 dom 元素，而 <code>element</code> 代表 react 元素</p><p>现在让我们尝试创造一个自己的 createElement。我们需要做的就是把 JSX 转换为一个 object。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, props, ...children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      ...props,</span><br><span class="line">      children,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比方说，</p><p>createElement(“div”) 结果是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123; <span class="attr">children</span>: [] &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createElement(“div”, null, a) 结果是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;ype: &quot;</span>div<span class="string">&quot;,</span></span><br><span class="line"><span class="string">  props: &#123; children: [a] &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>createElement(“div”, null, a, b) 结果是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123; <span class="attr">children</span>: [a, b] &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑到 children 其实不一定是 object 类型，我们需要为 children 再创建一个特殊类型 TEXT_ELEMENT。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTextElement</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;TEXT_ELEMENT&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">nodeValue</span>: text,</span><br><span class="line">      <span class="attr">children</span>: [],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时修改 createElement 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, props, ...children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      ...props,</span><br><span class="line">      <span class="attr">children</span>: children.map(<span class="function"><span class="params">child</span> =&gt;</span> (</span><br><span class="line">        <span class="keyword">typeof</span> child === <span class="string">&#x27;object&#x27;</span> ? child : createTextElement(child)</span><br><span class="line">      ))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了更有逼格而且摆脱 React 的束缚，我们要起一个很装逼的名字 ———— Didact。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Didact = &#123;</span><br><span class="line">  createElement,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = Didact.createElement(</span><br><span class="line">  <span class="string">&quot;div&quot;</span>, <span class="comment">// type</span></span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="string">&quot;foo&quot;</span>&#125;, <span class="comment">// props</span></span><br><span class="line">  <span class="comment">// children</span></span><br><span class="line">  Didact.createElement(<span class="string">&#x27;a&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;bar&#x27;</span>), </span><br><span class="line">  Didact.createElement(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">ReactDOM.render(element, container);</span><br></pre></td></tr></table></figure><h1 id="render"><a href="#render" class="headerlink" title="render"></a>render</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">element, container</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dom =  element.type === <span class="string">&#x27;TEXT_ELEMENT&#x27;</span> ? <span class="built_in">document</span>.createTextNode(<span class="string">&#x27;&#x27;</span>) </span><br><span class="line">    : <span class="built_in">document</span>.createElem(element.type);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个函数，用于判断键值是否为 children</span></span><br><span class="line">  <span class="keyword">const</span> isProperty = <span class="function"><span class="params">key</span> =&gt;</span> key !== <span class="string">&#x27;children&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(element.props).filter(isProperty)</span><br><span class="line">    .forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      dom.name = element.props.name;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归渲染</span></span><br><span class="line">  element.props.children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> render(child, dom));</span><br><span class="line"></span><br><span class="line">  container.appendChild(dom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codesandbox.io/s/didact-2-k6rbj">目前前两步的代码在 codesandbox 的地址</a></p><h1 id="Concurrent-Mode"><a href="#Concurrent-Mode" class="headerlink" title="Concurrent Mode"></a>Concurrent Mode</h1><p>目前代码其实有一个很大的问题，一旦开始 render，就会不停递归直至渲染完整棵树。如果这棵树非常大的话，他就会长时间占用主线程，导致卡顿。这时候如果浏览器希望做一些更高优先级的事情，比如先去接收用户的输入，将会无法进行，直至渲染完成。</p><p>所以我们需要把渲染流程分成多个小单元，在我们渲染完成每一个小单元之后，我们可以让浏览器打断我们的渲染，只要它有别的高优先级任务需要完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nextUnitOfWork = <span class="literal">null</span>; <span class="comment">// 下一个单元是否需要渲染</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workLoop</span>(<span class="params">deadline</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> shouldYield = <span class="literal">false</span>; <span class="comment">// 是否应该让路</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当下一个单元需要被渲染，且不需要让路的时候，就继续渲染</span></span><br><span class="line">  <span class="keyword">while</span> (nextUnitOfWork &amp;&amp; !shouldYield) &#123;</span><br><span class="line">    <span class="comment">// performUnitOfWork 会执行当前的渲染，并返回下一个 unit</span></span><br><span class="line">    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);</span><br><span class="line">    shouldYield = deadline.timeRemaining() &lt; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当主线程空闲的时候浏览器会执行回调函数 workLoop</span></span><br><span class="line">  requestIdleCallback(workLoop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次执行</span></span><br><span class="line">requestIdleCallback(workLoop);</span><br></pre></td></tr></table></figure><p>需要注意的是 React 现在不再使用 <code>requestIdleCallback</code> 了。取而代之的是 <code>scheduler package</code>，但这对于我们理解原理没有太大影响。</p><p>requestIdleCallback 还会给我们一个 deadline 参数，我们可以用它来检查在浏览器需要再次获得主线程的控制权之前，我们还能剩下多少时间。</p><h1 id="Fibers"><a href="#Fibers" class="headerlink" title="Fibers"></a>Fibers</h1><p>为了组织 unit 的结构我们需要一个数据结构叫做 fiber tree。</p><p>每一个元素会拥有一个 fiber，而每一个 fiber 会成为 work 的一个 unit。</p><p>比如说我们要渲染一棵如下的树：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Didact.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">  container</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220216123303.png"></p><p>在渲染的时候我们会创建 root fiber，并把它设置为 nextUnitOfWork。剩下我们需要在 performUnitOfWork 函数中对 fiber 做以下三件事：</p><ol><li>把节点挂载到 dom 树</li><li>为节点的 child 创建 fiber</li><li>选择下一个 unit</li></ol><p>使用 fiber 数据结构的目的就是为了更简单地找到下一个 unit。所以每一个 fiber 和它的第一个孩子、以及紧邻它的兄弟之间都会直接相连。如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220216123804.png"></p><p>当我们完成了 fiber 上的渲染任务，如果这个 fiber 有 child，这个 child 就会成为下一个 unit。比如说对于上面的例子，div 渲染完成后就轮到 h1 了。</p><p>如果当前 fiber 没有 child，就会把紧贴的兄弟节点作为下一个 unit。比如上面例子中的 p，它没有 child 了，所以会把兄弟 a 作为下一个 unit。</p><p>如果当前 fiber 没有 child，也没有 sibling，我们就去找它的 uncle，也就是 parent 的兄弟。比如说 a，既没有 child 也没有下一个兄弟了，只能回去找它爹 h1 的兄弟 h2。</p><p>同理，如果它爹也没有兄弟，就继续找它爹的爹，如此遍历直到我们到达 root。当到达 root 也就意味着完成了 render。</p><p>现在我们将其编写成代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">element, container</span>) </span>&#123;</span><br><span class="line">  nextUnitOfWork = &#123;</span><br><span class="line">    <span class="attr">dom</span>: container, <span class="comment">// 初始化设置为 root</span></span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">children</span>: [element],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nextUnitOfWork = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workLoop</span>(<span class="params">deadline</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> shouldYield = <span class="literal">false</span>; <span class="comment">// 是否应该让路</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当下一个单元需要被渲染，且不需要让路的时候，就继续渲染</span></span><br><span class="line">  <span class="keyword">while</span> (nextUnitOfWork &amp;&amp; !shouldYield) &#123;</span><br><span class="line">    <span class="comment">// performUnitOfWork 会执行当前的渲染，并返回下一个 unit</span></span><br><span class="line">    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);</span><br><span class="line">    shouldYield = deadline.timeRemaining() &lt; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当主线程空闲的时候浏览器会执行回调函数 workLoop</span></span><br><span class="line">  requestIdleCallback(workLoop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requestIdleCallback(workLoop);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">performUnitOfWork</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. add dom node</span></span><br><span class="line">  <span class="keyword">if</span> (!fiber.dom) &#123;</span><br><span class="line">    fiber.dom = createDom(fiber);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (fiber.parent) &#123;</span><br><span class="line">    fiber.parent.dom.appendChild(fiber.dom);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. create a new fiber for each child</span></span><br><span class="line">  <span class="keyword">const</span> elements = fiber.props.children;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> prevSibling = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (index &lt; elements.length) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = elements[index];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newFiber = &#123;</span><br><span class="line">      <span class="attr">type</span>: element.type,</span><br><span class="line">      <span class="attr">props</span>: element.props,</span><br><span class="line">      <span class="attr">parent</span>: fiber,</span><br><span class="line">      <span class="attr">dom</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把 fiber 挂载到树上，具体要作为 child 还是 sibling 取决于它是第一个节点还是后来的节点</span></span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      fiber.child = newFiber;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      prevSibling.sibling = newFiber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    prevSibling = newFiber;</span><br><span class="line">    index++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. search and return the next unit of work</span></span><br><span class="line">  <span class="keyword">if</span> (fiber.child) &#123;</span><br><span class="line">    <span class="keyword">return</span> fiber.child;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> nextFiber = fiber;</span><br><span class="line">  <span class="keyword">while</span> (nextFiber) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextFiber.sibling) &#123;</span><br><span class="line">      <span class="keyword">return</span> nextFiber.sibling;</span><br><span class="line">    &#125;</span><br><span class="line">    nextFiber = nextFiber.parent;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="commitRoot"><a href="#commitRoot" class="headerlink" title="commitRoot"></a>commitRoot</h1><p>现在我们又遇到了一个新问题，现在我们每个 unit 渲染时都会把一个 dom 挂载到树上，而浏览器可以随时打断我们的渲染。这也就意味着，如果只有部分 unit 完成了渲染，用户将看到不完整的 UI。这不是我们所想要的。</p><p>所以我们需要把挂载 dom 的部分从原来的 render 代码中删除。取而代之的持续追踪 fiber 的根，我们将其命名为 wipRoot。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">element, container</span>) </span>&#123;</span><br><span class="line">  wipRoot = &#123;</span><br><span class="line">    <span class="attr">dom</span>: container,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">children</span>: [element],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  nextUnitOfWork = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wipRoot = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>当我们完成渲染之后，也就是没有 next unit 的时候，我们直接把整棵树挂载到 dom 上。</p><p>这一阶段我们叫做 commitRoot。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitRoot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  commitWork(wipRoot.child);</span><br><span class="line">  wipRoot = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitWork</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fiber) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> domParent = fiber.parent.dom;</span><br><span class="line">  domParent.appendChild(fiber.dom);</span><br><span class="line">  commitWork(fiber.child);</span><br><span class="line">  commitWork(fiber.sibling);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reconciliation-调和"><a href="#Reconciliation-调和" class="headerlink" title="Reconciliation 调和"></a>Reconciliation 调和</h1><p>目前为止我们的所有操作都是针对于添加节点到 dom 中，那么如果我们要删除或更新节点呢？</p><p>这时候我们就需要比对 fiber 中元素和当前元素的情况。</p><p>所以我们需要一个变量来存储最新 commit 的 fiber，我们将其称为 currentRoot。</p><p>我们还要给每个 fiber 提供一个候选项 alternate，这个是一个直达旧的 fiber 的 link。</p><p>我们设置一个函数 reconcileChildren，用来调和旧的 fiber 和新的 react elements。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reconcileChildren</span>(<span class="params">wipFiber, elements</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> oldFiber = wipFiber.alternate?.child;</span><br><span class="line">  <span class="keyword">let</span> prevSibling = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (index &lt; elements.length || oldFiber !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = elements[index];</span><br><span class="line">    <span class="keyword">let</span> newFiber = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldFiber) &#123;</span><br><span class="line">       <span class="keyword">const</span> sameType = oldFiber &amp;&amp; element &amp;&amp; element.type === oldFiber.type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新旧节点类型相同，对 element 创建新的 fiber，并且复用旧的 dom，但是用的是 element 上的 props</span></span><br><span class="line">    <span class="keyword">if</span> (sameType) &#123;</span><br><span class="line">      <span class="comment">// 更新节点属性</span></span><br><span class="line">      newFiber = &#123;</span><br><span class="line">        <span class="attr">type</span>: oldFiber.type, <span class="comment">/// 复用</span></span><br><span class="line">        <span class="attr">props</span>: element.props, <span class="comment">// 用新的</span></span><br><span class="line">        <span class="attr">dom</span>: oldFiber.dom, <span class="comment">// 复用</span></span><br><span class="line">        <span class="attr">parent</span>: wipFiber,</span><br><span class="line">        <span class="attr">alternate</span>: oldFiber,</span><br><span class="line">        <span class="attr">effectTag</span>: <span class="string">&#x27;UPDATE&#x27;</span>, <span class="comment">// 这个属性会在  commit 的时候用到</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于需要生成新 DOM 节点的 fiber，我们标记 effectTag 为 PLACEMENT</span></span><br><span class="line">    <span class="keyword">if</span> (element &amp;&amp; !sameType) &#123;</span><br><span class="line">      <span class="comment">// 添加新节点</span></span><br><span class="line">      newFiber = &#123;</span><br><span class="line">        <span class="attr">type</span>: element.type,</span><br><span class="line">        <span class="attr">props</span>: element.props,</span><br><span class="line">        <span class="attr">dom</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">parent</span>: wipFiber,</span><br><span class="line">        <span class="attr">alternate</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">effectTag</span>: <span class="string">&#x27;PLACEMENT&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于需要删除的节点，我们不会生成 fiber，而是会在 oldFiber 上添加标记。当我们 commit 整棵 fiber 树的时候，并不会遍历旧的 fiber，而是把 fiber 的变更提交上去。</span></span><br><span class="line">    <span class="keyword">if</span> (oldFiber &amp;&amp; !sameType) &#123;</span><br><span class="line">      <span class="comment">// 删除旧节点</span></span><br><span class="line">      oldFiber.effectTag = <span class="string">&quot;DELETION&quot;</span>;</span><br><span class="line">      deletions.push(oldFiber);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代整个 react elements 的同时，我们也要迭代旧的 fiber 节点，即 wipFiber.alternate。</p><p>现在我们要比较 oldFiber 和 element 之间的差异。</p><p>比较的步骤如下：</p><ul><li>新旧节点类型相同，复用旧的 dom，只修改上面的属性。</li><li>节点类型不同，而且有新的 element，我们需要创建一个新的 dom 节点</li><li>类型不同，且 oldFiber 存在，需要删除旧节点</li></ul><p>React 会通过属性 key 来优化调和步骤，key 可以用来检查 elements 数组中的子组件是否仅仅只是更换了位置。</p><p>因此我们需要一个数组来保存要移除的 dom 节点。</p><p>修改 render 函数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">element, container</span>) </span>&#123;</span><br><span class="line">  wipRoot = &#123;</span><br><span class="line">    <span class="attr">dom</span>: container,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">children</span>: [element],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">alternate</span>: currentRoot,</span><br><span class="line">  &#125;</span><br><span class="line">  deletions = [];</span><br><span class="line">  nextUnitOfWork = wipRoot;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">let</span> nextUnitOfWork = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> currentRoot = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> wipRoot = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> deletions = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>修改 commitWork 函数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitWork</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fiber) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> domParent = fiber.parent.dom;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果标记为 PLACEMENT，那么在其父亲节点的 DOM 节点上添加该 fiber 的 DOM。</span></span><br><span class="line">  <span class="comment">// 如果标记为 DELETION，则删除节点</span></span><br><span class="line">  <span class="comment">// 如果标记为 UPDATE，我们需要更新已经存在的旧 DOM 节点的属性值</span></span><br><span class="line">  <span class="keyword">if</span> (fiber.effectTag === <span class="string">&#x27;PLACEMENT&#x27;</span> &amp;&amp; fiber.dom !== <span class="literal">null</span>) &#123;</span><br><span class="line">    domParent.appendChild(fiber.dom);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fiber.effectTag === <span class="string">&quot;DELETION&quot;</span>) &#123;</span><br><span class="line">    domParent.removeChild(fiber.dom)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    fiber.effectTag === <span class="string">&quot;UPDATE&quot;</span> &amp;&amp;</span><br><span class="line">    fiber.dom != <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    updateDom(</span><br><span class="line">      fiber.dom,</span><br><span class="line">      fiber.alternate.props,</span><br><span class="line">      fiber.props</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  commitWork(fiber.child);</span><br><span class="line">  commitWork(fiber.sibling);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们实现 updateDom 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isProperty = <span class="function"><span class="params">key</span> =&gt;</span> key !== <span class="string">&quot;children&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> isNew = <span class="function">(<span class="params">prev, next</span>) =&gt;</span> <span class="function"><span class="params">key</span> =&gt;</span> prev[key] !== next[key];</span><br><span class="line"><span class="keyword">const</span> isGone = <span class="function">(<span class="params">prev, next</span>) =&gt;</span> <span class="function"><span class="params">key</span> =&gt;</span> !(key <span class="keyword">in</span> next);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateDom</span>(<span class="params">dom, prevProps, nextProps</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 删除旧属性</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(prevProps).filter(isProperty)</span><br><span class="line">    .filter(isGone(prevProps, nextProps))</span><br><span class="line">    .forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      dom.name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 添加新属性</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(nextProps).filter(isProperty)</span><br><span class="line">    .filter(isNew(prevProps, nextProps))</span><br><span class="line">    .forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      dom.name = nextProps.name;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一种比较特殊的属性值是事件监听，这里假设以 on 开头的就是事件监听。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEvent = <span class="function"><span class="params">key</span> =&gt;</span> key.startsWith(<span class="string">&quot;on&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> isProperty = <span class="function"><span class="params">key</span> =&gt;</span> key !== <span class="string">&quot;children&quot;</span> &amp;&amp; !isEvent(key);</span><br></pre></td></tr></table></figure><p>对于事件监听我们需要做以下处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除原来的事件</span></span><br><span class="line"><span class="built_in">Object</span>.keys(prevProps).filter(isEvent)</span><br><span class="line">  .filter(<span class="function"><span class="params">key</span> =&gt;</span> !(key <span class="keyword">in</span> nextProps) || isNew(prevProps, nextProps))</span><br><span class="line">  .forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> eventType = name.toLowerCase().substring(<span class="number">2</span>);</span><br><span class="line">    dom.removeEventListener(eventType, prevProps.name);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加新的事件监听</span></span><br><span class="line"><span class="built_in">Object</span>.keys(nextProps).filter(isEvent)</span><br><span class="line">  .filter(isNew(prevProps, nextProps))</span><br><span class="line">  .forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> eventType = name.toLowerCase().substring(<span class="number">2</span>);</span><br><span class="line">    dom.addEventListener(eventType, nextProps.name);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h1 id="Function-Components"><a href="#Function-Components" class="headerlink" title="Function Components"></a>Function Components</h1><p>下一步我们要支持函数组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@jsx </span>Didact.createElement */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">name</span>=<span class="string">&quot;foo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">Didact.render(element, container);</span><br></pre></td></tr></table></figure><p>这个 jsx 语法应该被转换为以下的 js 语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Didact.createElement(</span><br><span class="line">    <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;Hi &quot;</span>,</span><br><span class="line">    props.name</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = Didact.createElement(App, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>函数组件与之前的语法有两个不同之处：</p><ul><li>函数组件的 fiber 没有 dom</li><li>子节点由函数运行得到，而不是直接从 props 获取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">performUnitOfWork</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fiber.dom) &#123;</span><br><span class="line">    fiber.dom = createDom(fiber);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> elements = fiber.props.children;</span><br><span class="line">  reconcileChildren(fiber, elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 fiber 类型为函数时，我们使用不同的函数来进行更新。在 updateHostComponent 我们按照之前的方法更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isFunctionComponent = fiber.type <span class="keyword">instanceof</span> <span class="built_in">Function</span>;</span><br><span class="line"><span class="keyword">if</span> (isFunctionComponent) &#123;</span><br><span class="line">  updateFunctionComponent(fiber);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  updateHostComponent(fiber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateHostComponent</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fiber.dom) &#123;</span><br><span class="line">    fiber.dom = createDom(fiber);</span><br><span class="line">  &#125;</span><br><span class="line">  reconcileChildren(fiber, fiber.props.children);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数组件中我们通过执行函数来获得 children。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateFunctionComponent</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> children = [fiber.type(fiber.props)]</span><br><span class="line">  reconcileChildren(fiber, children)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于前面的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">name</span>=<span class="string">&quot;foo&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p>fiber.type 就是 App 函数，当执行函数的时候，就会返回 h1 元素。</p><p>一旦我们拿到了这个子节点，剩下的调和就跟之前一致，我们不需要修改任何东西了。</p><p>接下来修改 commitWork 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitWork</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fiber) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 找 dom 节点的父节点的时候我们需要往上遍历 fiber 节点，直到找到有 dom 节点的 fiber 节点</span></span><br><span class="line">​  <span class="keyword">let</span> domParentFiber = fiber.parent;</span><br><span class="line">  <span class="keyword">while</span> (!domParentFiber.dom) &#123;</span><br><span class="line">    domParentFiber = domParentFiber.parent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> domParent = domParentFiber.dom;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    fiber.effectTag === <span class="string">&#x27;PLACEMENT&#x27;</span> &amp;&amp; fiber.dom !== <span class="literal">null</span>) &#123;</span><br><span class="line">    domParent.appendChild(fiber.dom)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    fiber.effectTag === <span class="string">&#x27;UPDATE&#x27;</span> &amp;&amp;</span><br><span class="line">    fiber.dom != <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    updateDom(</span><br><span class="line">      fiber.dom,</span><br><span class="line">      fiber.alternate.props,</span><br><span class="line">      fiber.props</span><br><span class="line">    )</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fiber.effectTag === <span class="string">&#x27;DELETION&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 移除节点也同样需要找到该 fiber 下第一个有 dom 节点的 fiber 节点</span></span><br><span class="line">    domParent.removeChild(fiber, domParent);</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  commitWork(fiber.child)</span><br><span class="line">  commitWork(fiber.sibling)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h1><p>最后一步我们来给函数组件添加 state。我们把示例组件设置为经典的计数器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@jsx </span>Didact.createElement */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = Didact.useState(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setState(c =&gt; c + 1)&#125;&gt;</span></span><br><span class="line"><span class="xml">      Count: &#123;state&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">Counter</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wipFiber = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> hookIndex = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateFunctionComponent</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  wipFiber = fiber;</span><br><span class="line">  hookIndex = <span class="number">0</span>;</span><br><span class="line">  wipFiber.hooks = [];</span><br><span class="line">  <span class="keyword">const</span> children = [fiber.type(fiber.props)];</span><br><span class="line">  reconcileChildren(fiber, children);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对应的 fiber 上加上 hooks 数组以支持我们在同一个函数组件中多次调用 useState。然后我们记录当前 hook 的序号。</p><p>当函数组件调用 useState，我们查看 fiber 对应的 alternate 字段下的旧 fiber 是否存在旧 hook、以及hook 的序号用以记录是该组件下的第几个 useState。</p><p>如果存在旧的 hook，我们将旧的 hook 值拷贝一份到新的 hook。 如果不存在，就将 state 初始化。</p><p>然后在 fiber 上添加新 hook，hook 序号会进行自增，然后返回状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useState</span>(<span class="params">initial</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> oldHook =</span><br><span class="line">    wipFiber.alternate &amp;&amp;</span><br><span class="line">    wipFiber.alternate.hooks &amp;&amp;</span><br><span class="line">    wipFiber.alternate.hooks[hookIndex];</span><br><span class="line">  <span class="keyword">const</span> hook = &#123;</span><br><span class="line">    <span class="attr">state</span>: oldHook ? oldHook.state : initial,</span><br><span class="line">    <span class="attr">queue</span>: [], <span class="comment">// 添加一个队列，用于存储 action</span></span><br><span class="line">  &#125;;</span><br><span class="line">​</span><br><span class="line">  wipFiber.hooks.push(hook);</span><br><span class="line">  hookIndex++;</span><br><span class="line">  <span class="keyword">return</span> [hook.state];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在下一次渲染的时候，我们才会执行 action，我们把所有的 action 从旧的 hook 队列中取出，然后将其一个个调用得到新的 hook state，因此最后返回的 state 就已经是更新好的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = oldHook ? oldHook.queue : [];</span><br><span class="line">actions.forEach(<span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  hook.state = action(hook.state)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setState = <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  hook.queue.push(action);</span><br><span class="line">  wipRoot = &#123;</span><br><span class="line">    <span class="attr">dom</span>: currentRoot.dom,</span><br><span class="line">    <span class="attr">props</span>: currentRoot.props,</span><br><span class="line">    <span class="attr">alternate</span>: currentRoot,</span><br><span class="line">  &#125;</span><br><span class="line">  nextUnitOfWork = wipRoot;</span><br><span class="line">  deletions = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>useState 还需要返回一个可以更新状态的函数，我们定义 setState，它接收一个 action。（在 Counter 的例子中， action 是自增 state 的函数）</p><p>最终完整的 mini-react 代码链接在 <a href="https://codesandbox.io/s/didact-8-21ost">https://codesandbox.io/s/didact-8-21ost</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是 &lt;a href=&quot;https://pomb.us/build-your-own-react/&quot;&gt;Build Your Own React&lt;/a&gt; 的翻译兼阅读笔记&lt;/p&gt;
&lt;h1 id=&quot;createElement&quot;&gt;&lt;a href=&quot;#createElement&quot;</summary>
      
    
    
    
    
    <category term="react" scheme="https://flower-f.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>使用原生 js 实现拖拽排序</title>
    <link href="https://flower-f.github.io/2022/02/16/js-dnd/"/>
    <id>https://flower-f.github.io/2022/02/16/js-dnd/</id>
    <published>2022-02-16T01:31:10.000Z</published>
    <updated>2022-02-16T01:32:25.355Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;draggable&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;draggable&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;draggable&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;draggable&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.draggable</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">cursor</span>: move;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.draggable</span><span class="selector-class">.dragging</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> draggables = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.draggable&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> containers = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.container&quot;</span>);</span><br><span class="line"></span><br><span class="line">draggables.forEach(<span class="function">(<span class="params">draggable</span>) =&gt;</span> &#123;</span><br><span class="line">  draggable.addEventListener(<span class="string">&quot;dragstart&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&quot;start&quot;);</span></span><br><span class="line">    draggable.classList.add(<span class="string">&quot;dragging&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  draggable.addEventListener(<span class="string">&quot;dragend&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&quot;end&quot;);</span></span><br><span class="line">    draggable.classList.remove(<span class="string">&quot;dragging&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">containers.forEach(<span class="function">(<span class="params">container</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在框框内的时候就是 drag over</span></span><br><span class="line">  container.addEventListener(<span class="string">&quot;dragover&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&quot;over&quot;);</span></span><br><span class="line">    e.preventDefault(); <span class="comment">// 关闭禁止 cursor</span></span><br><span class="line">    <span class="keyword">const</span> afterElement = getDragAfterElement(container, e.clientY);</span><br><span class="line">    <span class="comment">// console.log(afterElement);</span></span><br><span class="line">    <span class="keyword">const</span> draggable = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.dragging&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!afterElement) &#123;</span><br><span class="line">      container.appendChild(draggable);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      container.insertBefore(draggable, afterElement);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDragAfterElement</span>(<span class="params">container, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> draggableElements = [</span><br><span class="line">    ...container.querySelectorAll(<span class="string">&quot;.draggable:not(.dragging)&quot;</span>),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> draggableElements.reduce(</span><br><span class="line">    <span class="function">(<span class="params">closest, child</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> box = child.getBoundingClientRect();</span><br><span class="line">      <span class="keyword">const</span> offset = y - box.top - box.height / <span class="number">2</span>;</span><br><span class="line">      <span class="comment">// console.log(offset);</span></span><br><span class="line">      <span class="keyword">if</span> (offset &lt; <span class="number">0</span> &amp;&amp; offset &gt; closest.offset) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          offset,</span><br><span class="line">          <span class="attr">element</span>: child,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> closest;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">offset</span>: <span class="built_in">Number</span>.NEGATIVE_INFINITY,</span><br><span class="line">    &#125;</span><br><span class="line">  ).element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://flower-f.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js 手写复习</title>
    <link href="https://flower-f.github.io/2022/02/11/js-handwrite/"/>
    <id>https://flower-f.github.io/2022/02/11/js-handwrite/</id>
    <published>2022-02-11T14:02:59.000Z</published>
    <updated>2022-02-20T11:35:38.679Z</updated>
    
    <content type="html"><![CDATA[<p>题目列表来源于：<br><a href="https://bigfrontend.dev/">https://bigfrontend.dev/</a></p><h1 id="参数定长柯里化"><a href="#参数定长柯里化" class="headerlink" title="参数定长柯里化"></a>参数定长柯里化</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)<span class="comment">// 10</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)<span class="comment">// 10</span></span><br><span class="line">sum(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)(<span class="number">4</span>)<span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>实现一个函数同时可以求解上述表达式。</p><p>先要实现原函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其进行柯里化，目标是将它的参数<strong>展开</strong>，所以柯里化的过程实际上可以理解为一个递归展开参数的过程。展开的便捷就是当前参数个数等于函数需要的参数，不过为了确保完整性把 === 改成了 &gt;= 而已。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// fn.length 表示的是 fn 需要的参数个数</span></span><br><span class="line">  <span class="comment">// 当前函数的参数个数大于或等于原函数时，直接执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;args&quot;</span>, args);</span><br><span class="line">  <span class="keyword">if</span> (args.length &gt;= fn.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> fn(...args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// args2 是即将出现的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;args2&quot;</span>, args2);</span><br><span class="line">    <span class="keyword">return</span> curry(fn, ...args, ...args2);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (1)(2, 3)</span></span><br><span class="line"><span class="comment">// args []，刚开始参数个数为零</span></span><br><span class="line"><span class="comment">// args2 [ 1 ]，即将出现参数 1</span></span><br><span class="line"><span class="comment">// args [ 1 ]，拼接后获得参数 1</span></span><br><span class="line"><span class="comment">// args2 [ 2, 3 ]，即将出现参数 [2, 3]</span></span><br><span class="line"><span class="comment">// args [ 1, 2, 3 ]，拼接后获得参数 [1, 2, 3]，完成任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (1, 2)(3)</span></span><br><span class="line"><span class="comment">// args []</span></span><br><span class="line"><span class="comment">// args2 [ 1, 2 ]</span></span><br><span class="line"><span class="comment">// args [ 1, 2 ]</span></span><br><span class="line"><span class="comment">// args2 [ 3 ]</span></span><br><span class="line"><span class="comment">// args [ 1, 2, 3 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> join = <span class="function">(<span class="params">a, b, c</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;a&#125;</span>_<span class="subst">$&#123;b&#125;</span>_<span class="subst">$&#123;c&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> curriedJoin = curry(join);</span><br><span class="line"></span><br><span class="line">curriedJoin(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// &#x27;1_2_3&#x27;</span></span><br><span class="line">curriedJoin(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// &#x27;1_2_3&#x27;</span></span><br><span class="line">curriedJoin(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>); <span class="comment">// &#x27;1_2_3&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="参数不定长柯里化"><a href="#参数不定长柯里化" class="headerlink" title="参数不定长柯里化"></a>参数不定长柯里化</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 接收第一次参数</span></span><br><span class="line">  <span class="keyword">const</span> args = [...arguments];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接收第二次参数</span></span><br><span class="line">  <span class="keyword">const</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    args.push(...arguments);</span><br><span class="line">    <span class="comment">// 递归获取剩下的所有参数</span></span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  inner.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现-Array-prototype-flat"><a href="#实现-Array-prototype-flat" class="headerlink" title="实现 Array.prototype.flat()"></a>实现 Array.prototype.flat()</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr, depth = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> depth &gt; <span class="number">0</span> ?</span><br><span class="line">    arr.reduce(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(cur)) &#123;</span><br><span class="line">        <span class="keyword">return</span> [...prev, ...flat(cur, depth - <span class="number">1</span>)];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> [...prev, cur];</span><br><span class="line">    &#125;, []) : arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现-throttle"><a href="#实现-throttle" class="headerlink" title="实现 throttle()"></a>实现 throttle()</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay = <span class="number">200</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现-debounce"><a href="#实现-debounce" class="headerlink" title="实现 debounce()"></a>实现 debounce()</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay = <span class="number">200</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现-shuffle"><a href="#实现-shuffle" class="headerlink" title="实现 shuffle()"></a>实现 shuffle()</h1><p>Fisher-Yates shuffle 算法</p><p>每次删除一个数字，并将删除的数字移至数组末尾，即将每个被删除数字与最后一个未删除的数字进行交换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * i);</span><br><span class="line">    [arr[i], arr[j]] = [arr[j], arr[i]]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解密消息"><a href="#解密消息" class="headerlink" title="解密消息"></a>解密消息</h1><p>在一个字符串的二维数组中，有一个隐藏字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I B C A L K A</span><br><span class="line">D R F C A E A</span><br><span class="line">G H O E L A D</span><br></pre></td></tr></table></figure><p>可以按照如下步骤找出隐藏消息</p><ol><li>从左上开始，向右下前进</li><li>无法前进的时候，向右上前进</li><li>无法前进的时候，向右下前进</li><li>重复 2 和 3</li><li>无法前进的时候，经过的字符就就是隐藏信息</li></ol><p>比如上面的二维数组的话，隐藏消息就是 IROCLED</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[][]&#125;</span> <span class="variable">message</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (message.length === <span class="number">0</span> || message[<span class="number">0</span>].length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> top = <span class="literal">true</span>; <span class="comment">// 表示目前正在向 i 增大方向行进，对应图中的向下行进</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (j &lt; message[<span class="number">0</span>].length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (top) &#123;</span><br><span class="line">      res += message[i++][j++];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res += message[i--][j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i === message.length - <span class="number">1</span>) &#123;</span><br><span class="line">      top = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">      top = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第一个错误的版本"><a href="#第一个错误的版本" class="headerlink" title="第一个错误的版本"></a>第一个错误的版本</h1><p>题目链接：<br><a href="https://leetcode-cn.com/problems/first-bad-version/">https://leetcode-cn.com/problems/first-bad-version/</a></p><p>二分基础题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for isBadVersion()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;integer&#125;</span> </span>version number</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span> </span>whether the version is bad</span></span><br><span class="line"><span class="comment"> * isBadVersion = function(version) &#123;</span></span><br><span class="line"><span class="comment"> *     ...</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;function&#125;</span> </span>isBadVersion()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;function&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> solution = <span class="function"><span class="keyword">function</span>(<span class="params">isBadVersion</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;integer&#125;</span> </span>n Total versions</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return <span class="type">&#123;integer&#125;</span> </span>The first bad version</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">      <span class="keyword">let</span> ans = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (isBadVersion(mid)) &#123;</span><br><span class="line">          <span class="comment">// 满足条件，寻找最左满足，因此收缩右边界</span></span><br><span class="line">          r = mid - <span class="number">1</span>;</span><br><span class="line">          ans = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;    </span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="实现-pipe"><a href="#实现-pipe" class="headerlink" title="实现 pipe()"></a>实现 pipe()</h1><p><code>pipe</code> 会传入一个数组，数组中每一项是一个函数。<code>pipe</code> 会依次执行里面的多个函数，最后返回结果。假设每个函数都有且仅有一个参数。如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pipe([</span><br><span class="line">  times(2),</span><br><span class="line">  times(3)</span><br><span class="line">])  </span><br><span class="line">// x * 2 * 3</span><br><span class="line"></span><br><span class="line">pipe([</span><br><span class="line">  times(2),</span><br><span class="line">  plus(3),</span><br><span class="line">  times(4)</span><br><span class="line">]) </span><br><span class="line">// (x * 2 + 3) * 4</span><br><span class="line"></span><br><span class="line">pipe([</span><br><span class="line">  times(2),</span><br><span class="line">  subtract(3),</span><br><span class="line">  divide(4)</span><br><span class="line">]) </span><br><span class="line">// (x * 2 - 3) / 4</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&lt;(arg: any) =&gt; any&gt;&#125;</span> </span>funcs </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;(arg: any) =&gt; any&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pipe</span>(<span class="params">funcs</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">acc, func</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> func.call(<span class="built_in">this</span>, acc);</span><br><span class="line">&#125;, arg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈实现队列"><a href="#栈实现队列" class="headerlink" title="栈实现队列"></a>栈实现队列</h1><p>若 stack2 为空，则直接输入栈顶元素；否则，先把 stack1 的所有元素倒进 stack2 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* you can use this Class which is bundled together with your code</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Stack &#123;</span></span><br><span class="line"><span class="comment">  push(element) &#123; // add element to stack &#125;</span></span><br><span class="line"><span class="comment">  peek() &#123; // get the top element &#125;</span></span><br><span class="line"><span class="comment">  pop() &#123; // remove the top element&#125;</span></span><br><span class="line"><span class="comment">  size() &#123; // count of element &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.stack1 = [];</span><br><span class="line">    <span class="built_in">this</span>.stack2 = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">enqueue</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// add new element to the rare</span></span><br><span class="line">    <span class="built_in">this</span>.stack1.push(element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// get the head element</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.stack2.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.stack2[<span class="built_in">this</span>.stack2.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">this</span>.stack1.length) &#123;</span><br><span class="line">      <span class="built_in">this</span>.stack2.push(<span class="built_in">this</span>.stack1.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack2[<span class="built_in">this</span>.stack2.length - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// return count of element</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack1.length + <span class="built_in">this</span>.stack2.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">dequeue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// remove the head element</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.stack2.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">this</span>.stack1.length) &#123;</span><br><span class="line">      <span class="built_in">this</span>.stack2.push(<span class="built_in">this</span>.stack1.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack2.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现-memo"><a href="#实现-memo" class="headerlink" title="实现 memo()"></a>实现 memo()</h1><p>对同一个函数，当传入相同参数的时候，直接返回上一次的结果而不经过计算。要求允许传入第二个参数决定缓存 key 的生成方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> <span class="variable">func</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;(args:[]) =&gt; string &#125;</span>  </span>[resolver] - cache key generator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memo</span>(<span class="params">func, resolver = (...args) =&gt; args.join(<span class="string">&#x27;_&#x27;</span>)</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> key = resolver(...args);</span><br><span class="line">    <span class="keyword">if</span> (cache.has(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> val = func.apply(<span class="built_in">this</span>, args);</span><br><span class="line">    cache.set(key, val);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现类似-jQuery-的-DOM-wrapper"><a href="#实现类似-jQuery-的-DOM-wrapper" class="headerlink" title="实现类似 jQuery 的 DOM wrapper"></a>实现类似 jQuery 的 DOM wrapper</h1><p>实现自己的 <code>$()</code>，只需要支持 <code>css(propertyName: string, value: any)</code> 即可。如下面所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#button&#x27;</span>)</span><br><span class="line">  .css(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;#fff&#x27;</span>)</span><br><span class="line">  .css(<span class="string">&#x27;backgroundColor&#x27;</span>, <span class="string">&#x27;#000&#x27;</span>)</span><br><span class="line">  .css(<span class="string">&#x27;fontWeight&#x27;</span>, <span class="string">&#x27;bold&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">css</span>: <span class="function"><span class="keyword">function</span>(<span class="params">property, value</span>) </span>&#123;</span><br><span class="line">      elem.style[property] = value;</span><br><span class="line">      <span class="comment">// 最后返回原对象，因为需要支持链式调用</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现基本的-Event-Emitter"><a href="#实现基本的-Event-Emitter" class="headerlink" title="实现基本的 Event Emitter"></a>实现基本的 Event Emitter</h1><p>要求满足的条件为：</p><p>构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> Emitter()</span><br></pre></td></tr></table></figure><p>支持事件订阅</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sub1  = emitter.subscribe(<span class="string">&#x27;event1&#x27;</span>, callback1)</span><br><span class="line"><span class="keyword">const</span> sub2 = emitter.subscribe(<span class="string">&#x27;event2&#x27;</span>, callback2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同一个callback可以重复订阅同一个事件</span></span><br><span class="line"><span class="keyword">const</span> sub3 = emitter.subscribe(<span class="string">&#x27;event1&#x27;</span>, callback1)</span><br></pre></td></tr></table></figure><p><code>emit(eventName, ...args)</code> 可以用来触发 callback</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">emitter.emit(<span class="string">&#x27;event1&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// callback1 会被调用两次</span></span><br></pre></td></tr></table></figure><p><code>subscribe()</code> 返回一个含有 <code>release()</code> 的对象，可以用来取消订阅。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sub1.release()</span><br><span class="line">sub3.release()</span><br><span class="line"><span class="comment">// 现在即使&#x27;event1&#x27;被触发, </span></span><br><span class="line"><span class="comment">// callback1 也不会被调用</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.subscriptions = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">subscribe</span>(<span class="params">eventName, callback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">this</span>.subscriptions.has(eventName)) &#123;</span><br><span class="line">      <span class="built_in">this</span>.subscriptions.set(eventName, <span class="keyword">new</span> <span class="built_in">Set</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取具体的事件列表</span></span><br><span class="line">    <span class="keyword">const</span> subscriptions = <span class="built_in">this</span>.subscriptions.get(eventName);</span><br><span class="line">    <span class="comment">// 这里之所以要把 callback 放进一个 obj 里面，是因为题目允许重复订阅同一个事件</span></span><br><span class="line">    <span class="comment">// 以 obj 作为键值，不会重复</span></span><br><span class="line">    <span class="keyword">const</span> callbackObj = &#123;</span><br><span class="line">      callback</span><br><span class="line">    &#125;</span><br><span class="line">    subscriptions.add(callbackObj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 取消订阅</span></span><br><span class="line">      <span class="attr">release</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        subscriptions.delete(callbackObj);</span><br><span class="line">        <span class="keyword">if</span> (subscriptions.size === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">this</span>.subscriptions.delete(eventName);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">emit</span>(<span class="params">eventName, ...args</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> subscriptions = <span class="built_in">this</span>.subscriptions.get(eventName);</span><br><span class="line">    <span class="keyword">if</span> (subscriptions) &#123;</span><br><span class="line">      subscriptions.forEach(<span class="function"><span class="params">callbackObj</span> =&gt;</span> &#123;</span><br><span class="line">        callbackObj.callback.apply(<span class="built_in">this</span>, args);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="模拟-Map"><a href="#模拟-Map" class="headerlink" title="模拟 Map"></a>模拟 Map</h1><p>JavaScript中有 Map，我们可以用任何 data 做 key，包括 DOM 元素。如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">map.set(domNode, somedata)</span><br></pre></td></tr></table></figure><p>如果运行的 JavaScript 不支持 Map，我们如何能让上述代码工作？</p><p>方法是使用对象来模拟一个 map。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeStore</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.nodes = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> <span class="variable">node</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;any&#125;</span> <span class="variable">value</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">node, value</span>)</span> &#123;</span><br><span class="line">   node.storeKey = <span class="built_in">Symbol</span>();</span><br><span class="line">   <span class="built_in">this</span>.nodes[node.storeKey] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> <span class="variable">node</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return <span class="type">&#123;any&#125;</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.nodes[node.storeKey];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> <span class="variable">node</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return <span class="type">&#123;Boolean&#125;</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.nodes.hasOwnProperty(node.storeKey);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在相同结构的树上寻找对应的节点"><a href="#在相同结构的树上寻找对应的节点" class="headerlink" title="在相同结构的树上寻找对应的节点"></a>在相同结构的树上寻找对应的节点</h1><p>给定两个<strong>完全一样</strong>的 DOM Tree A 和 B，以及 A 中的元素 a，请找到 B 中对应的元素 b。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;HTMLElement&#125;</span> <span class="variable">rootA</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;HTMLElement&#125;</span> <span class="variable">rootB</span></span> - rootA and rootB are clone of each other</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;HTMLElement&#125;</span> <span class="variable">nodeA</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> findCorrespondingNode = <span class="function">(<span class="params">rootA, rootB, target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (rootA === target) &#123;</span><br><span class="line">    <span class="keyword">return</span> rootB;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// children 是一个 DOM 的 api，表示所有的子节点</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rootA.children.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = findCorrespondingNode(rootA.children[i], rootB.children[i], target);</span><br><span class="line">    <span class="comment">// 注意这里必须要判断 res 是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (res) &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检测-data-type"><a href="#检测-data-type" class="headerlink" title="检测 data type"></a>检测 data type</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;any&#125;</span> <span class="variable">data</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">detectType</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="built_in">Object</span>.prototype.toString.call(data).slice(<span class="number">8</span>, -<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> res.toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现-JSON-stringify"><a href="#实现-JSON-stringify" class="headerlink" title="实现 JSON.stringify()"></a>实现 JSON.stringify()</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;any&#125;</span> <span class="variable">data</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringify</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">typeof</span> data;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> undefinedOptions = [<span class="string">&#x27;undefined&#x27;</span>, <span class="string">&#x27;function&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>];</span><br><span class="line">  <span class="keyword">const</span> stringOptions = [<span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;boolean&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 undefined</span></span><br><span class="line">  <span class="keyword">if</span> (undefinedOptions.includes(type)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 null</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Number</span>.isNaN(data) || data === <span class="literal">Infinity</span> || data === -<span class="literal">Infinity</span> || data === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 number 和 boolean</span></span><br><span class="line">  <span class="keyword">if</span> (stringOptions.includes(type)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;data&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理字符串</span></span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&quot;<span class="subst">$&#123;data&#125;</span>&quot;`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 错误处理</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&#x27;bigint&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;stringify 无法序列化 bigint 数据类型&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 剩下的就是 object 类型</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 若存在 toJSON 函数，如 Date()，直接调用</span></span><br><span class="line">  <span class="keyword">if</span> (data.toJSON &amp;&amp; <span class="keyword">typeof</span> data.toJSON === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> stringify(data.toJSON());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理数组</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(data)) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    data.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// undefined、function 以及 symbol 变为 null</span></span><br><span class="line">      <span class="keyword">if</span> (undefinedOptions.includes(<span class="keyword">typeof</span> item)) &#123;</span><br><span class="line">        result[index] = <span class="string">&#x27;null&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[index] = stringify(item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + result + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理普通对象</span></span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="built_in">Object</span>.keys(data).forEach(<span class="function">(<span class="params">key, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 键值不能为 symbol</span></span><br><span class="line">    <span class="comment">// 值忽略 undefined、function 以及 symbol</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> key !== <span class="string">&#x27;symbol&#x27;</span> &amp;&amp; !undefinedOptions.includes(<span class="keyword">typeof</span> data[key])) &#123;</span><br><span class="line">      result.push(<span class="string">`&quot;<span class="subst">$&#123;key&#125;</span>&quot;:<span class="subst">$&#123;stringify(data[key])&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&#123;<span class="subst">$&#123;result.join(<span class="string">&#x27;,&#x27;</span>)&#125;</span>&#125;`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现-JSON-parse"><a href="#实现-JSON-parse" class="headerlink" title="实现 JSON.parse()"></a>实现 JSON.parse()</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (str === <span class="string">&#x27;&#x27;</span> || str[<span class="number">0</span>] === <span class="string">&quot;&#x27;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 特殊情况</span></span><br><span class="line">  <span class="keyword">if</span> (str === <span class="string">&#x27;null&#x27;</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (str === <span class="string">&#x27;&#123;&#125;&#x27;</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (str === <span class="string">&#x27;[]&#x27;</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="comment">// 判断 boolean</span></span><br><span class="line">  <span class="keyword">if</span> (str === <span class="string">&#x27;true&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (str === <span class="string">&#x27;false&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 判断 number</span></span><br><span class="line">  <span class="keyword">if</span>(+str === +str) <span class="keyword">return</span> <span class="built_in">Number</span>(str);</span><br><span class="line">  <span class="comment">// 判断 string</span></span><br><span class="line">  <span class="keyword">if</span>(str[<span class="number">0</span>] === <span class="string">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.slice(<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断对象</span></span><br><span class="line">  <span class="keyword">if</span> (str[<span class="number">0</span>] === <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.slice(<span class="number">1</span>, -<span class="number">1</span>).split(<span class="string">&#x27;,&#x27;</span>).reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> index = cur.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> key = cur.slice(<span class="number">0</span>, index);</span><br><span class="line">      <span class="keyword">const</span> value = cur.slice(index + <span class="number">1</span>);</span><br><span class="line">      acc[parse(key)] = parse(value);</span><br><span class="line">      <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;, &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断数组</span></span><br><span class="line">  <span class="keyword">if</span> (str[<span class="number">0</span>] === <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.slice(<span class="number">1</span>, -<span class="number">1</span>).split(<span class="string">&#x27;,&#x27;</span>).map(<span class="function">(<span class="params">value</span>) =&gt;</span> parse(value));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目列表来源于：&lt;br&gt;&lt;a href=&quot;https://bigfrontend.dev/&quot;&gt;https://bigfrontend.dev/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;参数定长柯里化&quot;&gt;&lt;a href=&quot;#参数定长柯里化&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://flower-f.github.io/tags/javascript/"/>
    
    <category term="手写" scheme="https://flower-f.github.io/tags/%E6%89%8B%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>N 皇后问题</title>
    <link href="https://flower-f.github.io/2022/01/29/n-queens/"/>
    <id>https://flower-f.github.io/2022/01/29/n-queens/</id>
    <published>2022-01-29T03:24:23.000Z</published>
    <updated>2022-01-29T03:45:14.492Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<br><a href="https://leetcode-cn.com/problems/n-queens/">https://leetcode-cn.com/problems/n-queens/</a></p><p>解法分析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> solveNQueens = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> board = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="string">&#x27;.&#x27;</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  backtrack(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params">row</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (row === n) &#123;</span><br><span class="line">      <span class="keyword">const</span> copyBoard = board.slice();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">      copyBoard[i] = copyBoard[i].join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      res.push(copyBoard);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!isValid(row, col)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">      backtrack(row + <span class="number">1</span>);</span><br><span class="line">      board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isValid</span>(<span class="params">row, col</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 因为是从上往下一行一行放的，所以不需要下方的行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="comment">// 如果发现了 Q，并且和自己同列或同对角线</span></span><br><span class="line">        <span class="comment">// 判断同对角线，使用 |y1 - y2| === |x1 - x2|</span></span><br><span class="line">        <span class="keyword">if</span> (board[i][j] === <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (j === col || <span class="built_in">Math</span>.abs(i - row) === <span class="built_in">Math</span>.abs(j - col)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/n-queens/&quot;&gt;https://leetcode-cn.com/problems/n-queens/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解法分析：&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://flower-f.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>webpack 基础学习笔记</title>
    <link href="https://flower-f.github.io/2022/01/24/webpack-learning-notes/"/>
    <id>https://flower-f.github.io/2022/01/24/webpack-learning-notes/</id>
    <published>2022-01-24T03:33:05.000Z</published>
    <updated>2022-01-25T12:22:06.568Z</updated>
    
    <content type="html"><![CDATA[<p>本文对应<a href="https://github.com/Flower-F/webpack-learning/tree/main/webpack-basics">仓库地址</a></p><h1 id="webpack-初体验"><a href="#webpack-初体验" class="headerlink" title="webpack 初体验"></a>webpack 初体验</h1><p>运行命令初始化 package.json。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init -y</span><br></pre></td></tr></table></figure><p>安装 webpack 和 webpack-cli。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack webpack-cli -D</span><br></pre></td></tr></table></figure><p>根目录新建文件夹 src，里面新建文件夹 js。</p><p>js 文件夹下新建两个文件 math.js 和 foo.js。内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mul = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foo.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  foo,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>src 目录下新建文件 index.js，文件内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum, mul &#125; <span class="keyword">from</span> <span class="string">&quot;./js/math&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; foo &#125; = <span class="built_in">require</span>(<span class="string">&quot;./js/foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>根目录下新建 index.html，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Learning<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行命令打包文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>在 dist/main.js 中，可以看到打包的结果。</p><p>在 package.json 中配置 build 运行命令。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;npx webpack&quot;</span></span><br></pre></td></tr></table></figure><h1 id="css-loader-amp-style-loader"><a href="#css-loader-amp-style-loader" class="headerlink" title="css-loader &amp; style-loader"></a>css-loader &amp; style-loader</h1><p>src/js 目录下新建文件 title.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;../css/title.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTitle</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> h1 = <span class="built_in">document</span>.createElement(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line">  h1.innerHTML = title;</span><br><span class="line">  h1.className = <span class="string">&quot;title&quot;</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(h1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> setTitle;</span><br></pre></td></tr></table></figure><p>修改 index.js 内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setTitle <span class="keyword">from</span> <span class="string">&quot;./js/title&quot;</span>;</span><br><span class="line"></span><br><span class="line">setTitle(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure><p>src 目录下新建文件夹 css，css 文件夹下新建文件 title.css，内容如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 index.html 中引入 css 文件。</p><p>运行命令 <code>yarn build</code>，报错，原因是缺少 loader。</p><p>安装 loader。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add css-loader -D</span><br></pre></td></tr></table></figure><p>根目录下新建文件 webpack.config.js，进行配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是样式并没有展示，因为现在只是把 css 语法识别为了 js 语法，但是还没有挂载到页面上，我们需要 style-loader 来把内容挂载到 <code>&lt;style&gt;</code> 标签上。</p><p>安装 style-loader</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add style-loader -D</span><br></pre></td></tr></table></figure><p>修改配置文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h1><p>首先安装 less。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add less -D</span><br></pre></td></tr></table></figure><p>配置文件修改为下面的内容。</p><p>安装 less-loader。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add less-loader -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">    use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h1 id="browserslitrc"><a href="#browserslitrc" class="headerlink" title="browserslitrc"></a>browserslitrc</h1><p>浏览器使用比例可以查看 <a href="https://caniuse.com/">caniuse 官网</a></p><p>在 package.json 中新增内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;browserslist&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;&gt;1%&quot;</span>,</span><br><span class="line">  <span class="string">&quot;last 2 version&quot;</span>,</span><br><span class="line">  <span class="string">&quot;not dead&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>运行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx browserslist</span><br></pre></td></tr></table></figure><p>可查看当前兼容的浏览器选项。</p><h1 id="postcss-loader"><a href="#postcss-loader" class="headerlink" title="postcss-loader"></a>postcss-loader</h1><p>postcss 用来处理 css 的兼容性问题。</p><p>先安装 postcss 和 postcss-loader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add postcss -D</span><br></pre></td></tr></table></figure><p>css 文件夹下新建文件 test.css，内容如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  user-select: none;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把文件引入 title.js 中。</p><p>修改 webpack.config.js 为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">  use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;postcss-loader&quot;</span>],</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">  use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;postcss-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>打包以后发现没有任何效果，原因是 postcss 本身其实不具备修改 css 的功能，还需要额外的插件才行。</p><h2 id="autoprefixer"><a href="#autoprefixer" class="headerlink" title="autoprefixer"></a>autoprefixer</h2><p>安装插件 autoprefixer。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add autoprefixer -D</span><br></pre></td></tr></table></figure><p>修改配置文件为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">          <span class="attr">plugins</span>: [<span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>)],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="postcss-preset-env"><a href="#postcss-preset-env" class="headerlink" title="postcss-preset-env"></a>postcss-preset-env</h2><p>安装 postcss-preset-env。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add postcss-preset-env -D</span><br></pre></td></tr></table></figure><p>修改 test.css 内容为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#123456</span>78;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>postcss-loader 配置的 plugins 中增加以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;postcss-preset-env&quot;</span>)</span><br></pre></td></tr></table></figure><p>打包以后颜色会以 rgba 形式展示。</p><h2 id="避免重复配置"><a href="#避免重复配置" class="headerlink" title="避免重复配置"></a>避免重复配置</h2><p>为了避免在 css-loader 和 less-loader 中都要进行重复的配置，postcss 还支持我们通过配置文件进行配置。</p><p>根目录下新建文件 postcss.config.js，内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>), <span class="built_in">require</span>(<span class="string">&quot;postcss-preset-env&quot;</span>)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样我们就不需要在 webpack.config.js 中书写 postcss-loader 的 plugins 了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">  use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;postcss-loader&quot;</span>],</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">  use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;postcss-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="filer-loader"><a href="#filer-loader" class="headerlink" title="filer-loader"></a>filer-loader</h1><h2 id="处理-img-标签"><a href="#处理-img-标签" class="headerlink" title="处理 img 标签"></a>处理 img 标签</h2><p>在 src 文件夹下新建文件夹 img，里面塞入一张图片。</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/123112132122.jpg"></p><p>在 js 文件夹下新建文件 image.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> imgSrc <span class="keyword">from</span> <span class="string">&quot;../img/ai.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setImage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">  img.src = imgSrc;</span><br><span class="line">  div.appendChild(img);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> setImage;</span><br></pre></td></tr></table></figure><p>修改 index.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setImage <span class="keyword">from</span> <span class="string">&quot;./js/image&quot;</span>;</span><br><span class="line"></span><br><span class="line">setImage();</span><br></pre></td></tr></table></figure><p>打包以后报错缺少 loader。</p><p>安装 file-loader。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add file-loader -D</span><br></pre></td></tr></table></figure><p>修改 webpack.config.js，添加如下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(png|svg|gif|jpe?g)$/</span>,</span><br><span class="line">  use: [<span class="string">&quot;file-loader&quot;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="处理-css-背景图片"><a href="#处理-css-背景图片" class="headerlink" title="处理 css 背景图片"></a>处理 css 背景图片</h2><p>修改 js/image.js 为以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;../css/bg.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setImage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> backgroundImg = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  backgroundImg.className = <span class="string">&quot;bg-img&quot;</span>;</span><br><span class="line">  div.appendChild(backgroundImg);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> setImage;</span><br></pre></td></tr></table></figure><p>css 文件夹下新建文件 bg.css，内容如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg-img</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../img/ai.jpg</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先删除 dist 目录，再运行打包命令。此时发现 dist 目录下会出现两张图片。</p><p>其中一张是正常的，另一张点击打开以后内容如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220124143938.png"></p><p>里面的文本内容是一个指向我们需要的图片的导出语句。</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220124144219.png"></p><p>这是因为图片是嵌在 css-loader 里面，没有被 file-loader 处理。</p><p>css-loader 会把 url 路径处理为 require 语句，而 require 语句使用时需要把 css-loader 的 esModule 属性设置为 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>处理以后打包问题就解决了。</p><h1 id="图片名称和路径设置"><a href="#图片名称和路径设置" class="headerlink" title="图片名称和路径设置"></a>图片名称和路径设置</h1><ul><li>[ext] 拓展名</li><li>[name] 文件名</li><li>[hash] 哈希</li><li>[hash:<length>] 哈希截取长度</li><li>[path] 文件路径</li></ul><p>修改 webpack.config.js 如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(png|svg|gif|jpe?g)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;file-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;[name].[hash:6].[ext]&quot;</span>,</span><br><span class="line">        <span class="attr">outputPath</span>: <span class="string">&quot;img&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h1><p>安装 url-loader。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add url-loader -D</span><br></pre></td></tr></table></figure><p>把配置文件的 file-loader 修改为 url-loader，进行打包。</p><p>打包后发现页面显示正常，但是 dist 目录下没有出现 img 文件夹。</p><p>它会以 base64 形式把图片嵌入代码中。</p><h1 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h1><p><strong>url-loader VS file-loader</strong></p><ul><li>url-loader 会把文件转换为 base64 格式，可以减少请求次数，但是会增加单次请求文件的体积，不利于首屏渲染</li><li>file-loader 会将资源拷贝到指定目录，分开请求</li><li>url-loader 可以调用 file-loader，通过设置 limit 进行阈值限制，控制文件小于多少的时候使用 url-loader</li></ul><p>在 img 文件夹下加入一张新图片</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/ai2.jpg"></p><p>修改 image.js 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;../css/bg.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> imgSrc <span class="keyword">from</span> <span class="string">&quot;../img/ai2.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setImage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">  img.src = imgSrc;</span><br><span class="line">  div.appendChild(img);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> backgroundImg = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  backgroundImg.className = <span class="string">&quot;bg-img&quot;</span>;</span><br><span class="line">  div.appendChild(backgroundImg);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> setImage;</span><br></pre></td></tr></table></figure><p>修改 webpack.config.js 文件如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(png|svg|gif|jpe?g)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;url-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;[name].[hash:6].[ext]&quot;</span>,</span><br><span class="line">        <span class="attr">outputPath</span>: <span class="string">&quot;img&quot;</span>,</span><br><span class="line">        <span class="attr">limit</span>: <span class="number">25</span> * <span class="number">1024</span>, <span class="comment">// 即 25Kb</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>运行打包命令，会发现只有一张较大的图片，另一张小的图片被以 base64 的形式嵌入文件里了。</p><h1 id="asset-处理图片"><a href="#asset-处理图片" class="headerlink" title="asset 处理图片"></a>asset 处理图片</h1><p>webpack5 之后不需要再使用 file-loader 和 url-loader 了。</p><ul><li>asset/resource =&gt; file-loader</li><li>asset/inline =&gt; url-loader</li><li>asset =&gt; 阈值限制</li></ul><p>修改 webpack.config.js 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(png|svg|gif|jpe?g)$/</span>,</span><br><span class="line">  type: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">  <span class="attr">generator</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;img/[name].[hash:6][ext]&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如果需要设置 limit，则修改如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(png|svg|gif|jpe?g)$/</span>,</span><br><span class="line">  type: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">generator</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;img/[name].[hash:6][ext]&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">parser</span>: &#123;</span><br><span class="line">    <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">      <span class="attr">maxSize</span>: <span class="number">25</span> * <span class="number">1024</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="asset-处理字体图标"><a href="#asset-处理字体图标" class="headerlink" title="asset 处理字体图标"></a>asset 处理字体图标</h1><p>先去 <a href="https://www.iconfont.cn/">iconfont 官网</a>下载图标。</p><p>在 src 下新建文件夹 font，里面留着下面图片中这几个文件即可。</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220124155141.png"></p><p>src/js 下新建文件 font.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setFont</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> span = <span class="built_in">document</span>.createElement(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">  span.className = <span class="string">&quot;iconfont icon-gift lg-icon&quot;</span>;</span><br><span class="line">  div.appendChild(span);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> setFont;</span><br></pre></td></tr></table></figure><p>修改 index.js 内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setFont <span class="keyword">from</span> <span class="string">&quot;./js/font&quot;</span>;</span><br><span class="line"></span><br><span class="line">setFont();</span><br></pre></td></tr></table></figure><p>运行打包命令，报错，这是因为我们没有办法处理 iconfont 里面的路径。</p><p>我们直接把字体当成资源文件进行拷贝即可，因此可以使用前面所说的 asset/resource ，给 webpack.config.js 添加如下内容即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">  type: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">  <span class="attr">generator</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;font/[name].[hash:6][ext]&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="plugin-VS-loader"><a href="#plugin-VS-loader" class="headerlink" title="plugin VS loader"></a>plugin VS loader</h1><ul><li>loader：webpack 只认识 js 和 json 文件，为了让 webpack 认识其它文件，如 css、jpg、png 等等，需要将其它类型文件<strong>转换</strong>为 js 格式，让 webpack 认识，这个转换的作用就是 loader 提供的。</li><li>plugin：plugin 可以做更多的事情，比如在打包开始之前做一些预处理，或者打包进行过程中做一些处理。loader 的作用时机只有当 webpack 要读取某个文件的时候，但是 plugin 的作用时机很多。</li></ul><h1 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h1><p>安装 clean-webpack-plugin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add clean-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>作用是每次打包之前先把 dist 目录删除。</p><p>修改 webpack.config.js 内容：</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220124162444.png"></p><p>在现版本的 webpack 中，已经不需要再加入此插件了，直接设置 output 的 clean 属性为 true 即可。</p><h1 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h1><p>安装 html-webpack-plugin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add html-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>引入 HtmlWebpackPlugin 类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br></pre></td></tr></table></figure><p>引入插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Webpack Learning&quot;</span>,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>这里打包以后产出的 js 文件是 defer 引入的。但是这样很不灵活，其实我们可以自己书写打印出的模板。</p><p>在 src 目录下新建文件夹 public。public 下新建文件 index.html。我们把 vue-cli 的 index.html 拷贝过来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">    &lt;%= htmlWebpackPlugin.options.title %&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled.</span><br><span class="line">        Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包以后报错说找不到 BASE_URL。webpack 可以自定义一些常量，我们在这还没有定义所以会报错。这里用到的是 webpack 内置的一个插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; DefinePlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> DefinePlugin(&#123;</span><br><span class="line">  <span class="attr">BASE_URL</span>: <span class="string">&#x27;&quot;./&quot;&#x27;</span>, <span class="comment">// 必须包裹两层引号，否则会在转译的时候以 const a = ./ 的形式出现，导致出错</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h1 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h1><p>Babel 的作用：JSX TS ES6+ =&gt; 转换为浏览器可以直接使用的语法</p><p>将 js/foo.js 内容修改如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;hello babel&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo;</span><br></pre></td></tr></table></figure><p>修改 index.js 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">&quot;./js/foo&quot;</span>;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>打包后，main.js 内容含有箭头函数，可能在某些浏览器无法正常显示。我们需要使用 babel 处理。</p><h1 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h1><p>安装 @babel/core（核心模块）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/core -D</span><br></pre></td></tr></table></figure><p>安装 babel-loader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-loader -D</span><br></pre></td></tr></table></figure><p>安装插件 @babel/preset-env -D</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/preset-env -D</span><br></pre></td></tr></table></figure><p>修改配置文件如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>然后就可以把语法转成 ES5 了。</p><p>还可以新建文件 babel.config.js，里面写入一下配置内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后就能简写 webpack.config.js 的信息为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  use: [<span class="string">&quot;babel-loader&quot;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="polyfill"><a href="#polyfill" class="headerlink" title="polyfill"></a>polyfill</h1><p>preset-env 并不能把所有的语法都转换，此时我们需要 polyfill。polyfill 即字面意思，填充，意思是填充一些旧版本没有的新语法（比如 Promise）。webpack4 会默认加入 polyfill，所以打包速度很不乐观，在 webpack5 就去掉了。</p><p>修改 index.js 内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;promsie&quot;</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>安装 core-js、regenerator-runtime，注意此处不是开发依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add core-js regenerator-runtime</span><br></pre></td></tr></table></figure><p>然后修改 babel.config.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">useBuiltIns</span>: <span class="string">&quot;entry&quot;</span>,</span><br><span class="line">        <span class="attr">corejs</span>: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 index.js 中引入核心模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js/stable&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;regenerator-runtime/runtime&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;promsie&quot;</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="copy-webpack-plugin"><a href="#copy-webpack-plugin" class="headerlink" title="copy-webpack-plugin"></a>copy-webpack-plugin</h1><p>可以进行一些资源的拷贝，如 favicon 图标。</p><p>安装 copy-webpack-plugin。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add copy-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>引入插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>);</span><br></pre></td></tr></table></figure><p>修改 webpack.config.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CopyWebpackPlugin(&#123;</span><br><span class="line">  <span class="attr">patterns</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">from</span>: <span class="string">&quot;public&quot;</span>,</span><br><span class="line">      <span class="attr">globOptions</span>: &#123;</span><br><span class="line">        <span class="attr">ignore</span>: [<span class="string">&quot;**/index.html&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>修改 index.js 内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./js/font&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./js/image&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h1><p>在 webpack.config.js 中添加 watch: true，如下所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220124182901.png"></p><p>当文件修改以后，会自动触发打包。但是这样会影响速度，因为每次保存都要重新打包一次。我们可以在本地开启一个服务器，把文件存储在内存中。</p><p>安装 webpack-dev-server。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-dev-server -D</span><br></pre></td></tr></table></figure><p>在 package.json 中配置命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;start&quot;</span>: <span class="string">&quot;npx webpack serve&quot;</span></span><br></pre></td></tr></table></figure><p>运行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>这样就可以实现开启本地服务器。</p><h1 id="HMR"><a href="#HMR" class="headerlink" title="HMR"></a>HMR</h1><p>HMR 即 hot-module-replacement，模块热替换，也叫热更新，就是可以对页面的局部内容进行替换。</p><p>首先修改 index.js 内容为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;HMR&quot;</span>);</span><br></pre></td></tr></table></figure><p>修改 public 文件夹下的 index.html，增加一个输入框，用于验证热替换是否开启。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled.</span><br><span class="line">        Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>webpack.config.js 中加入内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3000</span>，</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>此时事实上还没有开启热更新。还需要把热更新的选项加入配置中。因为开发中通常是使用框架进行，所以这部分意义不大，省略。</p><h1 id="React-HMR"><a href="#React-HMR" class="headerlink" title="React HMR"></a>React HMR</h1><p>安装 @babel/preset-react，这是一个用于转换 jsx 语法的插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/preset-react -D</span><br></pre></td></tr></table></figure><p>安装 react。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react react-dom</span><br></pre></td></tr></table></figure><p>src 目录下新建文件 App.jsx，内容如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [title, setTitle] = useState(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>修改 index.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.jsx&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;app&quot;</span>));</span><br></pre></td></tr></table></figure><p>修改 babel.config.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">useBuiltIns</span>: <span class="string">&quot;entry&quot;</span>,</span><br><span class="line">        <span class="attr">corejs</span>: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    [<span class="string">&quot;@babel/preset-react&quot;</span>],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时可以支持 React 语法，为了实现热更新，还需要引入其它插件。</p><p>安装 @pmmmwh/react-refresh-webpack-plugin 和 react-refresh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @pmmmwh/react-refresh-webpack-plugin react-refresh -D</span><br></pre></td></tr></table></figure><p>在 webpack.config.js 中引入插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ReactRefreshWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;@pmmmwh/react-refresh-webpack-plugin&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ReactRefreshWebpackPlugin(),</span><br></pre></td></tr></table></figure><p>修改 babel.config.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">useBuiltIns</span>: <span class="string">&quot;entry&quot;</span>,</span><br><span class="line">        <span class="attr">corejs</span>: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    [<span class="string">&quot;@babel/preset-react&quot;</span>],</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [[<span class="string">&quot;react-refresh/babel&quot;</span>]],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时就能实现 React 的热更新了。</p><h1 id="devServer-其它属性设置"><a href="#devServer-其它属性设置" class="headerlink" title="devServer 其它属性设置"></a>devServer 其它属性设置</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>compress 表示是否压缩资源（使用 gzip），open 表示是否自动打开文件，当使用 History API 时，任意的 404 响应会被替代为 index.html。</p><p><strong>hot: ‘only’</strong> 和 <strong>hot: true</strong> 的区别：<br>如果文件报错了，修改成了对的以后，hot: true 会直接刷新整个页面，而 hot: ‘only’ 不会刷新整个页面。</p><h1 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h1><p>先开启一个 node 服务。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端 http://127.0.0.1:8000</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(<span class="string">&quot;hello world&quot;</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(port, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;server is listening on port &quot;</span> + port);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>安装 axios</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add axios</span><br></pre></td></tr></table></figure><p>修改 index.js 内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.jsx&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;app&quot;</span>));</span><br></pre></td></tr></table></figure><p>此时请求出现跨域，需要设置代理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&quot;http://127.0.0.1:8000/&quot;</span>,</span><br><span class="line">      <span class="comment">// 如果请求路径是 http://127.0.0.1:8000/api/user 这种就不需要重写</span></span><br><span class="line">      <span class="comment">// 如果请求路径是 http://127.0.0.1:8000/user 这种就需要重写</span></span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123; <span class="string">&quot;^api&quot;</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>前端更改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时跨域问题得到解决。</p><h1 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h1><p>devtool 选项控制是否需要 source-map。</p><p>source-map 是一种映射方式，可以在调试的时候定位到源代码中的位置。</p><p>设置 <code>devtool: &#39;source-map&#39;</code>，运行 <code>yarn build</code>，dist 目录下除了原来的文件外还会多出一个 main.js.map，然后也可以定位到错误的具体位置了。</p><h1 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h1><p>通过 devtool 还可以进行更多的配置。</p><ul><li>source-map：错误信息有行也有列，推荐使用</li><li>inline-source-map：直接把 map 信息塞入 main.js 中，可以减少一次请求</li><li>cheap-source-map：错误信息只显示行，不显示列</li></ul><h1 id="ts-loader-编译-ts"><a href="#ts-loader-编译-ts" class="headerlink" title="ts-loader 编译 ts"></a>ts-loader 编译 ts</h1><p>src 目录下新建文件 index.ts，内容如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>修改 webpack.config.js 文件中的 entry 为 “./src/index.ts”</p><p>执行命令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>生成 tsconfig.json 文件。</p><p>安装 ts-loader。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add ts-loader -D</span><br></pre></td></tr></table></figure><p>安装 typescript。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add typescript -D</span><br></pre></td></tr></table></figure><p>修改 webpack.config.js 文件内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">  use: [<span class="string">&quot;ts-loader&quot;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="babel-loader-编译-ts"><a href="#babel-loader-编译-ts" class="headerlink" title="babel-loader 编译 ts"></a>babel-loader 编译 ts</h1><p>此时 ts 已经可以被正确编译，但是一些新的语法没有被转换为低级的语法，可能会存在兼容性问题，所以还需要 babel-loader 进行进一步的处理。</p><p>安装 @babel/preset-typescript</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/preset-typescript -D</span><br></pre></td></tr></table></figure><p>修改 babel.config.js，内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">useBuiltIns</span>: <span class="string">&quot;entry&quot;</span>,</span><br><span class="line">        <span class="attr">corejs</span>: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    [<span class="string">&quot;@babel/preset-react&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;@babel/preset-typescript&quot;</span>],</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [[<span class="string">&quot;react-refresh/babel&quot;</span>]],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ts-loader 如果出现数据类型错误，会在 build 的时候暴露；而 babel-loader 可以进行 polyfill。</p><p>我们可以选择使用 babel-loader，然后通过命令进行类型校验。输入命令 <code>tsc</code>，可以实现数据类型的校验。</p><p>也可以选择直接修改打包命令如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220125001809.png"></p><h1 id="分离生产和开发环境"><a href="#分离生产和开发环境" class="headerlink" title="分离生产和开发环境"></a>分离生产和开发环境</h1><p>修改 package.json 中的脚本命令：</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220125150959.png"></p><p>在根目录下新建文件夹 config，然后在 config 文件夹下新建 3 个文件 webpack.common.js、webpack.dev.js、webpack.prod.js。</p><p>安装 webpack-merge，来进行文件合并。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-merge -D</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.common.js</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; DefinePlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.tsx&quot;</span>, <span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.jsx&quot;</span>, <span class="string">&quot;.js&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">        use: [<span class="string">&quot;babel-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|svg|gif|jpe?g)$/</span>,</span><br><span class="line">        type: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;img/[name].[hash:6][ext]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">25</span> * <span class="number">1024</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">        type: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;font/[name].[hash:6][ext]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [<span class="string">&quot;babel-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.jsx$/</span>,</span><br><span class="line">        use: [<span class="string">&quot;babel-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;Webpack Learning&quot;</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> DefinePlugin(&#123;</span><br><span class="line">      <span class="attr">BASE_URL</span>: <span class="string">&#x27;&quot;./&quot;&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: <span class="string">&quot;public&quot;</span>,</span><br><span class="line">          <span class="attr">globOptions</span>: &#123;</span><br><span class="line">            <span class="attr">ignore</span>: [<span class="string">&quot;**/index.html&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="keyword">const</span> ReactRefreshWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;@pmmmwh/react-refresh-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack-merge&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&quot;./webpack.common&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> ReactRefreshWebpackPlugin()],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack-merge&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&quot;./webpack.common&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">&quot;../dist&quot;</span>),</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改 babel.config.js，区分生产和开发环境：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV !== <span class="string">&quot;production&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">useBuiltIns</span>: <span class="string">&quot;entry&quot;</span>,</span><br><span class="line">        <span class="attr">corejs</span>: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    [<span class="string">&quot;@babel/preset-react&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;@babel/preset-typescript&quot;</span>],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDev) &#123;</span><br><span class="line">  config.plugins = [[<span class="string">&quot;react-refresh/babel&quot;</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文对应&lt;a href=&quot;https://github.com/Flower-F/webpack-learning/tree/main/webpack-basics&quot;&gt;仓库地址&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;webpack-初体验&quot;&gt;&lt;a href=&quot;#webpack-初</summary>
      
    
    
    
    
    <category term="连载" scheme="https://flower-f.github.io/tags/%E8%BF%9E%E8%BD%BD/"/>
    
    <category term="webpack" scheme="https://flower-f.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>使用 Webpack 从零打造 React 开发环境</title>
    <link href="https://flower-f.github.io/2022/01/24/webpack-react-settings/"/>
    <id>https://flower-f.github.io/2022/01/24/webpack-react-settings/</id>
    <published>2022-01-24T02:29:48.000Z</published>
    <updated>2022-01-28T05:09:15.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>先初始化项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init -y</span><br></pre></td></tr></table></figure><p>运行命令初始化 package.json 文件。</p><p>安装 webpack 和 webpack-cli。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack webpack-cli -D</span><br></pre></td></tr></table></figure><h1 id="进行-ts-配置"><a href="#进行-ts-配置" class="headerlink" title="进行 ts 配置"></a>进行 ts 配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>修改 tsconfig.json，使用 create-react-app 的设置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;dom&quot;</span>,</span><br><span class="line">      <span class="string">&quot;dom.iterable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;esnext&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;./src&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;react-jsx&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;src&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在根目录下新建文件夹 config，书写配置信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/webpack.common.js</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; DefinePlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.tsx&quot;</span>,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.tsx&quot;</span>, <span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.jsx&quot;</span>, <span class="string">&quot;.js&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">          <span class="string">&quot;sass-loader&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.tsx?$/i</span>,</span><br><span class="line">        use: [<span class="string">&quot;babel-loader&quot;</span>],</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|svg|gif|jpe?g)$/i</span>,</span><br><span class="line">        type: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;img/[name].[hash:6][ext]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">25</span> * <span class="number">1024</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/i</span>,</span><br><span class="line">        type: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;font/[name].[hash:6][ext]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.jsx?$/i</span>,</span><br><span class="line">        use: [<span class="string">&quot;babel-loader&quot;</span>],</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;Webpack Learning&quot;</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> DefinePlugin(&#123;</span><br><span class="line">      <span class="attr">BASE_URL</span>: <span class="string">&#x27;&quot;./&quot;&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: <span class="string">&quot;public&quot;</span>,</span><br><span class="line">          <span class="attr">globOptions</span>: &#123;</span><br><span class="line">            <span class="attr">ignore</span>: [<span class="string">&quot;**/index.html&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/webpack.dev.js</span></span><br><span class="line"><span class="keyword">const</span> ReactRefreshWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;@pmmmwh/react-refresh-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack-merge&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&quot;./webpack.common&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> ReactRefreshWebpackPlugin()],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/webpack.prod.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack-merge&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&quot;./webpack.common&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">&quot;../dist&quot;</span>),</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="安装-react"><a href="#安装-react" class="headerlink" title="安装 react"></a>安装 react</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react react-dom</span><br></pre></td></tr></table></figure><p>安装 ts 依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @types/react @types/react-dom -D</span><br></pre></td></tr></table></figure><h1 id="安装-babel-相关依赖"><a href="#安装-babel-相关依赖" class="headerlink" title="安装 babel 相关依赖"></a>安装 babel 相关依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime @babel/preset-react @babel/preset-typescript -D</span><br></pre></td></tr></table></figure><p>根目录新建文件 babel.config.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV !== <span class="string">&quot;production&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">useBuiltIns</span>: <span class="string">&quot;entry&quot;</span>,</span><br><span class="line">        <span class="attr">corejs</span>: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    [<span class="string">&quot;@babel/preset-react&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;@babel/preset-typescript&quot;</span>],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDev) &#123;</span><br><span class="line">  config.plugins = [[<span class="string">&quot;react-refresh/babel&quot;</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><h1 id="安装-loader"><a href="#安装-loader" class="headerlink" title="安装 loader"></a>安装 loader</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add sass sass-loader css-loader postcss-loader postcss style-loader babel-loader -D</span><br></pre></td></tr></table></figure><h1 id="安装-plugin"><a href="#安装-plugin" class="headerlink" title="安装 plugin"></a>安装 plugin</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @pmmmwh/react-refresh-webpack-plugin react-refresh copy-webpack-plugin html-webpack-plugin -D </span><br></pre></td></tr></table></figure><h1 id="安装-postcss-依赖"><a href="#安装-postcss-依赖" class="headerlink" title="安装 postcss 依赖"></a>安装 postcss 依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add postcss-preset-env autoprefixer -D</span><br></pre></td></tr></table></figure><p>新建文件 postcss.config.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>), <span class="built_in">require</span>(<span class="string">&quot;postcss-preset-env&quot;</span>)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="添加-browserslist"><a href="#添加-browserslist" class="headerlink" title="添加 browserslist"></a>添加 browserslist</h1><p>给 package.json 添加 browserslist。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;browserslist&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;&gt;1%&quot;</span>,</span><br><span class="line">  <span class="string">&quot;last 2 version&quot;</span>,</span><br><span class="line">  <span class="string">&quot;not dead&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="安装-webpack-dev-server"><a href="#安装-webpack-dev-server" class="headerlink" title="安装 webpack-dev-server"></a>安装 webpack-dev-server</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-dev-server -D</span><br></pre></td></tr></table></figure><h1 id="安装-webpack-merge"><a href="#安装-webpack-merge" class="headerlink" title="安装 webpack-merge"></a>安装 webpack-merge</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-merge -D</span><br></pre></td></tr></table></figure><h1 id="安装-cross-env"><a href="#安装-cross-env" class="headerlink" title="安装 cross-env"></a>安装 cross-env</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add cross-env -D</span><br></pre></td></tr></table></figure><h1 id="配置脚本命令"><a href="#配置脚本命令" class="headerlink" title="配置脚本命令"></a>配置脚本命令</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production npx webpack --config ./config/webpack.prod.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development npx webpack serve --config ./config/webpack.dev.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h1&gt;&lt;p&gt;先初始化项目&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    
    <category term="react" scheme="https://flower-f.github.io/tags/react/"/>
    
    <category term="webpack" scheme="https://flower-f.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>React + Redux + Typescript + Axios 通用配置</title>
    <link href="https://flower-f.github.io/2022/01/23/quick-react-settings/"/>
    <id>https://flower-f.github.io/2022/01/23/quick-react-settings/</id>
    <published>2022-01-23T04:38:43.000Z</published>
    <updated>2022-02-11T14:02:20.980Z</updated>
    
    <content type="html"><![CDATA[<p>本文代码对应<a href="https://github.com/Flower-F/react-common-setttings">仓库地址</a></p><p>本文主要包括以下内容配置</p><ul><li>creat-react-app 创建项目</li><li>配置 redux</li><li>配置 react-router</li><li>配置 json-server</li><li>配置 axios</li></ul><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><p>首先按照<a href="https://flower-f.github.io/2022/01/12/eslint-prettier-commitlint/">这篇文章</a>完成项目创建和基本配置，你也可以使用 webpack 进行基础配置。</p><p>把 src 文件夹下的 App.css、index.css、logo.svg 删除。</p><h1 id="配置-styled-components-Sass-Less"><a href="#配置-styled-components-Sass-Less" class="headerlink" title="配置 styled-components / Sass / Less"></a>配置 styled-components / Sass / Less</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add styled-components</span><br></pre></td></tr></table></figure><p>如果报错找不到类型文件，就执行以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @types/styled-components -D</span><br></pre></td></tr></table></figure><h1 id="修改默认样式"><a href="#修改默认样式" class="headerlink" title="修改默认样式"></a>修改默认样式</h1><p>在根目录新建文件 <code>globalStyle.ts</code>，内容如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createGlobalStyle &#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> GlobalStyle = createGlobalStyle<span class="string">`</span></span><br><span class="line"><span class="string">  html, body &#123;</span></span><br><span class="line"><span class="string">    // 根据需要配置 background、line-height、font 等</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  * &#123;</span></span><br><span class="line"><span class="string">    margin: 0;</span></span><br><span class="line"><span class="string">    padding: 0;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  a &#123;</span></span><br><span class="line"><span class="string">    text-decoration: none;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ul, li &#123;</span></span><br><span class="line"><span class="string">    list-style: none;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h1 id="配置-react-router"><a href="#配置-react-router" class="headerlink" title="配置 react-router"></a>配置 react-router</h1><p>安装 react-router，进行路径配置。（这里以 V6 为准）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><p>在 src 文件夹下新建文件夹 route，创建 index.tsx 文件。内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Routes, Route &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import &#123; Suspense, lazy &#125; from &quot;react&quot;;</span><br><span class="line">import TopBar from &quot;pages/TopBar&quot;;</span><br><span class="line">import Home from &quot;pages/Home&quot;;</span><br><span class="line"></span><br><span class="line">const ReduxExample = lazy(() =&gt; import(&quot;pages/ReduxExample&quot;));</span><br><span class="line">const RequestExample = lazy(() =&gt; import(&quot;pages/RequestExample&quot;));</span><br><span class="line"></span><br><span class="line">const MyRouter = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Routes&gt;</span><br><span class="line">      &lt;Route path=&quot;/&quot; element=&#123;&lt;TopBar /&gt;&#125;&gt;</span><br><span class="line">        &lt;Route index element=&#123;&lt;Home /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;home&quot; element=&#123;&lt;Home /&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &lt;Route</span><br><span class="line">          path=&quot;redux&quot;</span><br><span class="line">          element=&#123;</span><br><span class="line">            &lt;Suspense fallback=&#123;&lt;&gt;Loading...&lt;/&gt;&#125;&gt;</span><br><span class="line">              &lt;ReduxExample /&gt;</span><br><span class="line">            &lt;/Suspense&gt;</span><br><span class="line">          &#125;</span><br><span class="line">        &gt;&lt;/Route&gt;</span><br><span class="line">        &lt;Route</span><br><span class="line">          path=&quot;request&quot;</span><br><span class="line">          element=&#123;</span><br><span class="line">            &lt;Suspense fallback=&#123;&lt;&gt;Loading...&lt;/&gt;&#125;&gt;</span><br><span class="line">              &lt;RequestExample /&gt;</span><br><span class="line">            &lt;/Suspense&gt;</span><br><span class="line">          &#125;</span><br><span class="line">        &gt;&lt;/Route&gt;</span><br><span class="line">        &lt;Route</span><br><span class="line">          path=&quot;*&quot;</span><br><span class="line">          element=&#123;</span><br><span class="line">            &lt;main style=&#123;&#123; padding: &quot;1rem&quot; &#125;&#125;&gt;</span><br><span class="line">              &lt;p&gt;404 Not Found&lt;/p&gt;</span><br><span class="line">            &lt;/main&gt;</span><br><span class="line">          &#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br><span class="line">    &lt;/Routes&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default MyRouter;</span><br></pre></td></tr></table></figure><p>在 src 目录下的 index.tsx 中引入 <strong>BrowserRouter</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserRouter &#125; from &quot;react-router-dom&quot;;</span><br></pre></td></tr></table></figure><p>代码修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;</span><br><span class="line">  &lt;/React.StrictMode&gt;,</span><br><span class="line">  document.getElementById(&quot;root&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>修改 src 目录下的 APP.tsx，引入默认样式以及路由配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import MyRouter from &quot;routes&quot;;</span><br><span class="line">import &#123; GlobalStyle &#125; from &quot;./globalStyle&quot;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;GlobalStyle&gt;&lt;/GlobalStyle&gt;</span><br><span class="line">      &lt;MyRouter /&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>在 src 文件夹下新建文件夹 pages，用于存储页面。</p><p>文件夹 pages 下新建文件夹 RequestExample、ReduxExample、TopBar、Home，文件内容如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ReduxExample/index.tsx</span><br><span class="line">import &#123; memo &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const ReduxExample = () =&gt; &#123;</span><br><span class="line">  return &lt;h1&gt;ReduxExample&lt;/h1&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default memo(ReduxExample);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// RequestExample/index.tsx</span><br><span class="line">import &#123; memo &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const RequestExample = () =&gt; &#123;</span><br><span class="line">  return &lt;h1&gt;RequestExample&lt;/h1&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default memo(RequestExample);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Home/index.tsx</span><br><span class="line">import &#123; memo &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const Home = () =&gt; &#123;</span><br><span class="line">  return &lt;h1&gt;HomePage&lt;/h1&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default memo(Home);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// TopBar/index.tsx</span><br><span class="line">import &#123; memo, useEffect &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; NavLink, Outlet, useLocation, useNavigate &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import &#123; NavBar, TopbarContainer &#125; from &quot;./style&quot;;</span><br><span class="line"></span><br><span class="line">const TopBar = () =&gt; &#123;</span><br><span class="line">  const &#123; pathname &#125; = useLocation();</span><br><span class="line">  const navigate = useNavigate();</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    if (pathname === &quot;/&quot;) &#123;</span><br><span class="line">      navigate(&quot;/home&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [pathname, navigate]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;TopbarContainer&gt;</span><br><span class="line">      &lt;div&gt;TopBar&lt;/div&gt;</span><br><span class="line">      &lt;NavBar&gt;</span><br><span class="line">        &lt;NavLink</span><br><span class="line">          to=&quot;/home&quot;</span><br><span class="line">          className=&#123;(&#123; isActive &#125;) =&gt; (isActive ? &quot;selected&quot; : &quot;unselected&quot;)&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          Home Page</span><br><span class="line">        &lt;/NavLink&gt;</span><br><span class="line">        &lt;NavLink</span><br><span class="line">          to=&quot;/redux&quot;</span><br><span class="line">          className=&#123;(&#123; isActive &#125;) =&gt; (isActive ? &quot;selected&quot; : &quot;unselected&quot;)&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          Redux Example</span><br><span class="line">        &lt;/NavLink&gt;</span><br><span class="line">        &lt;NavLink</span><br><span class="line">          to=&quot;/request&quot;</span><br><span class="line">          className=&#123;(&#123; isActive &#125;) =&gt; (isActive ? &quot;selected&quot; : &quot;unselected&quot;)&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          Request Example</span><br><span class="line">        &lt;/NavLink&gt;</span><br><span class="line">      &lt;/NavBar&gt;</span><br><span class="line">      &lt;Outlet /&gt;</span><br><span class="line">    &lt;/TopbarContainer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default memo(TopBar);</span><br></pre></td></tr></table></figure><p>上面这段代码的 <code>&lt;Outlet /&gt;</code> 是为了能够渲染下一级的路由。因为目前 react-router-dom@6 在 ts 环境下不支持重定向，所以要先用 <code>useEffect</code> 强制重定向。</p><p>给 TopBar 加上一些简单的样式，方便我们查看。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TopBar/style.ts</span></span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TopbarContainer = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  .selected &#123;</span></span><br><span class="line"><span class="string">    color: red;</span></span><br><span class="line"><span class="string">    text-decoration: underline;</span></span><br><span class="line"><span class="string">    cursor: pointer;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  .unselected &#123;</span></span><br><span class="line"><span class="string">    color: black;</span></span><br><span class="line"><span class="string">    cursor: default;</span></span><br><span class="line"><span class="string">    &amp;:hover &#123;</span></span><br><span class="line"><span class="string">      text-decoration: underline;</span></span><br><span class="line"><span class="string">      cursor: pointer;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> NavBar = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  flex-direction: column;</span></span><br><span class="line"><span class="string">  gap: 10px;</span></span><br><span class="line"><span class="string">  margin: 20px 0;</span></span><br><span class="line"><span class="string">  border: 1px solid black;</span></span><br><span class="line"><span class="string">  width: 100px;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h1 id="配置-redux"><a href="#配置-redux" class="headerlink" title="配置 redux"></a>配置 redux</h1><p>首先安装依赖，这里处理异步使用的是 redux-thunk。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux redux-thunk react-redux immer</span><br></pre></td></tr></table></figure><p>在 src 文件夹下新建文件夹 store，再在 store 文件夹中新建文件 index.ts 和 reducer.ts。内容如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> reduxExampleReducer &#125; <span class="keyword">from</span> <span class="string">&quot;../pages/ReduxExample/store/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> RootState &#123;</span><br><span class="line">  <span class="attr">reduxExample</span>: reduxExampleReducer.state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">  <span class="attr">reduxExample</span>: reduxExampleReducer.reducer,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, compose, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&quot;redux-thunk&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&quot;./reducer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> windowWithReduxExtension = Window &amp;</span><br><span class="line">  <span class="keyword">typeof</span> globalThis &amp; &#123;</span><br><span class="line">    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: <span class="built_in">Function</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> composeEnhancers =</span><br><span class="line">  (<span class="built_in">window</span> <span class="keyword">as</span> windowWithReduxExtension).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ||</span><br><span class="line">  compose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>在 App.tsx 中注入 store。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Provider &#125; from &quot;react-redux&quot;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;GlobalStyle&gt;&lt;/GlobalStyle&gt;</span><br><span class="line">      &lt;MyRouter /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>为了验证 Redux 配置是否正确，我们使用经典的 Counter 来验证。</p><p>在 src 下创建文件夹 components，再在 components 文件夹下新建文件夹 Counter。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// Counter/index.tsx</span><br><span class="line">import &#123; memo &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">interface CounterProps &#123;</span><br><span class="line">  count: number;</span><br><span class="line">  increment: () =&gt; void;</span><br><span class="line">  decrement: () =&gt; void;</span><br><span class="line">  reset: () =&gt; void;</span><br><span class="line">  incrementAsync: () =&gt; void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Counter = (&#123;</span><br><span class="line">  count,</span><br><span class="line">  increment,</span><br><span class="line">  decrement,</span><br><span class="line">  reset,</span><br><span class="line">  incrementAsync,</span><br><span class="line">&#125;: CounterProps) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div&gt;Count: &#123;count&#125;&lt;/div&gt;</span><br><span class="line">      &lt;button onClick=&#123;increment&#125;&gt;+1&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;decrement&#125;&gt;-1&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;reset&#125;&gt;Reset&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;incrementAsync&#125;&gt;+1 (1s delay)&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default memo(Counter);</span><br></pre></td></tr></table></figure><p>在 ReduxExample 目录下创建文件夹 store，在 store 文件夹下新建文件 index.ts、store.ts、constants.ts、actions.ts。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/constants.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">&quot;INCREMENT&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">&quot;DECREMENT&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RESET = <span class="string">&quot;RESET&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT_ASYNC = <span class="string">&quot;INCREMENT_ASYNC&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/actions.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionTypes <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Dispatch &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> increment = <span class="function">() =&gt;</span> (&#123; <span class="attr">type</span>: actionTypes.INCREMENT &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> decrement = <span class="function">() =&gt;</span> (&#123; <span class="attr">type</span>: actionTypes.DECREMENT &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reset = <span class="function">() =&gt;</span> (&#123; <span class="attr">type</span>: actionTypes.RESET &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> incrementAsync = <span class="function">() =&gt;</span> <span class="function">(<span class="params">dispatch: Dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      <span class="attr">type</span>: actionTypes.INCREMENT_ASYNC,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/reducer.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionTypes <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AnyAction &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; produce &#125; <span class="keyword">from</span> <span class="string">&quot;immer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> CounterState &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultState: CounterState = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reduxExampleReducer = produce(</span><br><span class="line">  <span class="function">(<span class="params">state: CounterState, action: AnyAction</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> actionTypes.INCREMENT:</span><br><span class="line">      <span class="keyword">case</span> actionTypes.INCREMENT_ASYNC:</span><br><span class="line">        state.count = state.count + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> actionTypes.DECREMENT:</span><br><span class="line">        state.count = state.count - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> actionTypes.RESET:</span><br><span class="line">        state.count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  defaultState</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> reducer <span class="keyword">from</span> <span class="string">&quot;./reducer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">&quot;./actions&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; reducer, actions, constants &#125;;</span><br></pre></td></tr></table></figure><p>修改 ReduxExample，进行测试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import Counter from &quot;components/Counter&quot;;</span><br><span class="line">import &#123; memo &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; useDispatch, useSelector &#125; from &quot;react-redux&quot;;</span><br><span class="line">import &#123; RootState &#125; from &quot;store/reducer&quot;;</span><br><span class="line">import &#123; actions &#125; from &quot;./store&quot;;</span><br><span class="line"></span><br><span class="line">const ReduxExample = () =&gt; &#123;</span><br><span class="line">  const &#123; count &#125; = useSelector((state: RootState) =&gt; (&#123;</span><br><span class="line">    count: state.reduxExample.count,</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  const dispatch = useDispatch();</span><br><span class="line"></span><br><span class="line">  const increment = () =&gt; &#123;</span><br><span class="line">    dispatch(actions.increment());</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  const decrement = () =&gt; &#123;</span><br><span class="line">    dispatch(actions.decrement());</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  const reset = () =&gt; &#123;</span><br><span class="line">    dispatch(actions.reset());</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  const incrementAsync = () =&gt; &#123;</span><br><span class="line">    dispatch(actions.incrementAsync());</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;ReduxExample&lt;/h1&gt;</span><br><span class="line">      &lt;Counter</span><br><span class="line">        count=&#123;count&#125;</span><br><span class="line">        increment=&#123;increment&#125;</span><br><span class="line">        decrement=&#123;decrement&#125;</span><br><span class="line">        reset=&#123;reset&#125;</span><br><span class="line">        incrementAsync=&#123;incrementAsync&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default memo(ReduxExample);</span><br></pre></td></tr></table></figure><h1 id="配置-json-server"><a href="#配置-json-server" class="headerlink" title="配置 json-server"></a>配置 json-server</h1><p>json-server 是我认为的一种比较不错的 mock 数据方法。</p><p>如果还没有安装的话先全局一下安装 json-server。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g json-server</span><br></pre></td></tr></table></figure><p>在根目录下新建文件夹 <code>__mock__</code>，然后在文件夹下新建文件 <code>db.json</code>。文件内容为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;subjects&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;html&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;css&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;js&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">200</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 3000 端口已经被我们的页面占用了，所以我们要换一个端口运行命令启动 json-server。为了便捷我们可以在 <code>package.json</code> 中加入新的脚本命令。</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220123172231.png"></p><p>配置完成后，运行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn server</span><br></pre></td></tr></table></figure><p>即可在 <a href="http://localhost:3001/">http://localhost:3001</a> 开启 json-server。</p><p>在浏览器输入路径 <a href="http://localhost:3001/subjects">http://localhost:3001/subjects</a> ，可以看到 <code>db.json</code> 中的数据。</p><h1 id="配置-axios"><a href="#配置-axios" class="headerlink" title="配置 axios"></a>配置 axios</h1><p>执行命令安装 axios。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add axios</span><br></pre></td></tr></table></figure><p>在 src 目录下新建文件夹 api，并在 api 文件夹下新建文件 config.ts、request.ts。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api/config.ts</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> baseUrl = <span class="string">&quot;http://localhost:3001&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axiosInstance = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: baseUrl,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; axiosInstance &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; axiosInstance &#125; <span class="keyword">from</span> <span class="string">&quot;./config&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getSubjectsRequest = &lt;T=any&gt;() =&gt; &#123;</span><br><span class="line">  return axiosInstance.get&lt;T&gt;(&quot;/subjects&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编写组件 SubjectList 来验证 axios 配置。</p><p>在 components 文件夹下新建文件夹 SubjectList。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// SubjectList.tsx</span><br><span class="line">import &#123; memo &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">interface Subject &#123;</span><br><span class="line">  id: number;</span><br><span class="line">  title: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface SubjectListProps &#123;</span><br><span class="line">  list: Subject[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const SubJectList = (&#123; list &#125;: SubjectListProps) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;list.map((item) =&gt; (</span><br><span class="line">        &lt;li key=&#123;item.id&#125;&gt;</span><br><span class="line">          &#123;item.id&#125; - &#123;item.title&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default memo(SubJectList);</span><br></pre></td></tr></table></figure><p>在 SubjectList 文件夹下新建 store 文件夹。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/constants.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CHANGE_SUBJECTS = <span class="string">&quot;CHANGE_SUBJECTS&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/reducer.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionTypes <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AnyAction &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> produce <span class="keyword">from</span> <span class="string">&quot;immer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Subject &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> RequestExampleState &#123;</span><br><span class="line">  <span class="attr">subjectList</span>: Subject[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultState: RequestExampleState = &#123;</span><br><span class="line">  <span class="attr">subjectList</span>: [],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> requestExampleReducer = produce(</span><br><span class="line">  <span class="function">(<span class="params">state: RequestExampleState, action: AnyAction</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> actionTypes.CHANGE_SUBJECTS:</span><br><span class="line">        state.subjectList = action.data;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  defaultState</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/actions.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionTypes <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getSubjectsRequest &#125; <span class="keyword">from</span> <span class="string">&quot;api/request&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Dispatch &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RequestExampleState &#125; <span class="keyword">from</span> <span class="string">&quot;./reducer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> changeSubjectList = <span class="function">(<span class="params">data: RequestExampleState</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">type</span>: actionTypes.CHANGE_SUBJECTS,</span><br><span class="line">  data,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getSubjectList = <span class="function">() =&gt;</span> <span class="function">(<span class="params">dispatch: Dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">  getSubjectsRequest&lt;&#123; <span class="attr">list</span>: RequestExampleState &#125;&gt;()</span><br><span class="line">    .then(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> action = changeSubjectList(data.list);</span><br><span class="line">      dispatch(action);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;subjects 传输错误&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> reducer <span class="keyword">from</span> <span class="string">&quot;./reducer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">&quot;./actions&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; reducer, actions, constants &#125;;</span><br></pre></td></tr></table></figure><p>然后把 reducer 导入全局：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/reducer.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> reduxExampleReducer &#125; <span class="keyword">from</span> <span class="string">&quot;pages/ReduxExample/store/&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> requestExampleReducer &#125; <span class="keyword">from</span> <span class="string">&quot;pages/RequestExample/store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> RootState &#123;</span><br><span class="line">  <span class="attr">requestExample</span>: requestExampleReducer.RequestExampleState;</span><br><span class="line">  reduxExample: reduxExampleReducer.CounterState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">  <span class="attr">reduxExample</span>: reduxExampleReducer.reduxExampleReducer,</span><br><span class="line">  <span class="attr">requestExample</span>: requestExampleReducer.requestExampleReducer,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改 RequestExample/index.tsx，内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import SubjectList from &quot;components/SubjectList&quot;;</span><br><span class="line">import &#123; memo, useEffect &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; useDispatch, useSelector &#125; from &quot;react-redux&quot;;</span><br><span class="line">import &#123; RootState &#125; from &quot;store/reducer&quot;;</span><br><span class="line">import &#123; actions &#125; from &quot;./store&quot;;</span><br><span class="line"></span><br><span class="line">const RequestExample = () =&gt; &#123;</span><br><span class="line">  const &#123; list &#125; = useSelector((state: RootState) =&gt; (&#123;</span><br><span class="line">    list: state.requestExample.subjectList,</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  const dispatch = useDispatch();</span><br><span class="line"></span><br><span class="line">  const getSubjectList = () =&gt; &#123;</span><br><span class="line">    dispatch(actions.getSubjectList());</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    if (!list.length) &#123;</span><br><span class="line">      getSubjectList();</span><br><span class="line">    &#125;</span><br><span class="line">    // eslint-disable-next-line react-hooks/exhaustive-deps</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;RequestExample&lt;/h1&gt;</span><br><span class="line">      &lt;SubjectList list=&#123;list&#125; /&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default memo(RequestExample);</span><br></pre></td></tr></table></figure><p>完成任务！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文代码对应&lt;a href=&quot;https://github.com/Flower-F/react-common-setttings&quot;&gt;仓库地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文主要包括以下内容配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;creat-react-app 创建项目&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    
    <category term="react" scheme="https://flower-f.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>N 数之和</title>
    <link href="https://flower-f.github.io/2022/01/22/sum-questions/"/>
    <id>https://flower-f.github.io/2022/01/22/sum-questions/</id>
    <published>2022-01-22T09:05:25.000Z</published>
    <updated>2022-01-22T09:10:16.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.has(target - nums[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> [i, map.get(target - nums[i])];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      map.set(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/">三数之和</a></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  nums = nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环遍历第一个数，转变为两数之和</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 剪枝，如果这一项大于 0， 后面的必然也大于 0</span></span><br><span class="line">    <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当前遍历的数字与上一个遍历的数字相同，为避免重复所以跳过</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 双指针</span></span><br><span class="line">    <span class="keyword">let</span> left = i + <span class="number">1</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[left] + nums[right] + nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 两个指针之和太大，右指针左移</span></span><br><span class="line">        right--;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[left] + nums[right] + nums[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 两个指针之和太小，左指针右移</span></span><br><span class="line">        left++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 找到了和为零的组合</span></span><br><span class="line">        res.push([nums[i], nums[left], nums[right]]);</span><br><span class="line">        <span class="comment">// 左右指针向内缩小</span></span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">        <span class="comment">// 去重</span></span><br><span class="line">        <span class="comment">// 例如：[-4,1,1,1,2,3,3,3], i=0, left=1, right=5</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left - <span class="number">1</span>] === nums[left]) left++;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right + <span class="number">1</span>] === nums[right]) right--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;两数之和&quot;&gt;&lt;a href=&quot;#两数之和&quot; class=&quot;headerlink&quot; title=&quot;两数之和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum/&quot;&gt;两数之和&lt;/a&gt;&lt;/h1&gt;&lt;figure c</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://flower-f.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>字节前端青训营第 6 天（下）</title>
    <link href="https://flower-f.github.io/2022/01/21/byte-fe-training-6-part-two/"/>
    <id>https://flower-f.github.io/2022/01/21/byte-fe-training-6-part-two/</id>
    <published>2022-01-21T06:05:55.000Z</published>
    <updated>2022-01-22T02:24:29.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>Cross-Site Scripting，跨站脚本攻击。指攻击者通过某种方式把恶意脚本注入你写的页面。</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121214536.png"></p><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><ul><li>开发者盲目相信用户提交的内容</li><li>直接把用户的提交转换成了 DOM，如 <code>document.write(xxx)</code>、<code>elem.innerHTML = xxx</code></li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>通常难以从 UI 上感知</li><li>窃取用户信息（cookie / token）</li><li>因为可以操作 js，所以可以绘制 UI，诱骗用户填写表单</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; content, id &#125; = ctx.request.body;</span><br><span class="line">  <span class="comment">// 没有对 content 进行过滤</span></span><br><span class="line">  <span class="keyword">await</span> db.save(&#123;</span><br><span class="line">    content,</span><br><span class="line">    id</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; content &#125; = <span class="keyword">await</span> db.query(&#123;</span><br><span class="line">    <span class="attr">id</span>: ctx.query.id</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 又没有对 content 进行过滤</span></span><br><span class="line">  ctx.body = <span class="string">`&lt;div&gt;<span class="subst">$&#123;content&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导致攻击：</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121215645.png"></p><h2 id="Stored-XSS-存储型"><a href="#Stored-XSS-存储型" class="headerlink" title="Stored XSS 存储型"></a>Stored XSS 存储型</h2><ul><li>恶意脚本被保存在数据库中</li><li>访问页面 -&gt; 读数据 -&gt; 被攻击</li><li>危害最大，对全部用户可见</li></ul><p>比如说一个用户在视频中插入一个 XSS 攻击，然后某一刻脚本被启动了，此时所有的在浏览这个页面的用户都会被脚本攻击，造成信息泄露。</p><h2 id="Reflected-XSS-反射型"><a href="#Reflected-XSS-反射型" class="headerlink" title="Reflected XSS 反射型"></a>Reflected XSS 反射型</h2><p>不涉及数据库，而是从 URL 进行攻击</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121220034.png"></p><p>把字段直接生成 HTML 字段，然后被成功攻击</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121220057.png"></p><h2 id="Dom-based-XSS"><a href="#Dom-based-XSS" class="headerlink" title="Dom-based XSS"></a>Dom-based XSS</h2><p>不需要服务器参与，恶意攻击的发起与执行都在浏览器完成。</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121220034.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121220433.png"></p><h2 id="Mutation-XSS"><a href="#Mutation-XSS" class="headerlink" title="Mutation XSS"></a>Mutation XSS</h2><p>利用了浏览器渲染 DOM 的特性，对于不同的浏览器执行会有区别。</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121220622.png"></p><p>代码会被渲染为：</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121220828.png"></p><p>又由于 src 属性不符合规范，然后会触发 <code>onerror</code> 事件，也就完成了 XSS 攻击。</p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>Cross-site request forgery，跨站请求伪造</p><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ul><li>用户不知情</li><li>利用用户权限</li><li>构造指定的 HTTP 请求，窃取或修改用户的敏感信息</li></ul><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121221305.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121221625.png"></p><p>在这个例子中，用户并没有直接请求银行，但是这个请求却被成功执行了，这就是一个经典的 CSRF 攻击。</p><h1 id="Injection-注入"><a href="#Injection-注入" class="headerlink" title="Injection 注入"></a>Injection 注入</h1><h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121221710.png"></p><p>删库跑路示例：</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121223501.png"></p><p>其余注入：</p><ul><li>CLI</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121224200.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121224547.png"></p><p>因为没有过滤导致成功删除跑路</p><ul><li>读取 + 修改</li></ul><p>以 Nginx 为例，如果用户可以读取 Nginx 的配置文件，就能把我们的网站转到另一个网站</p><ul><li>SSRF Server-Side Request Forgery（严格来说不算注入）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121232106.png"></p><h1 id="DOS"><a href="#DOS" class="headerlink" title="DOS"></a>DOS</h1><p>Denial of Service，服务拒绝。通过某种方式构造特定的请求，导致服务器资源被显著消耗，来不及响应更多的请求，导致请求积压，进而引发雪崩效应。</p><h2 id="Regex-DOS"><a href="#Regex-DOS" class="headerlink" title="Regex DOS"></a>Regex DOS</h2><h2 id="正则贪婪模式"><a href="#正则贪婪模式" class="headerlink" title="正则贪婪模式"></a>正则贪婪模式</h2><p><strong>书写正则的时候是否写 ?</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121232454.png"></p><p>这里的第一行就是贪婪模式</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121232755.png"></p><p>因为贪婪引发回溯</p><h2 id="DDOS-分布式拒绝服务"><a href="#DDOS-分布式拒绝服务" class="headerlink" title="DDOS 分布式拒绝服务"></a>DDOS 分布式拒绝服务</h2><p>短时间内，收到大量来自僵尸设备的请求流量，服务器不能及时完成全部的请求，导致请求堆积，进而引发雪崩效应，无法响应新的请求。</p><p><em>不搞复杂的，量大就完事儿</em></p><h3 id="攻击特点"><a href="#攻击特点" class="headerlink" title="攻击特点"></a>攻击特点</h3><ul><li>直接访问 IP 而不是域名</li><li>使用任意的 API</li><li>消耗掉大量的带宽，直至耗尽</li></ul><h3 id="洪水攻击"><a href="#洪水攻击" class="headerlink" title="洪水攻击"></a>洪水攻击</h3><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121233159.png"></p><p>攻击者发起大量的 TCP 请求，然后就会产生大量的 SYN，发送给服务器。然后服务器就会产生大量的 ACK 和 SYN 给攻击者。但是，攻击者不会返回第三次 ACK，进而导致三次握手失败，连接无法被释放，于是很快就会到达最大连接次数，所有的新请求就无法被响应。</p><h1 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h1><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121233703.png"></p><p>为什么中间人攻击可以成立？</p><ul><li>HTTP 报文使用明文方式发送，可能被第三方窃听。</li><li>HTTP 报文可能被第三方拦截后修改通信内容，接收方没有办法发现报文内容的修改。</li><li>HTTP 还存在认证的问题，第三方可以冒充他人参与通信。</li></ul><h1 id="XSS-防御"><a href="#XSS-防御" class="headerlink" title="XSS 防御"></a>XSS 防御</h1><ul><li>永远不要信任用户提交的任何内容</li><li>永远不要把用户提交的内容直接转换成 DOM，而应该转换成字符串</li><li>主流的框架（React &amp; Vue）其实默认会防御 XSS 攻击</li></ul><p><strong>如果有需求不讲武德，必须动态生成 DOM 呢？</strong></p><ul><li>如果要把 string 直接生成 DOM，必须要对 string 进行转义</li><li>如果允许上传 SVG 文件，需要对 SVG 文件进行扫描，因为 SVG 中允许嵌套 script 标签</li><li>如果允许用户自定义跳转链接，必须进行检查过滤<br><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121234430.png"><br>像上图这样，用户可以插入 js 代码</li><li>如果允许自定义样式，必须进行检查过滤<br><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121234605.png"></li></ul><h1 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h1><p>Content Security Policy</p><ul><li>允许开发者定义哪些源（域名）是安全的</li><li>来自安全源的脚本可以执行，否则直接报错</li><li>对于 eval 或内联的脚本直接报错</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121235018.png"></p><p>第一行：只允许同源；第二行：除了同源之外，还另外允了 domain.com</p><p>我们也可以在浏览器端进行设置：</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121235151.png"></p><h1 id="CSRF-防御"><a href="#CSRF-防御" class="headerlink" title="CSRF 防御"></a>CSRF 防御</h1><p>只要我们限制请求的来源，就可以限制伪造请求。可以根据 Origin 或者 Referer 判断。</p><h2 id="token-防御机制"><a href="#token-防御机制" class="headerlink" title="token 防御机制"></a>token 防御机制</h2><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121235423.png"></p><ul><li>token 必须和具体的用户绑定，才能确保不会被其它的用户所利用。</li><li>token 必须有过期时间，否则万一 token 泄露，之前的所有请求都可以被利用</li></ul><h2 id="iframe-攻击"><a href="#iframe-攻击" class="headerlink" title="iframe 攻击"></a>iframe 攻击</h2><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121235650.png"></p><p>首先在视觉上，让 button 覆盖住 iframe，然后用户就看不出来了。接着通过 button 的设置导致点击事件穿透了，然后传递给了 iframe，iframe 中的请求没有跨域，因此可以完成攻击。</p><p>可以设置 HTTP 响应头 <code>X-Frame-Options: DENY/SAMEORIGIN</code> （不允许加载 iframe 或只允许加载同源的 iframe）</p><h2 id="CSRF-反模式"><a href="#CSRF-反模式" class="headerlink" title="CSRF 反模式"></a>CSRF 反模式</h2><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220122000110.png"></p><p>GET !== GET + POST</p><p>一旦被攻击，信息不单止可能泄露，甚至还会被篡改。</p><h2 id="SameSite-Cookie"><a href="#SameSite-Cookie" class="headerlink" title="SameSite Cookie"></a>SameSite Cookie</h2><p>限制 cookie 的 domain 属性。我页面的 cookie 只能为我所用，只有同域才能使用这个 cookie，第三方服务的请求不能带上我页面的 cookie。</p><p><strong>但是如果服务依赖于第三方的 cookie 怎么办？</strong></p><p>比如内嵌了一个 b 站的播放器，需要识别用户的登录状态。</p><p>可以设置 <code>SetCookie: SameSite=None; Secure;</code></p><p>即不限制 same site，但是必须确保 cookie 是安全的（只能通过 HTTPS 传输）。</p><p><strong>SameSite VS 同源策略</strong>：SameSite 主要针对 cookie，同源策略 针对的是请求的资源。</p><h2 id="防御-CSRF-的正确姿势"><a href="#防御-CSRF-的正确姿势" class="headerlink" title="防御 CSRF 的正确姿势"></a>防御 CSRF 的正确姿势</h2><p>用 Node 做一个中间件防范攻击。</p><h1 id="Injection-防御"><a href="#Injection-防御" class="headerlink" title="Injection 防御"></a>Injection 防御</h1><h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><p>对 SQL 语句做一些 prepare 处理</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220122095147.png"></p><h2 id="其余注入"><a href="#其余注入" class="headerlink" title="其余注入"></a>其余注入</h2><ul><li>命令不要通过 sudo 执行，不要给 root 权限</li><li>拒绝像 rm 这种极其危险的行为</li><li>对 URL 类型参数进行协议、域名、IP 等的限制</li></ul><h1 id="DOS-防御"><a href="#DOS-防御" class="headerlink" title="DOS 防御"></a>DOS 防御</h1><h2 id="Regex-DOS-1"><a href="#Regex-DOS-1" class="headerlink" title="Regex DOS"></a>Regex DOS</h2><ul><li>避免写出贪婪的正则匹配</li><li>扫描代码找出里面的所有正则，然后做正则性能测试</li><li>拒绝使用用户提供的正则</li></ul><h2 id="DDOS"><a href="#DDOS" class="headerlink" title="DDOS"></a>DDOS</h2><p>过滤：</p><ul><li>负载均衡</li><li>API 网关</li></ul><p>抗量：</p><ul><li>快速自动扩容</li><li>非核心服务降级</li></ul><h1 id="传输层防御"><a href="#传输层防御" class="headerlink" title="传输层防御"></a>传输层防御</h1><p>使用 HTTPS，其中 HTTP3 内置了 TLS</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/31121131121.png"></p><h1 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a>HSTS</h1><p>HTTP Strict Transport Security，HTTO 严格传输安全协议。</p><p>HSTS 的作用是强制客户端（如浏览器）使用 HTTPS 与服务器创建连接。服务器开启 HSTS 的方法是，当客户端通过 HTTPS 发出请求时，在服务器返回的超文本传输协议（HTTP）响应头中包含 Strict-Transport-Security 字段。非加密传输时设置的 HSTS 字段无效。<br>比如，<a href="https://example.com/">https://example.com/</a> 的响应头含有 Strict-Transport-Security: max-age=31536000; includeSubDomains。这意味着两点：</p><ul><li>在接下来的 31536000 秒（即一年）中，浏览器向 example.com 或其子域名发送 HTTP 请求时，必须采用 HTTPS 来发起连接。比如，用户点击超链接或在地址栏输入 <a href="http://www.example.com/">http://www.example.com/</a> ，浏览器应当自动将 http 转写成 https，然后直接向 <a href="https://www.example.com/">https://www.example.com/</a> 发送请求。</li><li>在接下来的一年中，如果 example.com 服务器发送的 TLS 证书无效，用户不能忽略浏览器警告继续访问网站。</li></ul><h1 id="SRI"><a href="#SRI" class="headerlink" title="SRI"></a>SRI</h1><p>Subresource Integrity，子资源完整性。</p><p>Web 性能优化中很重要的一点是加快请求完成速度，让可缓存的资源走 CDN 是最通用的做法。CDN 服务提供商通过分布在各地的节点，让用户从最近的节点加载内容，大幅提升速度。但是 CDN 的安全性一直是一个风险点：对于网站来说，让请求从第三方服务器经过，由第三方响应，安全方面肯定不如自己服务器可控。</p><p>我们知道 CSP（Content Security Policy） 的外链白名单机制可以在现代浏览器下减小 XSS 风险。但针对 CDN 内容被篡改而导致的 XSS，CSP 并不能防范，因为网站所使用的 CDN 域名，肯定在 CSP 白名单之中。这时候，SRI 就应运而生了。</p><p>它通过对比 hash 值，来确保文件的安全性，可以在一定程度上防范 XSS 攻击。</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220122101625.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/a&gt;XSS&lt;/h1&gt;&lt;p&gt;Cross-Site Scripting，跨站脚本攻击。指攻击者通过某种方式把恶意脚本注入你写的页面。&lt;/p&gt;
&lt;p&gt;&lt;img sr</summary>
      
    
    
    
    
    <category term="web安全" scheme="https://flower-f.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>字节前端青训营第 6 天（上）</title>
    <link href="https://flower-f.github.io/2022/01/21/byte-fe-training-6-part-one/"/>
    <id>https://flower-f.github.io/2022/01/21/byte-fe-training-6-part-one/</id>
    <published>2022-01-21T02:02:29.000Z</published>
    <updated>2022-01-21T06:54:09.435Z</updated>
    
    <content type="html"><![CDATA[<p>这部分的入门门槛太高了，等我先把基础学好了再研究吧。</p><h1 id="现代图形系统"><a href="#现代图形系统" class="headerlink" title="现代图形系统"></a>现代图形系统</h1><ul><li>光栅 Raster：几乎所有的现代图形系统都是基于光栅来绘制图形的，光栅就是指构成图像的像素阵列。</li><li>像素 Pixel：一个像素对应图像上的一个点，它通常保存图像上的某个具体位置的颜色等信息。</li><li>帧缓存 Frame Buffer：在绘图过程中，像素信息被存放于帧缓存中，帧缓存是一块内存地址。</li><li>CPU (Central Processing Unit)：中央处理单元，负责逻辑计算。</li><li>GPU (Graphics Processing Unit)：图形处理单元，负责图形计算。</li></ul><h1 id="CPU-VS-GPU"><a href="#CPU-VS-GPU" class="headerlink" title="CPU VS GPU"></a>CPU VS GPU</h1><h1 id="WebGL-Startup"><a href="#WebGL-Startup" class="headerlink" title="WebGL Startup"></a>WebGL Startup</h1><ol><li>创建 WebGL 上下文（Canvas）</li><li>创建 WebGL Program（顶点选择器、片源选择器）</li><li>将数据存入缓冲区（比如顶点颜色）</li><li>将缓冲区数据读取到 GPU</li><li>GPU 执行 WebGL 程序，输出结果</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这部分的入门门槛太高了，等我先把基础学好了再研究吧。&lt;/p&gt;
&lt;h1 id=&quot;现代图形系统&quot;&gt;&lt;a href=&quot;#现代图形系统&quot; class=&quot;headerlink&quot; title=&quot;现代图形系统&quot;&gt;&lt;/a&gt;现代图形系统&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;光栅 Raster：几乎所有</summary>
      
    
    
    
    
    <category term="webgl" scheme="https://flower-f.github.io/tags/webgl/"/>
    
  </entry>
  
  <entry>
    <title>字节前端青训营第 5 天（下）</title>
    <link href="https://flower-f.github.io/2022/01/20/byte-fe-training-5-part-two/"/>
    <id>https://flower-f.github.io/2022/01/20/byte-fe-training-5-part-two/</id>
    <published>2022-01-20T06:00:28.000Z</published>
    <updated>2022-01-21T06:54:30.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul><li>前端工程化</li><li>服务端</li><li>Electron 跨端桌面应用</li></ul><h1 id="编写-Http-Server"><a href="#编写-Http-Server" class="headerlink" title="编写 Http Server"></a>编写 Http Server</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Listening on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收请求</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> bufs = [];</span><br><span class="line">  req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">buf</span>) =&gt;</span> &#123;</span><br><span class="line">    bufs.push(buf);</span><br><span class="line">  &#125;)</span><br><span class="line">  req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> buf = Buffer.concat(bufs).toString(<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">JSON</span>.parse(buf);</span><br><span class="line">      <span class="keyword">const</span> msg = result.msg || <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">      <span class="keyword">const</span> responseMsg = &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">`receive: <span class="subst">$&#123;msg&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(responseMsg));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      res.end(<span class="string">&#x27;invalid json data&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Listening on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发请求</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> body = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&#x27;Hello Byte Dance&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = http.request(<span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> bufs = [];</span><br><span class="line">  res.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">buf</span> =&gt;</span> &#123;</span><br><span class="line">    bufs.push(buf);</span><br><span class="line">  &#125;)</span><br><span class="line">  res.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> buf = Buffer.concat(bufs);</span><br><span class="line">    <span class="keyword">const</span> json = <span class="built_in">JSON</span>.parse(buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;json msg is: &#x27;</span>, json.msg);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">req.end(body);</span><br></pre></td></tr></table></figure><h2 id="静态文件服务"><a href="#静态文件服务" class="headerlink" title="静态文件服务"></a>静态文件服务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> folderPath = path.resolve(__dirname, <span class="string">&#x27;./static&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> info = url.parse(req.url);</span><br><span class="line">  <span class="keyword">const</span> filePath = path.resolve(folderPath, <span class="string">&#x27;.&#x27;</span> + info.pathname);</span><br><span class="line">  <span class="keyword">const</span> fileStream = fs.createReadStream(filePath);</span><br><span class="line"></span><br><span class="line">  fileStream.pipe(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Listening on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> React = <span class="built_in">require</span>(<span class="string">&#x27;react&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ReactDomServer = <span class="built_in">require</span>(<span class="string">&#x27;react-dom/server&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> React.createElement(<span class="string">&#x27;h1&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">children</span>: <span class="string">&#x27;Hello SSR&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">    &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">      &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;title&gt;Nodejs&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;ReactDomServer.renderToString(</span></span></span><br><span class="line"><span class="subst"><span class="string">        React.createElement(App)</span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/body &gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Listening on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><ul><li>守护进程：当进程退出以后</li><li>多进程：通过 cluster 模块便捷地利用多进程</li><li>记录进程状态：用于诊断</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;前端工程化&lt;/li&gt;
&lt;li&gt;服务端&lt;/li&gt;
&lt;li&gt;Electron 跨端桌面应用&lt;/li&gt;
&lt;/ul&gt;
&lt;</summary>
      
    
    
    
    
    <category term="nodejs" scheme="https://flower-f.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>字节前端青训营第 5 天（上）</title>
    <link href="https://flower-f.github.io/2022/01/20/byte-fe-training-5-part-one/"/>
    <id>https://flower-f.github.io/2022/01/20/byte-fe-training-5-part-one/</id>
    <published>2022-01-20T02:14:49.000Z</published>
    <updated>2022-01-22T01:33:00.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-HTTP"><a href="#什么是-HTTP" class="headerlink" title="什么是 HTTP"></a>什么是 HTTP</h1><ul><li>Hyper Text Transfer Protocol 超文本传输协议</li><li>应用层协议，基于 TCP 协议</li><li>分为两部分：请求 &amp; 响应</li><li>可拓展，比如可以自定义 Header</li><li>无状态，每个请求之间都是孤立的</li></ul><h1 id="HTTP-历史"><a href="#HTTP-历史" class="headerlink" title="HTTP 历史"></a>HTTP 历史</h1><h2 id="HTTP-0-9（单行协议）"><a href="#HTTP-0-9（单行协议）" class="headerlink" title="HTTP/0.9（单行协议）"></a>HTTP/0.9（单行协议）</h2><ul><li>只有一个请求行，没有请求头和请求体</li><li>请求方法只有 GET</li><li>响应只有 HTML 文档</li><li>文件格式只局限于 ASCII 编码</li><li>存在的问题：<ul><li>只支持 HTML 文件，其余类型文件无法传输</li><li>文件格式不再仅仅局限于 ASCII 编码</li></ul></li></ul><h2 id="HTTP-1-0（可拓展性）"><a href="#HTTP-1-0（可拓展性）" class="headerlink" title="HTTP/1.0（可拓展性）"></a>HTTP/1.0（可拓展性）</h2><ul><li>引入了请求头和响应头</li><li>增加了状态码</li><li>支持多种的文档类型</li><li>提供了 Cache 机制（If-Modified-Since、Last-Modified、Expires）</li><li>请求头加入了 User-Agent</li><li>存在的问题：<ul><li>每次通信都需要经过建立 TCP 连接、传输数据、断开 TCP 连接三个阶段，开销很大</li><li>在同一个 TCP 连接里面，数据请求的通信次序是固定的。服务器只有处理完一个请求的响应后，才会进行下一个请求的处理，如果前面请求的响应特别慢的话，就会造成许多请求排队等待的情况，也就是所谓的<strong>队头阻塞</strong></li><li>每个域名绑定唯一 IP 地址，因此一个服务器只支持一个域名</li><li>需要在响应头设置 Content-Length，然后浏览器再根据设置的数据大小来接收数据，对于动态生成的数据无能为力</li><li>不支持断点续传（在下载或上传时，将下载或上传任务（一个文件或一个压缩包）人为的划分为几个部分，每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传下载未完成的部分，而没有必要从头开始上传下载。用户可以节省时间，提高速度。）</li></ul></li></ul><h2 id="HTTP-1-1（标准化协议）"><a href="#HTTP-1-1（标准化协议）" class="headerlink" title="HTTP/1.1（标准化协议）"></a>HTTP/1.1（标准化协议）</h2><ul><li>增加了持久连接，默认开启 Connection: Keep-Alive。只要浏览器或服务器没有明确断开连接，那么连接会一直保持</li><li>虚拟主机的发展可以让一个 IP 对应多个域名。<ul><li>请求头增加了 Host 字段，用来表示当前域名地址</li><li>域名分片机制：引入 CDN 之后，每个域名可以维护 6 个连接</li></ul></li><li>引入了 cookie 机制和安全机制</li><li>新的缓存方案（If-None-Match、ETag）</li><li>存在的问题：<ul><li>TCP 的慢启动</li><li>同时开启多条 TCP 连接时，连接之间会竞争带宽</li><li>队头阻塞问题依然无法解决</li><li>由于 HTTP 1.1 协议不带有状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。</li></ul></li></ul><h2 id="HTTP-2-（表现更优异）"><a href="#HTTP-2-（表现更优异）" class="headerlink" title="HTTP/2 （表现更优异）"></a>HTTP/2 （表现更优异）</h2><ul><li>HTTP/2 是一个二进制协议。在 HTTP/1.1 中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为<strong>帧</strong></li><li>实现了多路复用。HTTP/2 仍然复用 TCP 连接，但是在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了队头阻塞问题</li><li>使用了数据流的概念。<strong>因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求</strong>。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流 ID ，用来区分它属于哪个数据流。</li><li>实现了头信息压缩。由于 HTTP 1.1 协议不带有状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，<strong>以后就不发送同样字段了，只发送索引号</strong>，这样就能提高速度了。</li><li>允许服务器推送。HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送，提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。</li><li>存在的问题：因为 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。由于多个数据流使用同一个 TCP 连接，遵守同一个流量状态控制和拥塞控制。只要一个数据流遭遇到拥塞，剩下的数据流就没法发出去，这样就导致了后面的所有数据都会被阻塞。这也导致了<strong>队头阻塞</strong>。HTTP/2 出现的这个问题是由于其使用 TCP 协议的问题，与它本身的实现其实并没有多大关系。</li></ul><h2 id="HTTP-3（QUIC-协议）"><a href="#HTTP-3（QUIC-协议）" class="headerlink" title="HTTP/3（QUIC 协议）"></a>HTTP/3（QUIC 协议）</h2><ul><li>Quick UDP Internet Connection </li><li>基于 UDP 实现了类似 TCP 的流量控制、可靠传输机制</li><li>集成了 TLS 安全加密</li><li>实现了 HTTP/2 多路复用技术，QUIC 实现了在同一个物理连接中可以有多个独立的逻辑数据流，实现了数据流单独传输，解决了 TCP 队头阻塞的问题</li><li>实现了快速握手功能（因为是基于 UDP 的）</li><li>存在的问题：<ul><li>服务器和浏览器还没有对其提供较完整的支持</li><li>可能存在安全性问题</li></ul></li></ul><h1 id="常用请求方法"><a href="#常用请求方法" class="headerlink" title="常用请求方法"></a>常用请求方法</h1><table><thead><tr><th align="center">请求方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">GET</td><td align="left">请求指定的资源，并返回实体</td></tr><tr><td align="center">POST</td><td align="left">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和已有资源的修改</td></tr><tr><td align="center">PUT</td><td align="left">从客户端向服务器传送的数据取代指定的内容</td></tr><tr><td align="center">DELETE</td><td align="left">请求服务器删除指定的数据</td></tr><tr><td align="center">OPTIONS</td><td align="left">在采取具体资源的请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能</td></tr><tr><td align="center">CONNECT</td><td align="left">HTTP/1.1 协议中预留于能够将连接改为管道方式</td></tr><tr><td align="center">HEAD</td><td align="left">类似于 GET 请求，只不过返回的响应中没有请求体</td></tr></tbody></table><h1 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h1><h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><ul><li>安全的方法：不好修改服务器数据，如 GET、HEAD、OPTIONS</li><li>幂等的方法：同样的请求执行一次，与连续执行多次效果相同。包括上面所有的安全方法，还包括 PUT、DELETE 这两个不安全但是幂等的方法</li></ul><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p>状态码概览：</p><ul><li>1XX：请求已接受，正在继续处理</li><li>2XX：请求成功，处理完毕</li><li>3XX：重定向</li><li>4XX：客户端错误</li><li>5XX：服务端错误</li></ul><p>常见状态码总结：</p><table><thead><tr><th align="left">状态码 &amp; 英文描述</th><th align="left">详细说明</th></tr></thead><tbody><tr><td align="left">100 Continue</td><td align="left">服务器收到了请求的一部分，并且希望客户端继续发送其余部分</td></tr><tr><td align="left">101 Switching Protocols</td><td align="left">切换协议，服务端根据客户端请求的头信息切换协议</td></tr><tr><td align="left">200 OK</td><td align="left">请求成功，且被服务端成功处理</td></tr><tr><td align="left">201 Created</td><td align="left">成功请求，且创建了新的资源</td></tr><tr><td align="left">202 Accepted</td><td align="left">服务器已接受请求，但未处理完成</td></tr><tr><td align="left">204 No Content</td><td align="left">请求成功处理，但是没有资源可以返回</td></tr><tr><td align="left">206 Partial Content</td><td align="left">服务器成功处理了部分 GET 请求</td></tr><tr><td align="left">301 Moved Permanently</td><td align="left">永久重定向。请求的资源被分配了新的 URL，之后应使用<strong>更改</strong>的URL</td></tr><tr><td align="left">302 Found</td><td align="left">临时重定向。表示请求的资源被分配了新的 URL，希望<strong>本次</strong>访问使用新的 URL</td></tr><tr><td align="left">304 Not Modified</td><td align="left"><strong>缓存</strong>相关的状态码。自从上次请求后，请求的资源未被修改过。 服务器返回此响应时，不会返回任何资源。客户端的请求中带有 If-Modified-Since 或者 If-None-Match</td></tr><tr><td align="left">307 Temporary Redirect</td><td align="left">类似 302，但是 307 会遵照浏览器标准，请求方法不会从 POST 变成 GET</td></tr><tr><td align="left">400 Bad Request</td><td align="left">请求报文中存在语法错误</td></tr><tr><td align="left">401 Unauthorized</td><td align="left">用户未授权</td></tr><tr><td align="left">403 Forbidden</td><td align="left">服务器拒绝该次访问</td></tr><tr><td align="left">404 Not Found</td><td align="left">服务器上无法找到请求的资源</td></tr><tr><td align="left">408 Request Time-out</td><td align="left">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td align="left">500 Internal Server Error</td><td align="left">服务器内部错误，无法完成请求</td></tr><tr><td align="left">502 Bad Gateway</td><td align="left">服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答</td></tr><tr><td align="left">503 Service Unavailable</td><td align="left">服务器超负载或正在进行停机维护，无法处理请求</td></tr></tbody></table><h2 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h2><p>一种 API 设计风格，有以下特点：</p><ul><li>每个 URI 代表一种资源</li><li>URI 只用于表示资源的名称，而不包括资源的操作</li><li>接口应该使用标准的 HTTP 方法如 GET，PUT 和 POST，并遵循这些方法的<strong>语义</strong></li></ul><p>CRUD 应该遵循以下语义：<br><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220120225230.png"></p><p>示例：<br><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220120225441.png"></p><h2 id="常用请求头"><a href="#常用请求头" class="headerlink" title="常用请求头"></a>常用请求头</h2><table><thead><tr><th align="left">请求头</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Accept</td><td align="left">浏览器可接受的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME 类型</a></td></tr><tr><td align="left">Content-Type</td><td align="left">资源属于什么 MIME 类型</td></tr><tr><td align="left">Cache-Control</td><td align="left">用于指定缓存机制。常见的值有 no-cache（不直接使用缓存，要向服务器发起请求确认资源是否更改，也就是我们常说的<strong>协商缓存</strong>），no-store（不使用任何缓存），max-age=xxx（缓存内容在 xxx 秒后失效）</td></tr><tr><td align="left">If-Modified-Since</td><td align="left">对应于服务端的 Last-Modified，若所请求的内容在指定的日期之后没有修改过，则返回 304 Not Modified，精度达到秒</td></tr><tr><td align="left">If-None-Match</td><td align="left">对应于服务端的 ETag，若所请求的内容在指定的日期之后没有修改过，则返回 304 Not Modified，精度非常准确</td></tr><tr><td align="left">Cookie</td><td align="left">有 cookie 而且同域的时候会自动带上</td></tr><tr><td align="left">User-Agent</td><td align="left">浏览器类型</td></tr><tr><td align="left">Connection</td><td align="left">若为 Keep-Alive，或者协议是 HTTP/1.1，则开启持久连接</td></tr><tr><td align="left">Location</td><td align="left">一般用来表示重定向的地址</td></tr><tr><td align="left">Expires</td><td align="left">缓存过期时间，在此时间内不需要发起请求，可以直接使用缓存</td></tr><tr><td align="left">Authorization</td><td align="left">授权信息</td></tr><tr><td align="left">Referer</td><td align="left">说明该页面的来源 URL。用处：防止盗链；避免 CSRF 攻击</td></tr><tr><td align="left">Origin</td><td align="left">类似于 Referer，把 URI 剥离成 {协议，域名，端口} 的三元组，用于指明当前请求来自于哪个站点。Origin 的出现就是为了实现跨域。</td></tr></tbody></table><h2 id="常用响应头"><a href="#常用响应头" class="headerlink" title="常用响应头"></a>常用响应头</h2><table><thead><tr><th align="left">响应头</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Content-Type</td><td align="left">资源属于什么 MIME 类型</td></tr><tr><td align="left">Cache-Control</td><td align="left">用于指定缓存机制。常见的值有 no-cache（不直接使用缓存，要向服务器发起请求确认资源是否更改，也就是我们常说的<strong>协商缓存</strong>），no-store（不使用任何缓存），max-age=xxx（缓存内容在 xxx 秒后失效）</td></tr><tr><td align="left">Last-Modified</td><td align="left">最后修改时间。客户端可以通过 If-Modified-Since 请求头提供一个日期，只有改动时间迟于指定时间，才会返回新的资源，否则返回一个 304 Not Modified</td></tr><tr><td align="left">ETag</td><td align="left">资源特定的标识符。客户端可以通过 If-None-Match 请求头提供一个标识符，如果客户端标识符与服务端不同才会返回新的资源，否则返回一个 304 Not Modified</td></tr><tr><td align="left">Set-Cookie</td><td align="left">设置页面相关的 Cookie</td></tr><tr><td align="left">Access-Control-Allow-Origin</td><td align="left">服务器允许请求的 Origin，如果设置为 * 则表示允许所有的 Origin</td></tr><tr><td align="left">Expires</td><td align="left">缓存过期时间。在此时间内不需要发起请求，可以直接使用缓存</td></tr><tr><td align="left">Max-age</td><td align="left">本地缓存应该缓存多久，开启了 Cache-Control 后才生效</td></tr></tbody></table><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>强缓存是利用 http 头中的 Expires 和 Cache-Control 两个字段来控制的。强缓存中，当请求再次发出时，浏览器会根据 Expires 和 Cache-control 判断目标资源是否命中强缓存，若命中则直接从缓存中获取资源，<strong>不会再与服务端发生通信</strong>。</p><p><strong>Expires VS max-age</strong></p><ul><li>Expires 是一个<strong>时间戳</strong>，接下来如果我们试图再次向服务器请求资源，浏览器就会先对比本地时间和 Expires 的时间戳，如果本地时间小于 Expires 设定的过期时间，那么就直接去缓存中取这个资源。由于时间戳是服务器来定义的，而本地时间的取值却来自客户端，因此 Expires 的工作机制对客户端时间与服务器时间之间的一致性提出了极高的要求，<strong>若服务器与客户端存在时差，将带来意料之外的结果</strong>。</li><li>max-age 是一个相对时间，这就意味着它有能力规避掉 Expires 可能会带来的时差问题。客户端会记录请求到资源的时间点，以此作为相对时间的起点，从而确保参与计算的起始时间和当前时间都来源于客户端，因此能够实现更加精准的判断。</li><li>Cache-Control 的 max-age 配置项相对于 Expires 的优先级更高。当 Cache-Control 与 Expires 同时出现时，我们以 Cache-Control 为准。</li></ul><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求，还是从本地获取缓存的资源。如果服务端提示缓存资源未改动，资源会被<strong>重定向到浏览器缓存</strong>（解释了为什么它是 3XX 开头），这种情况下网络请求对应的状态码是 304。</p><h4 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified / If-Modified-Since"></a>Last-Modified / If-Modified-Since</h4><p>含义：指最后一次修改资源的时间。开启了协商缓存之后，我们的每次请求都会带上 If-Modified-Since 的时间戳字段，它的值正是上一次 response 返回给它的 Last-Modified 值。服务器接收到这个时间戳后，会比对该时间戳和资源在服务器上的最后修改时间是否一致，从而判断资源是否发生了变化。如果发生了变化，就会返回一个完整的响应内容，并在 Response Headers 中添加新的 Last-Modified 值，否则返回 304 Not Modified。</p><p>弊端：</p><ul><li>有时候可能我们编辑了文件，但文件的内容没有改变。服务端并不清楚我们是否真正改变了文件，它仍然通过最后编辑时间进行判断。因此这个资源在再次被请求时，会被当做新资源，进而引发一次完整的响应——不该重新请求的时候，也会重新请求。</li><li>当我们修改文件的速度过快时（比如花了 100ms 完成了改动），由于 If-Modified-Since <strong>只能检查到以秒为最小计量单位</strong>的时间差，所以它是感知不到这个改动的——该重新请求的时候，反而没有重新请求了。</li></ul><h4 id="Etag-If-None-Match"><a href="#Etag-If-None-Match" class="headerlink" title="Etag / If-None-Match"></a>Etag / If-None-Match</h4><p>Etag 是由服务器为每个资源生成的唯一的标识字符串，这个标识字符串是<strong>基于文件内容编码</strong>的，只要文件内容不同，它们对应的 Etag 就是不同的；相反，只要文件内容相同，ETag 就是相同的。因此 Etag 能够<strong>精准地感知文件的变化</strong>。它的作用原理和 If-Modified-Since 类似，都是客户端带上然后去跟服务端进行比较，不同就返回资源以及新的 ETag，相同就返回 304 Not Modified。</p><p>弊端：Etag 的生成过程需要服务器额外付出开销，会影响服务端的性能，这是它的弊端。Etag 并不能替代 Last-Modified，它只能作为 Last-Modified 的补充存在。 Etag 在感知文件变化上比 Last-Modified 更加准确，优先级也更高。当 Etag 和 Last-Modified 同时存在时，以 Etag 为准。</p><p>示例图：<br><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220121095649.png"><br>简单来说就是：</p><ul><li>有强缓存且新鲜，就用，否则，就看有没有协商缓存</li><li>协商缓存 ETag 优先级高于 If-Modified-Since</li><li>什么缓存都没有，或者缓存不新鲜，就去重新请求</li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>&lt;cookie-name&gt;=&lt;cookie-value&gt;</code></td><td align="left">cookie 的键值对。</td></tr><tr><td align="left">Path</td><td align="left">指定一个 URL 路径，这个路径必须出现在要请求的资源的路径中才可以发送 cookie。</td></tr><tr><td align="left">Domain</td><td align="left">指定 cookie 可以送达的主机名。与之前的规范不同的是，域名之前的点号会被忽略。假如指定了域名，那么相当于各个子域名也包含在内了。</td></tr><tr><td align="left">Sec</td><td align="left">规定必须通过安全的 HTTPS 连接来传输 cookie。</td></tr><tr><td align="left">HttpOnly</td><td align="left">JS 脚本将无法读取到 cookie 信息，这样能有效的防止 XSS 攻击。</td></tr><tr><td align="left">Expires</td><td align="left">规定 cookie 的最长有效时间。形式为符合 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Date">HTTP-Date</a> 规范的时间戳。</td></tr><tr><td align="left">Max-Age</td><td align="left">在 cookie 失效之前需要经过的秒数。假如 Expires 和 Max-Age 均存在，那么 Max-Age 优先级更高。</td></tr><tr><td align="left">SameSite=[Strict, Lax]</td><td align="left">允许服务器设定 cookie 不随着跨域请求一起发送，这样可以在一定程度上防范 CSRF 攻击。</td></tr></tbody></table><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><h2 id="HTTP-存在的问题"><a href="#HTTP-存在的问题" class="headerlink" title="HTTP 存在的问题"></a>HTTP 存在的问题</h2><ul><li>HTTP 报文使用<strong>明文</strong>方式发送，可能被第三方窃听。</li><li>HTTP 报文可能被第三方<strong>拦截</strong>后修改通信内容，接收方没有办法发现报文内容的修改。</li><li>HTTP 还存在认证的问题，第三方可以<strong>冒充</strong>他人参与通信。</li></ul><h2 id="HTTPS-的解决方案"><a href="#HTTPS-的解决方案" class="headerlink" title="HTTPS 的解决方案"></a>HTTPS 的解决方案</h2><p>HTTPS 指的是超文本传输安全协议，HTTPS 是基于 HTTP 协议的，不过它会使用 TLS/SSL 来对数据加密。优点有：</p><ul><li>所有的信息都是加密的，第三方没有办法窃听。</li><li>它提供了一种校验机制，信息一旦被篡改，通信的双方会立刻发现。</li><li>配备了身份证书，防止身份被冒充的情况出现。</li></ul><h2 id="TLS-握手安全的原理"><a href="#TLS-握手安全的原理" class="headerlink" title="TLS 握手安全的原理"></a>TLS 握手安全的原理</h2><ul><li>对称加密：双方使用同一个秘钥对数据进行加密和解密。但是对称加密的存在一个问题，就是如何保证秘钥传输的安全性，因为秘钥还是会通过网络传输的，一旦秘钥被其他人获取到，那么整个加密过程就毫无作用了。因此还需要非对称加密。</li><li>非对称加密：我们拥有两个秘钥，一个公钥，一个私钥。公钥是公开的，私钥是保密的。<strong>用私钥加密的数据，只有对应的公钥才能解密；用公钥加密的数据，只有对应的私钥才能解密。</strong>我们可以将公钥公布出去，任何想和我们通信的客户，都可以使用我们提供的公钥对数据进行加密，然后我们就可以对应的私钥进行解密，这样就能保证数据的安全了。但是非对称加密有一个缺点就是加密速度很慢，因此如果每次通信都使用非对称加密的方式的话，反而会造成等待时间过长的问题。</li><li>非对称与对称的权衡：因为对称加密的方式的缺点是无法保证秘钥的安全传输，非对称加密的缺点是加密速度很慢，因此我们可以<strong>用非对称加密的方式来对对称加密的密钥进行传输，然后以后的通信使用对称加密的方式来加密</strong>，这样就解决了两个方法各自存在的问题。<strong>注意，只有传输这个加密的密钥的时候我们才需要使用非对称的加密。</strong></li><li>数字证书：但是这样依然无法确保安全性。因为我们没有办法确定我们得到的公钥就一定是安全的公钥。可能存在一个中间人，拦截了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送信息，就可以被他用自己的私钥解密。然后他伪装成我们以同样的方法向对方发送信息，这样我们的信息就被窃取了，然而我们自己还不知道。为了解决这样的问题，我们可以使用数字证书的方式，首先我们使用一种 Hash 算法来对我们的公钥和其他信息进行加密生成一个<strong>信息摘要</strong>，然后让有公信力的认证中心（简称 CA ）用它的私钥对信息摘要加密，形成<strong>签名</strong>。最后将原始的信息和签名合在一起，称为<strong>数字证书</strong>。当接收方收到数字证书的时候，先根据原始信息使用同样的 Hash 算法生成一个摘要，然后使用公证处的公钥来对数字证书中的摘要进行解密，最后将解密的摘要和我们生成的摘要进行对比，就能发现我们得到的信息是否被更改了。这个方法最重要的是认证中心的可靠性，一般浏览器里会内置一些顶层的认证中心的证书，相当于我们自动信任了他们，只有这样我们才能保证数据的安全。</li></ul><p>示例图：<br><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/31121131121.png"></p><h1 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h1><p>静态资源方案：缓存 + CDN + 文件名 hash（确保用户能拿到最新的文件）</p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>Content Delivery Network，内容分发网络，是由分布在不同区域的边缘节点服务器组成的分布式网络。开启 CDN 之后，用户的请求并不是直接发送给源网站，而是发送给 CDN 服务器，由 CND 服务器将请求定位到最近的含有该资源的服务器上去请求。这样有利于提高网站的访问速度，同时也分担了源服务器的访问压力。</p><p><strong>是否开启 CDN 的区别</strong></p><p>不开启 CDN：<br>用户输入域名 -&gt; DNS 解析获取 IP -&gt; 向该 IP 对应服务器发送访问请求 -&gt; 返回资源</p><p>开启 CDN：<br>用户输入域名 -&gt; 智能 DNS 解析 -&gt; 获取缓存服务器 IP -&gt; 若缓存有目标资源，返回资源；若没有就向源服务器发起请求，把获取的资源保存到缓存服务器，再把资源返回给用户</p><h1 id="SSO-单点登录"><a href="#SSO-单点登录" class="headerlink" title="SSO 单点登录"></a>SSO 单点登录</h1><p>在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。这种方式减少了由登录产生的时间消耗，辅助了用户管理。</p><p>用户在授权访问后会获得一个凭证，之后访问相关的应用时也会带上这个凭证，所以用户就可以在不需要再次登录的情况下直接登录访问。</p><h1 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h1><p>常用的跨域解决方案主要有五种：</p><ul><li>JSONP</li><li>CORS</li><li>WebSocket</li><li>Node 正向代理</li><li>Nginx 反向代理</li></ul><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>Ajax 五部曲</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步：创建 xhr 对象</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 第二步：初始化，设置请求方法和 url，注意此处 url 必须写完整</span></span><br><span class="line">xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>);</span><br><span class="line"><span class="comment">// 第三步：发送请求</span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">// 第四步：绑定事件</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// readState</span></span><br><span class="line">  <span class="comment">// 0 表示未初始化</span></span><br><span class="line">  <span class="comment">// 1 表示 open 完毕</span></span><br><span class="line">  <span class="comment">// 2 表示 send 完毕 </span></span><br><span class="line">  <span class="comment">// 3 表示服务端返回了部分结果 </span></span><br><span class="line">  <span class="comment">// 4 表示服务端返回了所有结果</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">// 第五步：处理结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是-HTTP&quot;&gt;&lt;a href=&quot;#什么是-HTTP&quot; class=&quot;headerlink&quot; title=&quot;什么是 HTTP&quot;&gt;&lt;/a&gt;什么是 HTTP&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Hyper Text Transfer Protocol 超文本传输协议&lt;/li</summary>
      
    
    
    
    
    <category term="计算机网络" scheme="https://flower-f.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>常见状态码总结</title>
    <link href="https://flower-f.github.io/2022/01/19/status-code/"/>
    <id>https://flower-f.github.io/2022/01/19/status-code/</id>
    <published>2022-01-19T13:59:51.000Z</published>
    <updated>2022-01-20T14:45:22.450Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">状态码 &amp; 英文描述</th><th align="left">详细说明</th></tr></thead><tbody><tr><td align="left">100 Continue</td><td align="left">服务器收到了请求的一部分，并且希望客户端继续发送其余部分</td></tr><tr><td align="left">101 Switching Protocols</td><td align="left">切换协议，服务端根据客户端请求的头信息切换协议</td></tr><tr><td align="left">200 OK</td><td align="left">请求成功，且被服务端成功处理</td></tr><tr><td align="left">201 Created</td><td align="left">成功请求，且创建了新的资源</td></tr><tr><td align="left">202 Accepted</td><td align="left">服务器已接受请求，但未处理完成</td></tr><tr><td align="left">204 No Content</td><td align="left">请求成功处理，但是没有资源可以返回</td></tr><tr><td align="left">206 Partial Content</td><td align="left">服务器成功处理了部分 GET 请求</td></tr><tr><td align="left">301 Moved Permanently</td><td align="left">永久重定向。请求的资源被分配了新的 URL，之后应使用<strong>更改</strong>的URL</td></tr><tr><td align="left">302 Found</td><td align="left">临时重定向。表示请求的资源被分配了新的 URL，希望<strong>本次</strong>访问使用新的 URL</td></tr><tr><td align="left">304 Not Modified</td><td align="left"><strong>缓存</strong>相关的状态码。自从上次请求后，请求的资源未被修改过。 服务器返回此响应时，不会返回任何资源。客户端的请求中带有 If-Modified-Since 或者 if-Match</td></tr><tr><td align="left">307 Temporary Redirect</td><td align="left">类似 302，但是 307 会遵照浏览器标准，请求方法不会从 POST 变成 GET</td></tr><tr><td align="left">400 Bad Request</td><td align="left">请求报文中存在语法错误</td></tr><tr><td align="left">401 Unauthorized</td><td align="left">用户未授权</td></tr><tr><td align="left">403 Forbidden</td><td align="left">服务器拒绝该次访问</td></tr><tr><td align="left">404 Not Found</td><td align="left">服务器上无法找到请求的资源</td></tr><tr><td align="left">408 Request Time-out</td><td align="left">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td align="left">500 Internal Server Error</td><td align="left">服务器内部错误，无法完成请求</td></tr><tr><td align="left">502 Bad Gateway</td><td align="left">服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答</td></tr><tr><td align="left">503 Service Unavailable</td><td align="left">服务器超负载或正在进行停机维护，无法处理请求</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;状态码 &amp;amp; 英文描述&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;详细说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;100 Continu</summary>
      
    
    
    
    
    <category term="计算机网络" scheme="https://flower-f.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>字节前端青训营第 4 天（下）</title>
    <link href="https://flower-f.github.io/2022/01/19/byte-fe-training-4-part-two/"/>
    <id>https://flower-f.github.io/2022/01/19/byte-fe-training-4-part-two/</id>
    <published>2022-01-19T08:45:33.000Z</published>
    <updated>2022-01-20T02:13:19.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动画基本原理"><a href="#动画基本原理" class="headerlink" title="动画基本原理"></a>动画基本原理</h1><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><p>无论动画多么简单，始终需要定义两个基本状态，即开始状态和结束状态。没有它们，我们将无法定义插值状态，从而填补两者之间的空白。<br>插值可能是颜色，也可能是位置等属性，可以理解为是对某个上下文中一个值或多个值的估计。当图形的变化可以由线性方程表示，就是线性插值。</p><h2 id="帧"><a href="#帧" class="headerlink" title="帧"></a>帧</h2><ul><li>帧：连续变换的多张画面，其中的每一幅画面都是一帧。</li><li>帧率:用于度量一定时间段内的帧数，通常的测量单位是 FPS (frame per second)。</li><li>帧率与人眼：一般每秒 10-12 帧人会认为画面是连贯的，这个现象称为视觉暂留。对于一些电脑动画和游戏来说低于 30FPS 会感受到明显卡顿，目前主流的屏幕、显卡输出为 60FPS，效果会明显更流畅。</li></ul><h2 id="空白补全"><a href="#空白补全" class="headerlink" title="空白补全"></a>空白补全</h2><p>空白的补全方式有以下两种</p><ul><li>补间动画：传统动画，主画师绘制关键帧，交给清稿部门，清稿部门的补间动画师补充关键帧进行交付。（类比到这里， 补间动画师由浏览器来担任，如 keyframe，transition）</li><li>逐帧动画（Frame By Frame）：从词语来说意味着全片每一帧逐帧都是纯手绘。（如 css 的 steps 实现精灵动画）</li></ul><h1 id="前端动画分类"><a href="#前端动画分类" class="headerlink" title="前端动画分类"></a>前端动画分类</h1><h2 id="CSS-动画"><a href="#CSS-动画" class="headerlink" title="CSS 动画"></a>CSS 动画</h2><p>优点:</p><ul><li>浏览器会对 CSS3 动画做一些优化，导致 CSS3 动画性能上稍有优势。（新建一个图层来跑动画）</li><li>CSS3 动画的代码相对简单。</li></ul><p>缺点:</p><ul><li>动画控制上不够灵活。</li><li>兼容性不佳。</li><li>部分动画无法实现。（视差效果、滚动动画）</li></ul><p>主要属性：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform"><code>transform</code></a>：可以用于图形的旋转、移动、缩放等</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition"><code>transition</code></a>：处理开始状态到结束状态的过渡效果</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation"><code>animation</code></a>：通过 keyframe 定义开始状态、结束状态以及多个中间态，相比于 <code>transition</code> 可以处理更复杂的动画</li></ul><h2 id="SVG-动画"><a href="#SVG-动画" class="headerlink" title="SVG 动画"></a>SVG 动画</h2><p>优点：通过矢量元素实现动画，不同的屏幕下均可获得较好的清晰度。可以用于实现一些特殊的效果，如：描字，形变，墨水扩散等。</p><p>缺点：使用方式较为复杂，过多使用可能会带来性能问题。</p><p>实现 SVG 动画通常有三种方式，SMIL、JS、CSS</p><h3 id="SMIL"><a href="#SMIL" class="headerlink" title="SMIL"></a>SMIL</h3><p>兼容性不理想，因此不过多讨论</p><h3 id="JS-操作-SVG"><a href="#JS-操作-SVG" class="headerlink" title="JS 操作 SVG"></a>JS 操作 SVG</h3><ul><li>Snap.svg</li><li>anime.js</li><li>HTML 原生的 Web Animation</li></ul><p>例一：<a href="https://codepen.io/jiangxiang/pen/MWmdjeY">SVG 文字变形</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">CSS 属性 filter</a>：可以将模糊或颜色偏移等效果应用于元素，它的属性 url 可以传入一个 svg</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">elts.text2.style.filter = <span class="string">`blur(<span class="subst">$&#123;<span class="built_in">Math</span>.min(<span class="number">8</span> / fraction - <span class="number">8</span>, <span class="number">100</span>)&#125;</span>px)`</span>;</span><br><span class="line">elts.text2.style.opacity = <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.pow(fraction, <span class="number">0.4</span>) * <span class="number">100</span>&#125;</span>%`</span>;</span><br><span class="line"></span><br><span class="line">fraction = <span class="number">1</span> - fraction;</span><br><span class="line">elts.text1.style.filter = <span class="string">`blur(<span class="subst">$&#123;<span class="built_in">Math</span>.min(<span class="number">8</span> / fraction - <span class="number">8</span>, <span class="number">100</span>)&#125;</span>px)`</span>;</span><br><span class="line">elts.text1.style.opacity = <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.pow(fraction, <span class="number">0.4</span>) * <span class="number">100</span>&#125;</span>%`</span>;</span><br></pre></td></tr></table></figure><p>通过上面的代码控制 <code>blur</code> 和 <code>opacity</code> 不断地变化。每次切换单词的时候，当它的模糊程度快没有，就直接通过透明度把它隐藏掉，造成一种文字溶解的错觉。</p><p>例二：<a href="https://codepen.io/jiangxiang/pen/eYWagxq">JS 画笔</a></p><p><a href="https://codepen.io/jiangxiang/pen/LYzvvxd">JS 画笔的原理</a>：<br><code>stroke-dashoffset</code>、<code>stroke-dasharray</code> 配合使用实现笔画效果。</p><ul><li>属性 <code>stroke-dasharray</code> 可控制用来描边的点划线的图案范式。它是一个数列，数与数之间用逗号或者空白隔开，指定短划线和缺口的长度。如果提供了奇数个值，则这个值的数列重复一次，从而变成偶数个值。因此，5,3,2 等同于 5,3,2,5,3,2。</li><li><code>stroke-dashoffset</code> 属性指定了 dash 模式到路径开始的距离。（当使用了 <code>stroke-dasharray</code>，就进入了 dash 模式）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">line</span> <span class="attr">stroke-dasharray</span>=<span class="string">&quot;5, 5&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;10&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">line</span> <span class="attr">stroke-dasharray</span>=<span class="string">&quot;5, 10&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;30&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>上面第一个表示先走 5 像素实线，再走 5 像素的空白；第二个表示先走 5 像素实线，再走 10 像素空白。</p><p>计算 path 的长度：<code>path.getTotalLength()</code>，然后将 <code>stroke-dashoffset</code> 的值设置为该的长度，就能实现类似画画的效果。</p><h2 id="JS-动画"><a href="#JS-动画" class="headerlink" title="JS 动画"></a>JS 动画</h2><p>JS 可以通过操作 SVG、CSS、Canvas 等实现动画。</p><p>优点：</p><ul><li>使用灵活，同样在定义一个动画的 keyframe 序列时，可以根据不同的条件调节若干参数（JS 动画函数）改变动画方式。（CSS 会有非常多的代码冗余），对比于 CSS 的 keyframe 粒度更粗，CSS 本身的时间函数是有限的，这块 JS 可以弥补。</li><li>CSS 很难做到两个以上的状态转化。（要么使用关键帧，要么需要多个动画延时触发，再想到要对动画循环播放或暂停倒序等，复杂度极高）</li></ul><p>缺点:</p><ul><li>使用到 JS 运行时，调优方面不如 CSS 简单，CSS 调优方式固定。</li><li>对于性能和兼容性较差的浏览器，CSS 可以做到优雅降级，而 JS 需要额外的代码兼容。</li></ul><h2 id="对比与结论"><a href="#对比与结论" class="headerlink" title="对比与结论"></a>对比与结论</h2><ul><li>当 UI 元素采用较小的独立状态时，使用 CSS。</li><li>在需要对动画进行大量控制时，使用 JavaScript。</li><li>在特定的场景下可以使用 SVG，可以使用 CSS 或 JS 去操作 SVG 变化。</li></ul><h1 id="实现前端动画"><a href="#实现前端动画" class="headerlink" title="实现前端动画"></a>实现前端动画</h1><h2 id="animate-函数的实现"><a href="#animate-函数的实现" class="headerlink" title="animate 函数的实现"></a>animate 函数的实现</h2><p><strong>requestAnimationFrame VS setTimeout VS setInterval</strong></p><p>JavaScript 动画应该通过 <code>requestAnimationFrame</code> 实现。该内置方法允许设置回调函数以在<strong>浏览器准备重绘时</strong>运行，因此不容易丢帧，但是 <code>setTimeout</code> 和 <code>setInterval</code> 容易丢帧。通常这很快，确切的时间取决于浏览器。另外，当页面在后台时，根本没有重绘，所以回调不会运行，此时动画将被暂停并且不会消耗资源，这也比 <code>setTimeout</code> 和 <code>setInterval</code> 更优。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">&#123; easing, draw, duration &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 为什么不使用 Date.new()？</span></span><br><span class="line">  <span class="comment">// 因为 performance.now() 会以恒定速度自增，精确到微秒级别，而 Date.now() 容易被篡改</span></span><br><span class="line">  <span class="keyword">const</span> start = performance.now();</span><br><span class="line">  <span class="comment">// 因为动画是连续的，执行完这个动画以后可能还有别的动画</span></span><br><span class="line">  <span class="comment">// 所以我们返回 Promise 以支持后续的顺序调用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// timeFraction 是当前已经执行的时间与动画要持续的总时间的比值</span></span><br><span class="line">      <span class="comment">// progress 是一个介于 0 到 1 的值，表示执行绘画的进度</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果 timeFraction 大于或等于 1，说明时间已经超过 duration，执行完成</span></span><br><span class="line">      <span class="comment">// 直接把 progress 的最终值 1 传过去就行了</span></span><br><span class="line">      <span class="comment">// 否则的话，继续执行 requestAnimationFrame</span></span><br><span class="line">      <span class="keyword">let</span> timeFraction = (time - start) / duration;</span><br><span class="line">      <span class="keyword">if</span> (timeFraction &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        timeFraction = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> progress = easing(timeFraction);</span><br><span class="line">      draw(progress);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (timeFraction &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        requestAnimationFrame(animate);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// draw 绘制函数</span></span><br><span class="line"><span class="comment">// draw 是一支画笔，它会被反复调用</span></span><br><span class="line"><span class="comment">// 传入的参数是当前执行的进度，是一个介于 0 到 1 之间的值</span></span><br><span class="line"><span class="keyword">const</span> ball = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.ball&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> draw = <span class="function">(<span class="params">progress</span>) =&gt;</span> &#123;</span><br><span class="line">  ball.style.transfrom = <span class="string">`translate(<span class="subst">$&#123;progress&#125;</span>px, 0)`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// easing 缓动函数</span></span><br><span class="line"><span class="comment">// 修改动画执行的节奏</span></span><br><span class="line"><span class="keyword">const</span> easing = <span class="function">(<span class="params">timeFraction</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> timeFraction ** <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="JS-动画的核心思想"><a href="#JS-动画的核心思想" class="headerlink" title="JS 动画的核心思想"></a>JS 动画的核心思想</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3159700498f41418f87469f348b591e~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这里 r 是距离，v 是速度，t 是时间。动画就是在开始状态和结束状态之间插值，这里的 r 可以简单理解为插值。</p><p>另外我们还需要通过比例尺实现物体的缩放，使得动画可以在显示屏中正常显示。</p><h2 id="简单动画"><a href="#简单动画" class="headerlink" title="简单动画"></a>简单动画</h2><h3 id="动画演示"><a href="#动画演示" class="headerlink" title="动画演示"></a><a href="https://codepen.io/jiangxiang/pen/rNmgVKK">动画演示</a></h3><ul><li>匀速直线</li><li>重力</li><li>摩擦力</li><li>平抛</li><li>旋转 + 平抛</li></ul><h3 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h3><p>贝塞尔曲线生成网站：<a href="https://cubic-bezier.com/">cubic-bezier.com</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动画基本原理&quot;&gt;&lt;a href=&quot;#动画基本原理&quot; class=&quot;headerlink&quot; title=&quot;动画基本原理&quot;&gt;&lt;/a&gt;动画基本原理&lt;/h1&gt;&lt;h2 id=&quot;插值&quot;&gt;&lt;a href=&quot;#插值&quot; class=&quot;headerlink&quot; title=&quot;插值&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="css" scheme="https://flower-f.github.io/tags/css/"/>
    
    <category term="javascript" scheme="https://flower-f.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>字节前端青训营第 4 天（上）</title>
    <link href="https://flower-f.github.io/2022/01/19/byte-fe-training-4-part-one/"/>
    <id>https://flower-f.github.io/2022/01/19/byte-fe-training-4-part-one/</id>
    <published>2022-01-19T02:03:51.000Z</published>
    <updated>2022-01-19T09:36:59.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-的应用场景"><a href="#React-的应用场景" class="headerlink" title="React 的应用场景"></a>React 的应用场景</h1><ul><li>网页应用，Facebok，Instagram，Netflix 网页版</li><li>移动原生应用：Instagram，Discord，Oculus</li><li>桌面应用：结合 Electron</li><li>3D：<a href="https://github.com/pmndrs/react-three-fiber">react-three-fiber</a></li></ul><h1 id="React-的设计思路"><a href="#React-的设计思路" class="headerlink" title="React 的设计思路"></a>React 的设计思路</h1><h2 id="UI-编程的痛点"><a href="#UI-编程的痛点" class="headerlink" title="UI 编程的痛点"></a>UI 编程的痛点</h2><ul><li>状态更新，UI 不会自动更新，需要手动调用 dom</li><li>缺少代码层面的封装与隔离，没有组件化</li><li>UI 之间存在数据依赖关系，需要手动维护；如果数据依赖关系链太长，会出现 callback hell</li></ul><h2 id="转换式系统-amp-响应式系统"><a href="#转换式系统-amp-响应式系统" class="headerlink" title="转换式系统 &amp; 响应式系统"></a>转换式系统 &amp; 响应式系统</h2><p>转换式系统：给定输入，求解输出，如编译器，计算器<br>响应式系统：监听事件，由消息驱动</p><p>前端代码并不需要大量的计算，更多的是需要去处理一些事件（比如用户的点击）；另外当事件发生时，我们需要进行一些响应（比如改变界面）。这两个特点决定了转换式系统对于前端写起来是很难受的，我们需要一种新的方式。</p><p>依据上面的分析，我们对于 React 设计的期望也很容易得出：</p><ul><li>状态更新，UI 自动更新</li><li>前端代码组件化，可以复用，可以封装</li><li>状态之间</li></ul><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><ul><li>组件是组件的组合 / 原子组件</li><li>组件内拥有状态，且外部不可见</li><li>父组件可以把状态传递给子组件</li></ul><h2 id="状态归属"><a href="#状态归属" class="headerlink" title="状态归属"></a>状态归属</h2><p>状态提升：当多个组件需要共享一个状态的时候，我们需要不断地提升状态，所以我们需要状态管理库。</p><p>注意 React 不是双向数据流，是单向的。<strong>子组件只是执行了父组件传递过来的函数，而没有把任何的状态传递回去给父组件。</strong>（函数在 Js 中是一等公民，所以可以作为一个变量传递）</p><h2 id="组件设计"><a href="#组件设计" class="headerlink" title="组件设计"></a>组件设计</h2><ul><li>组件声明了状态以及 UI 的映射</li><li>组件有 state（内部状态）和 props（外部状态）两种状态</li><li>组件可以由其它组件拼装而成</li></ul><h1 id="状态管理库"><a href="#状态管理库" class="headerlink" title="状态管理库"></a>状态管理库</h1><p>使用状态管理库的弊端：组件的复用性降低了，一般使用于业务代码</p><p>常用的状态管理库有：</p><ul><li>redux</li><li>mobx</li><li>xstate</li><li>recoil</li><li>reduck（来源于 modern.js）</li></ul><p><strong>什么东西应该放到状态管理库？</strong><br>如果你觉得某个东西整个 APP 有多处可能用到的，就放进去，比如说用户头像，这样也可以减少我们发送的请求数。</p><h1 id="React-组件什么时候被渲染？"><a href="#React-组件什么时候被渲染？" class="headerlink" title="React 组件什么时候被渲染？"></a>React 组件什么时候被渲染？</h1><ul><li>首次渲染</li><li>props 变化</li><li>state 变化</li><li>context 变化</li></ul><h1 id="应用级框架科普"><a href="#应用级框架科普" class="headerlink" title="应用级框架科普"></a>应用级框架科普</h1><ul><li>Next.js</li><li>Modern.js</li><li>Blitz</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;React-的应用场景&quot;&gt;&lt;a href=&quot;#React-的应用场景&quot; class=&quot;headerlink&quot; title=&quot;React 的应用场景&quot;&gt;&lt;/a&gt;React 的应用场景&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;网页应用，Facebok，Instagram，Netfl</summary>
      
    
    
    
    
    <category term="react" scheme="https://flower-f.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>为什么 React 要发明 Hooks</title>
    <link href="https://flower-f.github.io/2022/01/18/why-we-need-hooks/"/>
    <id>https://flower-f.github.io/2022/01/18/why-we-need-hooks/</id>
    <published>2022-01-18T04:50:34.000Z</published>
    <updated>2022-01-19T08:40:12.533Z</updated>
    
    <content type="html"><![CDATA[<p>本文为<a href="https://time.geekbang.org/column/article/378311">React Hooks 核心原理与实战</a>阅读笔记</p><h1 id="React-组件的本质"><a href="#React-组件的本质" class="headerlink" title="React 组件的本质"></a>React 组件的本质</h1><p>我们可以把 UI 的展现看成一个<strong>函数</strong>的执行过程。其中，Model 是输入参数，函数的执行结果是 DOM 树，也就是 View。而 React 要保证的，就是每当 Model 发生变化时，函数会重新执行，并且生成新的 DOM 树，然后 React 再把新的 DOM 树以最优的方式更新到浏览器。</p><p><strong>所以我们是否真的有必要使用 class 来作为组件呢？</strong><br>事实上使用 class 是一种很牵强的做法，React 根本没有用到类的两个重要特性：</p><ul><li>React 组件之间是不会互相继承的。比如说，你不会创建一个 Button 组件，然后再创建一个 DropdownButton 来继承 Button。所以说，React 中其实是没有利用到 Class 的继承特性的。</li><li>所有 UI 都是由状态驱动的，因此很少会在外部去调用一个类实例（即组件）的方法。要知道，组件的所有方法都是在内部调用，或者作为生命周期方法被自动调用的。在使用类组件的时候，你从不需要去 new 一个对象来实现任何功能。</li></ul><p><strong>换句话说，class 并不是最好的组件表现形式，function 才是。</strong></p><h1 id="Hooks-的诞生"><a href="#Hooks-的诞生" class="headerlink" title="Hooks 的诞生"></a>Hooks 的诞生</h1><p>但是当时有一个局限是，函数组件无法存在内部状态，必须是纯函数，而且也无法提供完整的生命周期机制。</p><p>因此我们需要一个机制，能够把一个外部的数据绑定到函数的执行。<strong>当数据变化时，函数能够自动重新执行</strong>。</p><p><strong>于是有了 Hooks。</strong></p><p>在 React 中，Hooks 就是把某个目标结果<strong>钩到某个可能会变化的数据源或者事件源上</strong>，那么当被钩到的数据或事件发生变化时，产生这个目标结果的代码会重新执行，产生更新后的结果。</p><p>对于函数组件，这个结果是最终的 DOM 树；对于 useCallback、useMemo 这样与缓存相关的组件，则是在依赖项发生变化时去更新缓存。</p><p>另外，有一点需要特别注意，Hooks 中被钩的对象，不仅可以是某个独立的数据源，也可以是另一个 Hook 执行的结果，这就带来了 Hooks 的最大好处：<strong>实现逻辑的复用</strong>。</p><h1 id="Hooks-实现逻辑复用"><a href="#Hooks-实现逻辑复用" class="headerlink" title="Hooks 实现逻辑复用"></a>Hooks 实现逻辑复用</h1><p>在之前的 React 使用中，有一点经常被大家诟病，就是非常难以实现逻辑的复用，必须借助于高阶组件等非常复杂的设计模式。但是高阶组件会产生冗余的组件节点，让调试变得困难。不过这些问题可以通过 Hooks 得到了很好的解决。所以如果有人问你 Hooks 有什么好处，那么最关键的答案就是<strong>简化了逻辑复用</strong>。</p><p>在 Hooks 出现之前，高阶组件几乎是 Class 组件中实现代码逻辑复用的唯一方式，其缺点其实比较显然：</p><ul><li>代码难理解，不直观，很多人甚至宁愿重复代码，也不愿用高阶组件。</li><li>会增加很多额外的组件节点。每一个高阶组件都会多一层节点，这就会给调试带来很大的负担。</li></ul><p>但现在我们可以通过 Hooks 的方式对外部数据进行封装，从而将其变成一个可绑定的数据源。</p><h1 id="Hooks-帮助实现关注点的分离"><a href="#Hooks-帮助实现关注点的分离" class="headerlink" title="Hooks 帮助实现关注点的分离"></a>Hooks 帮助实现关注点的分离</h1><p>除了逻辑复用之外，Hooks 能够带来的另外一大好处就是有助于关注分离，意思是说 Hooks 能够让针对同一个业务逻辑的代码尽可能聚合在一块儿。这是过去在 Class 组件中很难做到的。因为在 Class 组件中，你不得不把同一个业务逻辑的代码分散在类组件的不同生命周期的方法中。</p><p>在过去的 Class 组件中，我们需要在 <code>componentDidMount</code> 中监听事件，在 <code>componentWillUnmount</code> 中解绑事件。而在函数组件中，我们可以把所有逻辑写在一起。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文为&lt;a href=&quot;https://time.geekbang.org/column/article/378311&quot;&gt;React Hooks 核心原理与实战&lt;/a&gt;阅读笔记&lt;/p&gt;
&lt;h1 id=&quot;React-组件的本质&quot;&gt;&lt;a href=&quot;#React-组件的本质&quot; </summary>
      
    
    
    
    
    <category term="react" scheme="https://flower-f.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>跨域解决方案</title>
    <link href="https://flower-f.github.io/2022/01/17/cross-origin/"/>
    <id>https://flower-f.github.io/2022/01/17/cross-origin/</id>
    <published>2022-01-17T12:48:17.000Z</published>
    <updated>2022-01-21T08:43:05.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器同源策略"><a href="#浏览器同源策略" class="headerlink" title="浏览器同源策略"></a>浏览器同源策略</h1><p>浏览器同源策略是一个安全策略，其中同源指的是 <code>协议 + 域名 + 端口号</code> 三者相同，即使有两个不同的域名指向同一个 IP 地址，也不是同源的。同源策略可以一定程度上防止 XSS、CSRF 攻击。</p><p>一个域名的组成包括：<br><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220117211107.png"></p><p>在默认情况下 http 可以省略端口 80， https 可以省略端口 443。也就是说，<a href="https://www.baidu.com/">https://www.baidu.com</a> 和 <a href="https://www.baidu.com/">https://www.baidu.com:443</a> 显然也是同源的，因为它们是一回事。</p><p>不符合同源策略导致的后果有：</p><ul><li>localStorage、sessionStorage、Cookie 等浏览器的内存无法跨域访问</li><li>DOM 节点无法进行跨域操作</li><li>Ajax 请求无法跨域请求</li></ul><p>但是有一些标签是允许跨域加载资源：</p><ul><li><code>&lt;img&gt;</code></li><li><code>&lt;link&gt;</code></li><li><code>&lt;script&gt;</code></li></ul><p>值得注意的几个要点有：</p><ul><li>如果是协议和端口造成的跨域问题，前端是无能为力的</li><li><strong>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了</strong></li></ul><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端 http://127.0.0.1:8000</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(<span class="string">&#x27;hello world&#x27;</span>));</span><br><span class="line">&#125;).listen(port, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server is listening on port &#x27;</span> + port);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 客户端 http://127.0.0.1:5500/index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第一步：创建 xhr 对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第二步：初始化，设置请求方法和 url，注意此处 url 必须写完整</span></span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第三步：发送请求</span></span></span><br><span class="line"><span class="javascript">    xhr.send();</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第四步：绑定事件</span></span></span><br><span class="line"><span class="javascript">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// readState</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 0 表示未初始化</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1 表示 open 完毕</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2 表示 send 完毕 </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 3 表示服务端返回了部分结果 </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 4 表示服务端返回了所有结果</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 第五步：处理结果</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(xhr.responseText);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>果不其然报错了：<br><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220117213331.png"></p><h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h1><p>JSONP，即 JSON with Padding，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持 get 请求。<br>JSONP 工作原理：在网页有一些标签天生就具有跨域能力，比如 <code>img</code> <code>link</code> <code>script</code> 等。JSONP 就是利用 <code>script</code> 标签的跨域能力来发送请求的。</p><p><img src="https://cdn.jsdelivr.net/gh/Flower-F/picture@main/img/20220117230214.png"><br>举个例子，客户端传入 a 和 b，服务端传回 a + b 的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端 http://127.0.0.1:8000</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; query &#125; = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> &#123; a, b, callback &#125; = query;</span><br><span class="line">    <span class="keyword">const</span> ans = <span class="built_in">parseInt</span>(a) + <span class="built_in">parseInt</span>(b);</span><br><span class="line">    res.end(<span class="string">`<span class="subst">$&#123;callback&#125;</span>(&#x27;<span class="subst">$&#123;ans&#125;</span>&#x27;)`</span>);</span><br><span class="line">&#125;).listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server is listening on port &#x27;</span> + port);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 客户端 http://127.0.0.1:5500/index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">ans</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;a + b =&#x27;</span>, ans);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> jsonp = <span class="function">(<span class="params">a, b, callback</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        script.src = <span class="string">`http://127.0.0.1:8000?a=<span class="subst">$&#123;a&#125;</span>&amp;b=<span class="subst">$&#123;b&#125;</span>&amp;callback=<span class="subst">$&#123;callback&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.appendChild(script);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    jsonp(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;add&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缺点：需要前后端配合，只支持 get 请求。</p><h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p>CORS 全称是 Cross-Orgin Resource Sharing，跨域资源共享。CORS 由后端开启，开启后前端就可以跨域访问后端。</p><p>服务端设置 <code>Access-Control-Allow-Origin</code> 就可以开启 CORS。该属性表示哪些域名可以访问资源，如果设置为通配符 *，则表示所有网站都可以访问资源。类似的还有 <code>Access-Control-Allow-Methods</code>，表示允许的请求方法，<code>Access-Control-Allow-Headers</code>，表示允许的请求头类型。</p><p>设置 CORS 本身和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为<strong>简单请求</strong>和<strong>复杂请求</strong>。</p><h2 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h2><p>只要同时满足以下条件的就是简单请求：</p><ol><li>请求方法是以下三者之一：</li></ol><ul><li>GET</li><li>POST</li><li>HEAD</li></ul><ol start="2"><li>允许人为设置的字段仅限以下几种：</li></ol><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type（有额外限制）</li></ul><ol start="3"><li>Content-Type 取值为以下三者之一：</li></ol><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul><ol start="4"><li><p>请求中的任意 XMLHttpRequest 对象均没有注册任何事件监听器；XMLHttpRequest 对象可以使用 XMLHttpRequest.upload 属性访问。</p></li><li><p>请求中没有使用 ReadableStream 对象。</p></li></ol><h2 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h2><p>不是简单请求的请求就是复杂请求。<strong>复杂请求</strong>必须首先使用 <code>OPTIONS</code> 请求方法发起一个<strong>预检请求</strong>到服务器，以获知服务器是否允许该实际请求。预检请求的使用，可以避免跨域请求对服务器的用户数据产生预期之外的影响。</p><p>代码示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 客户端 http://127.0.0.1:5500/index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第一步：创建 xhr 对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第二步：初始化，设置请求方法和 url，注意此处 url 必须写完整</span></span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000?a=1&amp;b=2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第三步：发送请求</span></span></span><br><span class="line"><span class="javascript">    xhr.send();</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第四步：绑定事件</span></span></span><br><span class="line"><span class="javascript">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// readState</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 0 表示未初始化</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1 表示 open 完毕</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2 表示 send 完毕 </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 3 表示服务端返回了部分结果 </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 4 表示服务端返回了所有结果</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 第五步：处理结果</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(xhr.responseText);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端 http://127.0.0.1:8000</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 开启 CORS</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="comment">//设置允许跨域的域名，也可设置 * 表示允许所有域名</span></span><br><span class="line">        <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:5500&#x27;</span>,</span><br><span class="line">        <span class="comment">//跨域允许的请求方法，也可设置 * 表示允许所有方法</span></span><br><span class="line">        <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>: <span class="string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span>,</span><br><span class="line">        <span class="comment">//允许的请求头类型</span></span><br><span class="line">        <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>: <span class="string">&#x27;Content-Type&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">query</span>: &#123; a, b &#125; &#125; = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">    res.end(<span class="string">`<span class="subst">$&#123;a&#125;</span> + <span class="subst">$&#123;b&#125;</span> = <span class="subst">$&#123;<span class="built_in">parseInt</span>(a) + <span class="built_in">parseInt</span>(b)&#125;</span>`</span>);</span><br><span class="line">&#125;).listen(port, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server is listening on port &#x27;</span> + port);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>Websocket 属于应用层协议，它基于 TCP 传输协议，并复用 http 的握手通道。<br>相比于 http 协议，它的优点是：</p><ul><li>支持双向通信，客户端和服务器之间存在持久的连接，而且双方都可以随时开始发送数据</li><li>有更好的二进制支持</li><li>支持拓展</li></ul><p>因为这种方式本质没有使用 http 的响应头, 因此也没有跨域的限制。</p><p><strong>那么为什么 WebSocket 可以跨域呢？</strong><br>因为 WebSocket 根本不属于同源策略，而且它本身就有意被设计成可以跨域的一个手段。由于历史原因，跨域检测一直是由浏览器端来做，但是 WebSocket 出现以后，对于 WebSocket 的跨域检测工作就交给了服务端，浏览器仍然会带上一个 Origin 跨域请求头，服务端则根据这个请求头判断此次跨域 WebSocket 请求是否合法。</p><p>依然以 a + b 问题举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 客户端 http://127.0.0.1:5500/index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">ws</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://127.0.0.1:8000&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        socket.onopen = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            socket.send(<span class="built_in">JSON</span>.stringify(&#123; a, b &#125;));</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        socket.onmessage = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(e.data);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    ws(<span class="number">1</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端 http://127.0.0.1:8000</span></span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket.Server(&#123; port &#125;);</span><br><span class="line">ws.on(<span class="string">&#x27;connection&#x27;</span>, <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">    obj.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        data = <span class="built_in">JSON</span>.parse(data.toString());</span><br><span class="line">        <span class="keyword">const</span> &#123; a, b &#125; = data;</span><br><span class="line">        obj.send(<span class="string">`<span class="subst">$&#123;a&#125;</span> + <span class="subst">$&#123;b&#125;</span> = <span class="subst">$&#123;<span class="built_in">parseInt</span>(a) + <span class="built_in">parseInt</span>(b)&#125;</span>`</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Node-接口代理"><a href="#Node-接口代理" class="headerlink" title="Node 接口代理"></a>Node 接口代理</h1><p>同源策略只在浏览器存在，无法限制后端。也就是说前端与后端之间会受同源策略影响，但是后端与后端之间不会受到限制。所以可以通过 Node 做一层接口代理，先访问已经设置了 CORS 的后端 1，再让后端 1 去访问后端 2，获取数据后传给后端 1，最后再让后端 1 把数据传回给前端。</p><p>客户端代码同上，把请求端口改成 8888 即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后端 1 http://127.0.0.1:8888</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 开启 CORS</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="comment">//设置允许跨域的域名，也可设置 * 表示允许所有域名</span></span><br><span class="line">        <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:5500&#x27;</span>,</span><br><span class="line">        <span class="comment">//跨域允许的请求方法，也可设置 * 表示允许所有方法</span></span><br><span class="line">        <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>: <span class="string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span>,</span><br><span class="line">        <span class="comment">//允许的请求头类型</span></span><br><span class="line">        <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>: <span class="string">&#x27;Content-Type&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> &#123; query &#125; = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> &#123; methods = <span class="string">&#x27;GET&#x27;</span>, headers &#125; = req;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给后端 2 发送请求</span></span><br><span class="line">    http.request(&#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="string">&#x27;8000&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">`/?<span class="subst">$&#123;querystring.stringify(query)&#125;</span>`</span>,</span><br><span class="line">        methods,</span><br><span class="line">        headers</span><br><span class="line">    &#125;, <span class="function"><span class="params">proxyRes</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 把从后端 2 获取的数据传回给前端</span></span><br><span class="line">        proxyRes.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(chunk.toString());</span><br><span class="line">            res.end(chunk.toString());</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).end()</span><br><span class="line">&#125;).listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server is listening on port &#x27;</span> + port);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后端 2 http://127.0.0.1:8000</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 开启 CORS</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="comment">//设置允许跨域的域名，也可设置 * 表示允许所有域名</span></span><br><span class="line">        <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:5500&#x27;</span>,</span><br><span class="line">        <span class="comment">//跨域允许的请求方法，也可设置 * 表示允许所有方法</span></span><br><span class="line">        <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>: <span class="string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span>,</span><br><span class="line">        <span class="comment">//允许的请求头类型</span></span><br><span class="line">        <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>: <span class="string">&#x27;Content-Type&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">query</span>: &#123; a, b &#125; &#125; = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">    res.end(<span class="string">`<span class="subst">$&#123;a&#125;</span> + <span class="subst">$&#123;b&#125;</span> = <span class="subst">$&#123;<span class="built_in">parseInt</span>(a) + <span class="built_in">parseInt</span>(b)&#125;</span>`</span>);</span><br><span class="line">&#125;).listen(port, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server is listening on port &#x27;</span> + port);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h1><p>实现原理类似于上面提到的 Node 接口代理，需要你搭建一个中转 Nginx 服务器，用于转发请求。使用 Nginx 反向代理实现跨域，是最简单的跨域方式。只需要修改 Nginx 的配置即可解决跨域问题，支持所有浏览器，支持 session，不需要修改任何代码，并且不会影响服务器的性能。</p><p>先根据<a href="https://blog.csdn.net/diaojw090/article/details/89135073">Nginx安装教程</a>进行 Nginx 的安装。<br>然后修改 conf 目录下的 nginx.conf 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 8888;</span><br><span class="line">    server_name  127.0.0.1;</span><br><span class="line"> </span><br><span class="line">    location /&#123;</span><br><span class="line">        proxy_pass 127.0.0.1:8000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>此时客户端请求 8888 端口，就不会跨域了。</p><p>参考资料：<br><a href="https://juejin.cn/post/7017614708832206878">https://juejin.cn/post/7017614708832206878</a><br><a href="https://juejin.cn/post/6844904126246027278">https://juejin.cn/post/6844904126246027278</a><br><a href="https://juejin.cn/post/6844903767226351623">https://juejin.cn/post/6844903767226351623</a><br><a href="https://www.jianshu.com/p/9a8d793ec52a">https://www.jianshu.com/p/9a8d793ec52a</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS</a><br>公众号前端点线面</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浏览器同源策略&quot;&gt;&lt;a href=&quot;#浏览器同源策略&quot; class=&quot;headerlink&quot; title=&quot;浏览器同源策略&quot;&gt;&lt;/a&gt;浏览器同源策略&lt;/h1&gt;&lt;p&gt;浏览器同源策略是一个安全策略，其中同源指的是 &lt;code&gt;协议 + 域名 + 端口号&lt;/code&gt; </summary>
      
    
    
    
    
    <category term="浏览器" scheme="https://flower-f.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>js 版算法 101 笔记</title>
    <link href="https://flower-f.github.io/2022/01/17/js-algorithm-101-notes/"/>
    <id>https://flower-f.github.io/2022/01/17/js-algorithm-101-notes/</id>
    <published>2022-01-17T02:59:29.000Z</published>
    <updated>2022-01-20T12:59:37.413Z</updated>
    
    <content type="html"><![CDATA[<p>本文题目列表来源于<a href="https://101.zoo.team/">政采云前端团队</a>，题源来源于<a href="https://leetcode-cn.com/">力扣</a>。</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a><a href="https://leetcode-cn.com/problems/reverse-integer/">整数反转</a></h2><ul><li>方法一：使用 <code>reverse</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="built_in">parseInt</span>(x.toString().split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>));</span><br><span class="line">  num = x &lt; <span class="number">0</span> ? -num : num;</span><br><span class="line">  <span class="keyword">return</span> num &lt; -<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) || num &gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span> ? <span class="number">0</span> : num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>方法二：借鉴欧几里得算法，可以把空间复杂度降到 O(1)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> temp = <span class="built_in">Math</span>.abs(x);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (temp !== <span class="number">0</span>) &#123;</span><br><span class="line">    num = num * <span class="number">10</span> + (temp % <span class="number">10</span>);</span><br><span class="line">    temp = <span class="built_in">Math</span>.floor(temp / <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  num = x &lt; <span class="number">0</span> ? -num : num;</span><br><span class="line">  <span class="keyword">return</span> num &lt; -<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) || num &gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span> ? <span class="number">0</span> : num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a><a href="https://leetcode-cn.com/problems/palindrome-number/">回文数</a></h2><p>这题就是上面那题的变式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x === reverse(x);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 反转数字</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x !== <span class="number">0</span>) &#123;</span><br><span class="line">      num = num * <span class="number">10</span> + (x % <span class="number">10</span>);</span><br><span class="line">      x = <span class="built_in">Math</span>.floor(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a><a href="https://leetcode-cn.com/problems/valid-anagram/">有效的字母异位词</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">t</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isAnagram = <span class="function"><span class="keyword">function</span> (<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (s.length !== t.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> ch <span class="keyword">of</span> s) &#123;</span><br><span class="line">    map.set(ch, (map.get(ch) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> ch <span class="keyword">of</span> t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.has(ch) &amp;&amp; map.get(ch) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      map.set(ch, map.get(ch) - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="字符串转换整数"><a href="#字符串转换整数" class="headerlink" title="字符串转换整数"></a><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/">字符串转换整数</a></h2><ul><li>方法一：正则</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> myAtoi = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> maxVal = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>,</span><br><span class="line">    minVal = -<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 书写正则</span></span><br><span class="line">  <span class="comment">// (-|\+)? 表示 - 或 + 或什么都没有</span></span><br><span class="line">  <span class="comment">// \d+ 为匹配数字</span></span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^(-|\+)?\d+/g</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> groups = s.trim().match(reg);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 若匹配到了，取其第一项</span></span><br><span class="line">  <span class="keyword">if</span> (groups) &#123;</span><br><span class="line">    res = +groups[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (res &gt; maxVal) res = maxVal;</span><br><span class="line">  <span class="keyword">if</span> (res &lt; minVal) res = minVal;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>方法二：使用 <code>parseInt</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> myAtoi = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> maxVal = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>,</span><br><span class="line">    minVal = -<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="built_in">parseInt</span>(s);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(res)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (res &gt; maxVal) res = maxVal;</span><br><span class="line">  <span class="keyword">if</span> (res &lt; minVal) res = minVal;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="报数"><a href="#报数" class="headerlink" title="报数"></a><a href="https://leetcode-cn.com/problems/count-and-say/">报数</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countAndSay = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> sb = [];</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>,</span><br><span class="line">      pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pos &lt; str.length) &#123;</span><br><span class="line">      <span class="keyword">while</span> (pos &lt; str.length &amp;&amp; str[pos] === str[start]) &#123;</span><br><span class="line">        pos++;</span><br><span class="line">      &#125;</span><br><span class="line">      sb.push(<span class="string">&quot;&quot;</span> + (pos - start) + str[start]);</span><br><span class="line">      start = pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    str = sb.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a><a href="https://leetcode-cn.com/problems/reverse-string/">反转字符串</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[]&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    [s[i], s[s.length - <span class="number">1</span> - i]] = [s[s.length - <span class="number">1</span> - i], s[i]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="字符串中的第一个唯一字符"><a href="#字符串中的第一个唯一字符" class="headerlink" title="字符串中的第一个唯一字符"></a><a href="https://leetcode-cn.com/problems/first-unique-character-in-a-string/">字符串中的第一个唯一字符</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> firstUniqChar = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> ch <span class="keyword">of</span> s) &#123;</span><br><span class="line">    map.set(ch, (map.get(ch) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.get(s[i]) === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="验证回文串"><a href="#验证回文串" class="headerlink" title="验证回文串"></a><a href="https://leetcode-cn.com/problems/valid-palindrome/">验证回文串</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> real = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      (s[i] &gt;= <span class="string">&quot;a&quot;</span> &amp;&amp; s[i] &lt;= <span class="string">&quot;z&quot;</span>) ||</span><br><span class="line">      (s[i] &gt;= <span class="string">&quot;A&quot;</span> &amp;&amp; s[i] &lt;= <span class="string">&quot;Z&quot;</span>) ||</span><br><span class="line">      (s[i] &gt;= <span class="string">&quot;0&quot;</span> &amp;&amp; s[i] &lt;= <span class="string">&quot;9&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">      real.push(s[i].toLowerCase());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> realString = real.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; realString.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (realString[i] !== realString[realString.length - i - <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实现-strStr"><a href="#实现-strStr" class="headerlink" title="实现 strStr()"></a><a href="https://leetcode-cn.com/problems/implement-strstr/">实现 strStr()</a></h2><ul><li>暴力</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">haystack</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">needle</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> strStr = <span class="function"><span class="keyword">function</span> (<span class="params">haystack, needle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (needle === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; haystack.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; needle.length &amp;&amp; j + i &lt; haystack.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (haystack[i + j] === needle[j]) &#123;</span><br><span class="line">        count++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (j === needle.length - <span class="number">1</span> &amp;&amp; count === needle.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>剪枝 + 遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">haystack</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">needle</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> strStr = <span class="function"><span class="keyword">function</span> (<span class="params">haystack, needle</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 剪枝</span></span><br><span class="line">  <span class="keyword">if</span> (needle === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (needle.length &gt; haystack.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (needle.length === haystack.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> needle === haystack ? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= haystack.length - needle.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (haystack[i] !== needle[<span class="number">0</span>]) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (haystack.substring(i, i + needle.length) === needle) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a><a href="https://leetcode-cn.com/problems/longest-common-prefix/">最长公共前缀</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">strs</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span> (<span class="params">strs</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 假设第一个元素是最长前缀</span></span><br><span class="line">  <span class="keyword">let</span> prefix = strs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (!strs[i].startsWith(prefix)) &#123;</span><br><span class="line">      prefix = prefix.substring(<span class="number">0</span>, prefix.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否存在公共前缀</span></span><br><span class="line">    <span class="keyword">if</span> (prefix === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prefix;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">最长回文子串</a></h2><ul><li>dp</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 长度为 1，一定回文</span></span><br><span class="line">  <span class="comment">// 长度为 2 或 3，判断首尾是否相同：s[i] === s[j]</span></span><br><span class="line">  <span class="comment">// 长度大于 3, 首尾字符相同，且去掉首尾之后的子串仍为回文：(s[i] === s[j]) &amp;&amp; dp[i + 1][j - 1]</span></span><br><span class="line">  <span class="keyword">const</span> len = s.length;</span><br><span class="line">  <span class="comment">// dp[i][j] 表示 s[i..j] 是否是回文串</span></span><br><span class="line">  <span class="keyword">const</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(len).fill(<span class="literal">false</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(len).fill(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 边界，长度为 1 必定为回文</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 记录起点和长度，即可得到字符串</span></span><br><span class="line">  <span class="keyword">let</span> maxLen = <span class="number">1</span>,</span><br><span class="line">    begin = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 第一层枚举为子串长度</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> l = <span class="number">2</span>; l &lt;= len; l++) &#123;</span><br><span class="line">    <span class="comment">// 第二层枚举为左边界</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="comment">// j - i + 1 = l</span></span><br><span class="line">      <span class="keyword">const</span> j = l + i - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (j &gt;= len) &#123;</span><br><span class="line">        <span class="comment">// 如果右边界越界，就可以退出当前循环</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (s[i] !== s[j]) &#123;</span><br><span class="line">        dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">          dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 只要 dp[i][j] 为 true，就表示子串 s[i..j] 是回文</span></span><br><span class="line">      <span class="keyword">if</span> (dp[i][j] &amp;&amp; l &gt; maxLen) &#123;</span><br><span class="line">        maxLen = l;</span><br><span class="line">        begin = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> s.substr(begin, maxLen);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>暴力，需要注意的是这题暴力的解比 dp 更优</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 返回以 i 为中心的回文串</span></span><br><span class="line">    <span class="keyword">const</span> a = palindrome(i, i);</span><br><span class="line">    <span class="comment">// 返回以 i 和 i + 1 为中心的回文串</span></span><br><span class="line">    <span class="keyword">const</span> b = palindrome(i, i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (a.length &gt; res.length) &#123;</span><br><span class="line">      res = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b.length &gt; res.length) &#123;</span><br><span class="line">      res = b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置左右两个指针，是为了可以同时处理回文串长度为奇数和偶数的情况</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length &amp;&amp; s[left] === s[right]) &#123;</span><br><span class="line">      left--;</span><br><span class="line">      right++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回以 s[left] 和 s[right] 为中心的最长回文串</span></span><br><span class="line">    <span class="comment">// 此时 left 和 right 已经不符合要求了，所以返回的区间是 [left + 1, right - 1]</span></span><br><span class="line">    <span class="keyword">return</span> s.substring(left + <span class="number">1</span>, right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a><a href="https://leetcode-cn.com/problems/roman-to-integer/">罗马数字转整数</a></h2><p>先遍历所有罗马数字进行累加，对于特殊数字的循环，比如：5 + 1 = 6，而实际是 4，相差 2，所以需要在结果上减去 2。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> ch <span class="keyword">of</span> s) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;I&quot;</span>:</span><br><span class="line">        res += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;V&quot;</span>:</span><br><span class="line">        res += <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;X&quot;</span>:</span><br><span class="line">        res += <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;L&quot;</span>:</span><br><span class="line">        res += <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;C&quot;</span>:</span><br><span class="line">        res += <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;D&quot;</span>:</span><br><span class="line">        res += <span class="number">500</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;M&quot;</span>:</span><br><span class="line">        res += <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (s.includes(<span class="string">&quot;IV&quot;</span>) || s.includes(<span class="string">&quot;IX&quot;</span>)) res -= <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (s.includes(<span class="string">&quot;XL&quot;</span>) || s.includes(<span class="string">&quot;XC&quot;</span>)) res -= <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">if</span> (s.includes(<span class="string">&quot;CD&quot;</span>) || s.includes(<span class="string">&quot;CM&quot;</span>)) res -= <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Fizz-Buzz"><a href="#Fizz-Buzz" class="headerlink" title="Fizz Buzz"></a><a href="https://leetcode-cn.com/problems/fizz-buzz/">Fizz Buzz</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fizzBuzz = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">3</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      str += <span class="string">&quot;Fizz&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      str += <span class="string">&quot;Buzz&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">3</span> !== <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      str += i;</span><br><span class="line">    &#125;</span><br><span class="line">    arr.push(str);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="计数质数"><a href="#计数质数" class="headerlink" title="计数质数"></a><a href="https://leetcode-cn.com/problems/count-primes/">计数质数</a></h2><ul><li>枚举，超出时间限制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countPrimes = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isPrime(i)) &#123;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i * i &lt;= num; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (num % i === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>埃拉筛<br>这个算法的推导由来可以看<a href="https://labuladong.gitee.io/algo/4/30/118/">labuladong</a>。这个算法的复杂度是 <code>O(N * loglogN)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countPrimes = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isPrime = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i * i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isPrime[i]) &#123;</span><br><span class="line">      <span class="comment">// i 的倍数不可能是素数，每次 j += i</span></span><br><span class="line">      <span class="comment">// 从 i * i 开始，因为前面的数字已经算过了</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = i * i; j &lt; n; j += i) &#123;</span><br><span class="line">        isPrime[j] = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isPrime[i]) &#123;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-的幂"><a href="#3-的幂" class="headerlink" title="3 的幂"></a><a href="https://leetcode-cn.com/problems/power-of-three/">3 的幂</a></h2><p>循环和递归都很简单，不说了，还有一种骚操作。<br>在题目给定的 32 位有符号整数的范围内，最大的 3 的幂为 3 ^ 19 = 1162261467。我们只需要判断 n 是否是这个数的约数即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPowerOfThree = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; <span class="number">1162261467</span> % n === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Excel-表列名称"><a href="#Excel-表列名称" class="headerlink" title="Excel 表列名称"></a><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/">Excel 表列名称</a></h2><p>和正常 0 ~ 25 的 26 进制相比，本质上就是每一位多加了 1，所以只要在处理每一位的时候先减 1，就可以按照正常的 26 进制来处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">columnNumber</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convertToTitle = <span class="function"><span class="keyword">function</span> (<span class="params">columnNumber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (columnNumber) &#123;</span><br><span class="line">    columnNumber--;</span><br><span class="line">    <span class="keyword">const</span> temp = <span class="built_in">String</span>.fromCharCode((columnNumber % <span class="number">26</span>) + <span class="number">65</span>); <span class="comment">// 65 是 A 对应的 Char Code</span></span><br><span class="line">    res.push(temp);</span><br><span class="line">    columnNumber = <span class="built_in">Math</span>.floor(columnNumber / <span class="number">26</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res.reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Excel-表列序号"><a href="#Excel-表列序号" class="headerlink" title="Excel 表列序号"></a><a href="https://leetcode-cn.com/problems/excel-sheet-column-number/">Excel 表列序号</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">columnTitle</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> titleToNumber = <span class="function"><span class="keyword">function</span> (<span class="params">columnTitle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> i = columnTitle.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> carry = <span class="number">1</span>; <span class="comment">// 进制</span></span><br><span class="line">  <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 因为 A 表示 1，所以减法后需要每个数加 1，相当于减去 65，再加上 1</span></span><br><span class="line">    <span class="keyword">const</span> cur = columnTitle[i].charCodeAt(<span class="number">0</span>) - <span class="number">64</span>;</span><br><span class="line">    sum += cur * carry;</span><br><span class="line">    carry *= <span class="number">26</span>;</span><br><span class="line">    i--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a><a href="https://leetcode-cn.com/problems/happy-number/">快乐数</a></h2><p>首先我们需要清楚，快乐数的计算是可能会导致死循环出现的。遇到判断某个可能的死循环是否满足一定的条件，我们可以使用快慢指针，比如链表的经典题目<strong>判断链表是否有环</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isHappy = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> slow = n,</span><br><span class="line">    fast = n;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// slow 执行一遍， fast 连续执行两遍</span></span><br><span class="line">    slow = calculateSum(slow);</span><br><span class="line">    fast = calculateSum(fast);</span><br><span class="line">    fast = calculateSum(fast);</span><br><span class="line">  &#125; <span class="keyword">while</span> (slow !== fast);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> slow === <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">calculateSum</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (num) &#123;</span><br><span class="line">      <span class="keyword">const</span> bit = num % <span class="number">10</span>;</span><br><span class="line">      sum += bit * bit;</span><br><span class="line">      num = <span class="built_in">Math</span>.floor(num / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="阶乘后的零"><a href="#阶乘后的零" class="headerlink" title="阶乘后的零"></a><a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/">阶乘后的零</a></h2><ul><li>暴力</li></ul><ol><li>尾数中有 0 必定是是 10 的倍数</li><li>尾数中有多少个 0 就就是整个数能有多少个因子 10</li><li>因子 10 又可以拆成 ，因此就是找整个数字可以拆分成多少了<br>因为在因子中 2 的数量一定比 5 多，所以实际上我们只要找到因子 5 的个数就可以找到尾数中 0 的个数了，所以这个问题就可以转换成找因子 5 的个数。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> trailingZeroes = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = i;</span><br><span class="line">    <span class="keyword">while</span> (x !== <span class="number">0</span> &amp;&amp; x % <span class="number">5</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      ans++;</span><br><span class="line">      x = <span class="built_in">Math</span>.floor(x / <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>优化版本</li></ul><ol><li>n! 这些乘数中，每隔 5 个数，肯定会有一个数至少能拆出一个 5 因子。所以 n / 5 = 至少会出现的 5 的个数</li><li>因为 n / 5 并不能完全算出 5 因子的个数，比如若某个数 25 = 5 * 5，分解后得到的 5 也算一个，所以能被 25 因式分解相当于会出现 2 个 5 因子</li><li>依此类推，能被 25 _ 5 = 125 因式分解的相当于比之前按 25 因式分解的时候又多出一个 5 因子。能被 125 _ 5 = 625 因式分解的相当于比按 125 因式分解时又多出一个 5 因子。还有 625 * 5 …<br>所以 n! 的结果可以拆分为多少个 5 因子呢？<br>显然就是 n/5 + n/25 + n/125 + n/625 + …</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> trailingZeroes = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    n = <span class="built_in">Math</span>.floor(n / <span class="number">5</span>);</span><br><span class="line">    ans += n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Pow-x-n"><a href="#Pow-x-n" class="headerlink" title="Pow(x, n)"></a><a href="https://leetcode-cn.com/problems/powx-n/">Pow(x, n)</a></h2><ul><li><p>二分<br>使用折半计算，每次把 n 缩小一半，通过递归，最终获取 x 的 n 次幂。比如说要计算 x<sup>32</sup>，推算过程为：<br>x<sup>32</sup> -&gt; x<sup>16</sup> -&gt; x<sup>8</sup> -&gt; x<sup>4</sup> -&gt; x<sup>2</sup> -&gt; x<br>但是具体的操作还要根据数字的奇偶决定，如要计算 x<sup>77</sup>，推算过程为：<br>x<sup>77</sup> -&gt; x<sup>38</sup> -&gt; x<sup>19</sup> -&gt; x<sup>9</sup> -&gt; x<sup>4</sup> -&gt; x<sup>2</sup> -&gt; x<br>当我们要计算 x<sup>n</sup> 时，我们可以先递归地计算出 y = x<sup>n/2</sup>，接着：</p><ul><li>如果 n 为偶数，那么 x<sup>n</sup> = y<sup>2</sup></li><li>如果 n 为奇数，那么 x<sup>n</sup> = y<sup>2</sup> * x</li></ul><p>边界：n = 0，返回 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">var</span> myPow = <span class="function"><span class="keyword">function</span> (<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n &gt;= <span class="number">0</span> ? quickPower(x, n) : <span class="number">1</span> / quickPower(x, -n);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">quickPow</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> y = quickPow(x, <span class="built_in">Math</span>.floor(n / <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> === <span class="number">0</span> ? y * y : y * y * x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>快速幂<br>若 n = a1 + a2 + a3 + … + am，则<br>x<sup>n</sup> = x<sup>a1</sup> * x<sup>a2</sup> * x<sup>a3</sup> * … * x<sup>am</sup><br>依然以 x<sup>77</sup>，为例，x -&gt; x<sup>2</sup> -&gt; x<sup>4</sup> -&gt; x<sup>9</sup> -&gt; x<sup>19</sup> -&gt; x<sup>38</sup> -&gt; x<sup>77</sup></p><ul><li>x<sup>38</sup> -&gt; x<sup>77</sup> 额外乘的 x 在 x<sup>77</sup> 中贡献了 x</li><li>x<sup>9</sup> -&gt; x<sup>19</sup> 额外乘的 x 在 后面被平方了 2 次，所以贡献是 x<sup>2 ^ 2</sup></li><li>x<sup>4</sup> -&gt; x<sup>9</sup> 额外乘的 x 在 后面被平方了 3 次，所以贡献是 x<sup>2 ^ 3</sup></li><li>最初的 x 在之后被平方了 6 次，因此最后贡献的是 x<sup>2 ^ 6</sup></li><li>上面的贡献相乘， x * x<sup>4</sup> * x<sup>8</sup> * x<sup>64</sup> = x<sup>77</sup>，这些指数 1、4、8、64，对应了 77 的二进制表示 (1001101)<sub>2</sub> 中的每一个 1</li></ul><p>因此，我们从 x 开始不断平方，得到 x<sup>2</sup>、x<sup>4</sup>、x<sup>8</sup>、x<sup>16</sup>，… ，如果 n 的第 k 位（从右往左数）二进制为 1，那么我们就将对应的贡献 x<sup>2 ^ k</sup> 计入答案。</p><p>说实话不是很懂为什么快速幂居然会超时，这测试用例有点那啥（</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> myPow = <span class="function"><span class="keyword">function</span> (<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断边界，否则会超时</span></span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span> || n &lt;= <span class="number">1</span> &lt;&lt; <span class="number">31</span> &amp;&amp; <span class="built_in">Math</span>.abs(x) === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span> &lt;&lt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> n &gt;= <span class="number">0</span> ? quickPow(x, n) : <span class="number">1</span> / quickPow(x, -n);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">quickPow</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">      <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 计算贡献</span></span><br><span class="line">        result = result * a;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 扩大它的贡献</span></span><br><span class="line">      a = a * a;</span><br><span class="line">      <span class="comment">// 去除最后一位</span></span><br><span class="line">      b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文题目列表来源于&lt;a href=&quot;https://101.zoo.team/&quot;&gt;政采云前端团队&lt;/a&gt;，题源来源于&lt;a href=&quot;https://leetcode-cn.com/&quot;&gt;力扣&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; clas</summary>
      
    
    
    
    
    <category term="算法" scheme="https://flower-f.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="连载" scheme="https://flower-f.github.io/tags/%E8%BF%9E%E8%BD%BD/"/>
    
    <category term="javascript" scheme="https://flower-f.github.io/tags/javascript/"/>
    
    <category term="leetcode" scheme="https://flower-f.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
